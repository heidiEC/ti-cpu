[
  {
    "title": "3 System Control and Interrupts",
    "entities": {
      "error_conditions": [
        "Bus fault",
        "Stack overflow",
        "Brownout reset",
        "Missing clock detection",
        "Watchdog reset",
        "NMI watchdog reset",
        "Power-on reset",
        "External reset"
      ],
      "status_indicators": [
        "EALLOW bit",
        "DCDCSTS.SWSEQDON",
        "DCDCSTS.INDDETECT",
        "DCDCCTL.DCDCEN bit",
        "XRSn bit in RESC register",
        "RESC register bits"
      ],
      "components": [
        "CPU",
        "System control module",
        "PLL",
        "DMA controller",
        "ADC",
        "Watchdog timer",
        "32-bit CPU timers",
        "Memory controller module",
        "Flash memory",
        "OTP memory",
        "Dual Code Security Module",
        "Internal DC-DC regulator",
        "Internal LDO",
        "JTAG",
        "Peripherals",
        "RAM",
        "Boot ROM"
      ],
      "root_causes": [
        "Invalid pointer dereference",
        "Incorrect clock configuration",
        "Hardware connection issues",
        "Inductor not detected on VSW pin",
        "Spurious CPU writes",
        "Missing VREGENZ low signal"
      ],
      "solutions": [
        "Reset the device",
        "Check memory allocation",
        "Inspect register values",
        "Set EALLOW bit",
        "Execute EALLOW instruction",
        "Execute EDIS instruction",
        "Wait for DCDCSTS.SWSEQDON to equal 0x1",
        "Check hardware connections",
        "Delay 80\u03bcs for DC-DC regulator output to settle",
        "Clear DCDCCTL.DCDCEN bit",
        "Write ones to RESCCLR register",
        "Check DCDCSTS.INDDETECT bit"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "EALLOW bit": [
          "Spurious CPU writes"
        ],
        "DCDCSTS.SWSEQDON": [
          "Hardware connection issues"
        ],
        "DCDCSTS.INDDETECT": [
          "Inductor not detected on VSW pin"
        ],
        "DCDCCTL.DCDCEN bit": [
          "Hardware connection issues"
        ],
        "XRSn bit in RESC register": [
          "External reset"
        ],
        "RESC register bits": [
          "Power-on reset",
          "External reset",
          "Watchdog reset",
          "NMI watchdog reset",
          "Brownout reset"
        ]
      },
      "error_to_cause": {
        "Bus fault": [
          "Invalid pointer dereference"
        ],
        "Stack overflow": [
          "Invalid pointer dereference"
        ],
        "Brownout reset": [
          "Hardware connection issues"
        ],
        "Missing clock detection": [
          "Incorrect clock configuration"
        ],
        "Watchdog reset": [
          "Incorrect clock configuration"
        ],
        "NMI watchdog reset": [
          "Incorrect clock configuration"
        ],
        "Power-on reset": [
          "Hardware connection issues"
        ],
        "External reset": [
          "Hardware connection issues"
        ],
        "Spurious CPU writes": [
          "Missing VREGENZ low signal"
        ],
        "Hardware connection issues": [
          "Missing VREGENZ low signal"
        ],
        "Inductor not detected on VSW pin": [
          "Hardware connection issues"
        ]
      },
      "cause_to_solution": {
        "Invalid pointer dereference": [
          "Reset the device",
          "Check memory allocation",
          "Inspect register values"
        ],
        "Incorrect clock configuration": [
          "Reset the device",
          "Inspect register values"
        ],
        "Hardware connection issues": [
          "Check hardware connections",
          "Reset the device"
        ],
        "Inductor not detected on VSW pin": [
          "Check DCDCSTS.INDDETECT bit",
          "Check hardware connections"
        ],
        "Spurious CPU writes": [
          "Set EALLOW bit",
          "Execute EALLOW instruction",
          "Execute EDIS instruction"
        ],
        "Missing VREGENZ low signal": [
          "Check hardware connections",
          "Wait for DCDCSTS.SWSEQDON to equal 0x1",
          "Delay 80\u03bcs for DC-DC regulator output to settle",
          "Clear DCDCCTL.DCDCEN bit",
          "Write ones to RESCCLR register"
        ]
      }
    }
  },
  {
    "title": "3.4.4 Debugger Reset (SYSRS)",
    "entities": {
      "error_conditions": [
        "Watchdog timer not serviced",
        "Hardware errors in the system",
        "Vector fetch occurs in a safe copy or CRC function",
        "Security breaches"
      ],
      "status_indicators": [
        "POR bit in RESC is set",
        "XRSn bit in RESC is set",
        "WDRSn bit in RESC is set",
        "NMIWDRSn bit in RESC is set",
        "SCCRESETn bit in RESC is set"
      ],
      "components": [
        "Power-on reset (POR) circuit",
        "XRS pin",
        "GPIOs",
        "Reset cause register (RESC)",
        "NMI shadow flag register (NMISHDFLG)",
        "X1 clock counter register (X1CNT)",
        "Debug logic",
        "JTAG port",
        "Boot ROM",
        "CPU",
        "Peripherals",
        "ICEPick debug module",
        "Device capability registers",
        "Clock source",
        "PLL",
        "Missing clock detection",
        "PIE vector fetch error handler",
        "NMI flags",
        "Analog trims",
        "Watchdog timer",
        "Non-maskable interrupt (NMI) module",
        "Dual-zone code security module (DCSM)",
        "Flash memory",
        "CLA code",
        "INTOSC1"
      ],
      "root_causes": [
        "Power-up glitches",
        "Watchdog timer not serviced within user-specified time",
        "Hardware errors detected by NMI module",
        "CPU does not respond to NMI error within user-specified time",
        "Vector fetch in safe copy or CRC function while interrupts should be disabled"
      ],
      "solutions": [
        "Drive XRS pin low externally to provide correct reset duration",
        "Service watchdog timer within specified time",
        "Disable interrupts before calling safe copy or CRC functions",
        "Use Code Composer Studio IDE to trigger debugger reset",
        "Check RESC register bits to determine reset cause"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "POR bit in RESC is set": [
          "Power-up glitches"
        ],
        "XRSn bit in RESC is set": [
          "Watchdog timer not serviced",
          "Hardware errors in the system",
          "Vector fetch occurs in a safe copy or CRC function"
        ],
        "WDRSn bit in RESC is set": [
          "Watchdog timer not serviced"
        ],
        "NMIWDRSn bit in RESC is set": [
          "Hardware errors in the system"
        ],
        "SCCRESETn bit in RESC is set": [
          "Vector fetch occurs in a safe copy or CRC function",
          "Security breaches"
        ]
      },
      "error_to_cause": {
        "Watchdog timer not serviced": [
          "Watchdog timer not serviced within user-specified time"
        ],
        "Hardware errors in the system": [
          "Hardware errors detected by NMI module",
          "CPU does not respond to NMI error within user-specified time"
        ],
        "Vector fetch occurs in a safe copy or CRC function": [
          "Vector fetch in safe copy or CRC function while interrupts should be disabled"
        ],
        "Security breaches": [
          "Vector fetch in safe copy or CRC function while interrupts should be disabled"
        ]
      },
      "cause_to_solution": {
        "Power-up glitches": [
          "Drive XRS pin low externally to provide correct reset duration"
        ],
        "Watchdog timer not serviced within user-specified time": [
          "Service watchdog timer within specified time",
          "Check RESC register bits to determine reset cause"
        ],
        "Hardware errors detected by NMI module": [
          "Check RESC register bits to determine reset cause"
        ],
        "CPU does not respond to NMI error within user-specified time": [
          "Check RESC register bits to determine reset cause"
        ],
        "Vector fetch in safe copy or CRC function while interrupts should be disabled": [
          "Disable interrupts before calling safe copy or CRC functions",
          "Use Code Composer Studio IDE to trigger debugger reset",
          "Check RESC register bits to determine reset cause"
        ]
      }
    }
  },
  {
    "title": "3.5.2 Interrupt Architecture",
    "entities": {
      "error_conditions": [
        "transmission error",
        "conflicts over resources"
      ],
      "status_indicators": [
        "flag registers",
        "enable registers",
        "status register bits"
      ],
      "components": [
        "CPU",
        "peripheral interrupt lines",
        "INT13",
        "INT14",
        "CPU timers 1 and 2",
        "enhanced Peripheral Interrupt Expansion module",
        "ePIE",
        "PIE",
        "vector table",
        "INPUTXBAR4",
        "WDINT",
        "LPMINT",
        "WAKEINT",
        "TINT0",
        "NMI",
        "INPUTXBAR13",
        "INPUTXBAR5",
        "INPUTXBAR6",
        "INPUTXBAR14",
        "GPIO0",
        "GPIO1",
        "TIMER0",
        "TIMER1",
        "TIMER2",
        "RTOSINT",
        "ERAD",
        "XINT1 Control",
        "XINT5 Control",
        "XINT3 Control",
        "XINT4 Control",
        "XINT2 Control",
        "Input X-BAR",
        "LPM Logic",
        "WD",
        "NMI module"
      ],
      "root_causes": [
        "asynchronous program flow",
        "multiple events triggering same interrupt signal"
      ],
      "solutions": [
        "reading the peripheral's status register",
        "clear status register bits manually",
        "implement and prioritize nested interrupts in software",
        "disable interrupts during critical tasks"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "status register bits": [
          "transmission error"
        ],
        "flag registers": [
          "conflicts over resources"
        ],
        "enable registers": [
          "conflicts over resources"
        ]
      },
      "error_to_cause": {
        "transmission error": [
          "multiple events triggering same interrupt signal"
        ],
        "conflicts over resources": [
          "asynchronous program flow"
        ]
      },
      "cause_to_solution": {
        "multiple events triggering same interrupt signal": [
          "reading the peripheral's status register",
          "clear status register bits manually"
        ],
        "asynchronous program flow": [
          "implement and prioritize nested interrupts in software",
          "disable interrupts during critical tasks"
        ]
      }
    }
  },
  {
    "title": "3.5.3 Interrupt Entry Sequence",
    "entities": {
      "error_conditions": [
        "No interrupt is both flagged and enabled",
        "Software changes the state of the PIE while an interrupt is propagating"
      ],
      "status_indicators": [
        "PIEIERx enable register bits",
        "PIEIFRx flag register bits",
        "PIEACK register bit",
        "IER enable register",
        "IFR flag register",
        "ST1.INTM bit"
      ],
      "components": [
        "PIE",
        "CPU",
        "PIE channels",
        "PIE groups",
        "PIE acknowledge register",
        "CPU interrupt logic",
        "Peripheral interrupts"
      ],
      "root_causes": [
        "Software changes the state of the PIE while an interrupt is propagating"
      ],
      "solutions": [
        "Use procedures for safely modifying the PIE configuration once interrupts have been enabled",
        "Use SETC and CLRC instructions to control global interrupt mask",
        "Use C2000Ware's DINT and EINT macros in C code"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "PIEIERx enable register bits": [
          "No interrupt is both flagged and enabled"
        ],
        "PIEIFRx flag register bits": [
          "No interrupt is both flagged and enabled"
        ],
        "ST1.INTM bit": [
          "Software changes the state of the PIE while an interrupt is propagating"
        ]
      },
      "error_to_cause": {
        "No interrupt is both flagged and enabled": [
          "Software changes the state of the PIE while an interrupt is propagating"
        ],
        "Software changes the state of the PIE while an interrupt is propagating": [
          "Software changes the state of the PIE while an interrupt is propagating"
        ]
      },
      "cause_to_solution": {
        "Software changes the state of the PIE while an interrupt is propagating": [
          "Use procedures for safely modifying the PIE configuration once interrupts have been enabled",
          "Use SETC and CLRC instructions to control global interrupt mask",
          "Use C2000Ware's DINT and EINT macros in C code"
        ]
      }
    }
  },
  {
    "title": "3.5.4.2 Handling Interrupts",
    "entities": {
      "error_conditions": [
        "Instructions in earlier stages are flushed",
        "Wait states on the ISR or stack memories will add to the latency",
        "Loops created using the C28x RPT instruction cannot be interrupted"
      ],
      "status_indicators": [
        "PIEIFRx.y",
        "PIEIERx.y is set",
        "PIEACK.x is clear",
        "PIEACK.x is set",
        "IFR.x",
        "IER.x is set",
        "INTM is clear",
        "IFR.x and IER.x are cleared",
        "INTM is set",
        "EALLOW is cleared",
        "PIEIFRx.y is cleared",
        "PIEIER and IER registers are cleared",
        "INTM is set",
        "ENPIE bit of the PIECTRL register",
        "PIEIERx bit",
        "CPU IER bit",
        "PIEACK bit"
      ],
      "components": [
        "PIE",
        "CPU",
        "peripheral",
        "pipeline",
        "stack",
        "ISR",
        "GPIO",
        "Timer1",
        "Timer2",
        "PIE vector table",
        "TMS320C28x C compiler",
        "C28x RPT instruction"
      ],
      "root_causes": [
        "No interrupts are enabled by default at power-up",
        "PIEACK bit not cleared manually in user code"
      ],
      "solutions": [
        "Disable interrupts globally (DINT or SETC INTM)",
        "Enable the PIE by setting the ENPIE bit of the PIECTRL register",
        "Write the ISR vector for each interrupt to the appropriate location in the PIE vector table",
        "Set the appropriate PIEIERx bit for each interrupt",
        "Set the CPU IER bit for any PIE group containing enabled interrupts",
        "Enable the interrupt in the peripheral",
        "Enable interrupts globally (EINT or CLRC INTM)",
        "Save and restore the state of certain CPU registers",
        "Clear the PIEACK bit for the interrupt group",
        "Return using the IRET instruction",
        "Use the __interrupt keyword for function definition"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "PIEIER and IER registers are cleared": [
          "No interrupts are enabled by default at power-up"
        ],
        "INTM is set": [
          "No interrupts are enabled by default at power-up"
        ],
        "PIEACK bit": [
          "PIEACK bit not cleared manually in user code"
        ]
      },
      "error_to_cause": {
        "Instructions in earlier stages are flushed": [
          "Interrupt processing sequence"
        ],
        "Wait states on the ISR or stack memories will add to the latency": [
          "Memory access delays"
        ],
        "Loops created using the C28x RPT instruction cannot be interrupted": [
          "C28x RPT instruction design"
        ],
        "No interrupts are enabled by default at power-up": [
          "No interrupts are enabled by default at power-up"
        ],
        "CPU will not receive further interrupts from group": [
          "PIEACK bit not cleared manually in user code"
        ]
      },
      "cause_to_solution": {
        "No interrupts are enabled by default at power-up": [
          "Disable interrupts globally (DINT or SETC INTM)",
          "Enable the PIE by setting the ENPIE bit of the PIECTRL register",
          "Write the ISR vector for each interrupt to the appropriate location in the PIE vector table",
          "Set the appropriate PIEIERx bit for each interrupt",
          "Set the CPU IER bit for any PIE group containing enabled interrupts",
          "Enable the interrupt in the peripheral",
          "Enable interrupts globally (EINT or CLRC INTM)"
        ],
        "PIEACK bit not cleared manually in user code": [
          "Clear the PIEACK bit for the interrupt group"
        ]
      }
    }
  },
  {
    "title": "3.5.4.4 Nesting Interrupts",
    "entities": {
      "error_conditions": [
        "spurious interrupt condition",
        "race conditions",
        "incoming interrupts to be lost",
        "mismatch between the two vector tables",
        "RAM_CORRECTABLE_ERR",
        "FLASH_CORRECTABLE_ERR",
        "RAM_ACC_VIOL",
        "SYS_PLL_SLIP",
        "FPU_OVFINT",
        "FPU_UNFINT",
        "CLA_LVF",
        "CLA_LUF"
      ],
      "status_indicators": [
        "CPU global interrupt mask",
        "INTM",
        "IER",
        "PIEIERx registers",
        "PIEIER bit",
        "CPU IFR register",
        "CPU IFR bit",
        "PIEACK bit",
        "PIEIFR bits",
        "PIEVERRADDR register"
      ],
      "components": [
        "CPU",
        "PIE",
        "ePIE",
        "PWMs",
        "PIE vector table",
        "primary vector table",
        "redundant vector table",
        "boot ROM handler",
        "peripheral registers",
        "DMA controller",
        "ADC",
        "EPWM",
        "ECAP",
        "EQEP",
        "CLB",
        "SPI",
        "I2C",
        "SCI",
        "DCAN",
        "CLA",
        "FPU",
        "RAM",
        "FLASH",
        "PLL"
      ],
      "root_causes": [
        "interrupt signal already propagating when PIEIER write completes",
        "read/modify/write operation on PIEIFR bits",
        "PIEVERRADDR register value has not been set"
      ],
      "solutions": [
        "set the CPU global interrupt mask using DINT or SETC INTM",
        "Disable interrupts globally (DINT or SETC INTM)",
        "Clear the PIEIER bit for the interrupt",
        "Wait 5 cycles to make sure that any propagating interrupt has reached the CPU IFR register",
        "Clear the CPU IFR bit for the interrupt's PIE group",
        "Clear the PIEACK bit for the interrupt's PIE group",
        "Enable interrupts globally (EINT or CLRC INTM)",
        "Modify the PIE vector table to map the PIEIFR bit's interrupt vector to an empty ISR",
        "Disable the interrupt in the peripheral registers",
        "Wait for the pending interrupt to be serviced by the empty ISR",
        "Modify the PIE vector table to map the interrupt vector back to the original ISR",
        "use software control of the IER and PIEIERx registers"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "CPU global interrupt mask": [
          "spurious interrupt condition",
          "race conditions"
        ],
        "INTM": [
          "spurious interrupt condition",
          "race conditions"
        ],
        "PIEIERx registers": [
          "spurious interrupt condition",
          "race conditions"
        ],
        "PIEIER bit": [
          "spurious interrupt condition",
          "race conditions"
        ],
        "CPU IFR register": [
          "spurious interrupt condition"
        ],
        "CPU IFR bit": [
          "spurious interrupt condition"
        ],
        "PIEACK bit": [
          "spurious interrupt condition"
        ],
        "PIEIFR bits": [
          "incoming interrupts to be lost"
        ],
        "PIEVERRADDR register": [
          "mismatch between the two vector tables"
        ]
      },
      "error_to_cause": {
        "spurious interrupt condition": [
          "interrupt signal already propagating when PIEIER write completes"
        ],
        "race conditions": [
          "interrupt signal already propagating when PIEIER write completes"
        ],
        "incoming interrupts to be lost": [
          "read/modify/write operation on PIEIFR bits"
        ],
        "mismatch between the two vector tables": [
          "PIEVERRADDR register value has not been set"
        ]
      },
      "cause_to_solution": {
        "interrupt signal already propagating when PIEIER write completes": [
          "Disable interrupts globally (DINT or SETC INTM)",
          "Clear the PIEIER bit for the interrupt",
          "Wait 5 cycles to make sure that any propagating interrupt has reached the CPU IFR register",
          "Clear the CPU IFR bit for the interrupt's PIE group",
          "Clear the PIEACK bit for the interrupt's PIE group",
          "Enable interrupts globally (EINT or CLRC INTM)"
        ],
        "read/modify/write operation on PIEIFR bits": [
          "Disable interrupts globally (DINT or SETC INTM)",
          "Modify the PIE vector table to map the PIEIFR bit's interrupt vector to an empty ISR",
          "Disable the interrupt in the peripheral registers",
          "Enable interrupts globally (EINT or CLRC INTM)",
          "Wait for the pending interrupt to be serviced by the empty ISR",
          "Modify the PIE vector table to map the interrupt vector back to the original ISR",
          "Clear the PIEACK bit for the interrupt's PIE group"
        ],
        "PIEVERRADDR register value has not been set": [
          "set the CPU global interrupt mask using DINT or SETC INTM"
        ]
      }
    }
  },
  {
    "title": "3.5.5.1 PIE Interrupt Priority",
    "entities": {
      "error_conditions": [
        "FPU overflow interrupt",
        "FPU underflow interrupt",
        "RAM correctable error interrupt",
        "Flash correctable error interrupt",
        "RAM access violation interrupt",
        "PLL slip interrupt",
        "CLA overflow interrupt",
        "CLA underflow interrupt",
        "Illegal Instruction (ITRAP)"
      ],
      "status_indicators": [
        "PIEIFRx.y is cleared",
        "PIEACK for the group must be cleared"
      ],
      "components": [
        "PIE",
        "CPU",
        "PIE group",
        "Boot ROM",
        "ADCA",
        "ADCB",
        "ADCC",
        "EPWM",
        "ECAP",
        "EQEP",
        "CLB",
        "SDFM",
        "SPI",
        "DMA",
        "I2C",
        "SCI",
        "CAN",
        "CLA",
        "FPU",
        "PLL",
        "RAM",
        "Flash"
      ],
      "root_causes": [],
      "solutions": [
        "channel 1.1's ISR has to clear PIEACK for group 1"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "PIEIFRx.y is cleared": [
          "FPU overflow interrupt",
          "FPU underflow interrupt",
          "RAM correctable error interrupt",
          "Flash correctable error interrupt",
          "RAM access violation interrupt",
          "PLL slip interrupt",
          "CLA overflow interrupt",
          "CLA underflow interrupt",
          "Illegal Instruction (ITRAP)"
        ],
        "PIEACK for the group must be cleared": [
          "FPU overflow interrupt",
          "FPU underflow interrupt",
          "RAM correctable error interrupt",
          "Flash correctable error interrupt",
          "RAM access violation interrupt",
          "PLL slip interrupt",
          "CLA overflow interrupt",
          "CLA underflow interrupt",
          "Illegal Instruction (ITRAP)"
        ]
      },
      "error_to_cause": {
        "FPU overflow interrupt": [],
        "FPU underflow interrupt": [],
        "RAM correctable error interrupt": [],
        "Flash correctable error interrupt": [],
        "RAM access violation interrupt": [],
        "PLL slip interrupt": [],
        "CLA overflow interrupt": [],
        "CLA underflow interrupt": [],
        "Illegal Instruction (ITRAP)": []
      },
      "cause_to_solution": {
        "": [
          "channel 1.1's ISR has to clear PIEACK for group 1"
        ]
      }
    }
  },
  {
    "title": "3.6.3.4 Software-Forced Error",
    "entities": {
      "error_conditions": [
        "Missing clock detection",
        "RAM uncorrectable ECC error",
        "Flash uncorrectable ECC error",
        "Single-bit parity error",
        "Double-bit ECC data error",
        "Single-bit ECC address error",
        "OSCCLK source stops",
        "NMI watchdog reset",
        "Software-forced error"
      ],
      "status_indicators": [
        "NMIFLG register status bit",
        "NMIINT bit in NMIFLG register",
        "SWERR bit in NMIFLGFRC register",
        "SWERR flag"
      ],
      "components": [
        "NMI module",
        "NMI watchdog counter",
        "NMIFLG register",
        "NMIWDPRD register",
        "NMIFLGCLR register",
        "NMIFLGFRC register",
        "PIE vector table",
        "Boot ROM",
        "CPU",
        "CLA",
        "DMA",
        "PLL",
        "OSCCLK",
        "INTOSC1",
        "SYSCLK",
        "RAM",
        "Flash",
        "Missing clock detection logic"
      ],
      "root_causes": [
        "OSCCLK source failure",
        "NMI watchdog counter reaching NMIWDPRD value",
        "Single-bit parity error in RAM read",
        "Double-bit ECC data error in RAM read",
        "Single-bit ECC address error in RAM read",
        "Double-bit ECC data error in Flash read",
        "Single-bit ECC address error in Flash read",
        "Writing to SWERR bit"
      ],
      "solutions": [
        "Clear flag bit using NMIFLGCLR register",
        "Clear NMIINT bit in NMIFLG register",
        "Write NMI handler vector to PIE vector table",
        "PLL is bypassed and OSCCLK connected to INTOSC1",
        "Use SWERR flag for self-test mode implementation"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "NMIFLG register status bit": [
          "Missing clock detection",
          "RAM uncorrectable ECC error",
          "Flash uncorrectable ECC error",
          "Software-forced error"
        ],
        "NMIINT bit in NMIFLG register": [
          "Missing clock detection",
          "RAM uncorrectable ECC error",
          "Flash uncorrectable ECC error",
          "Software-forced error"
        ],
        "SWERR bit in NMIFLGFRC register": [
          "Software-forced error"
        ],
        "SWERR flag": [
          "Software-forced error"
        ]
      },
      "error_to_cause": {
        "Missing clock detection": [
          "OSCCLK source failure"
        ],
        "RAM uncorrectable ECC error": [
          "Single-bit parity error in RAM read",
          "Double-bit ECC data error in RAM read",
          "Single-bit ECC address error in RAM read"
        ],
        "Flash uncorrectable ECC error": [
          "Double-bit ECC data error in Flash read",
          "Single-bit ECC address error in Flash read"
        ],
        "Single-bit parity error": [
          "Single-bit parity error in RAM read"
        ],
        "Double-bit ECC data error": [
          "Double-bit ECC data error in RAM read",
          "Double-bit ECC data error in Flash read"
        ],
        "Single-bit ECC address error": [
          "Single-bit ECC address error in RAM read",
          "Single-bit ECC address error in Flash read"
        ],
        "OSCCLK source stops": [
          "OSCCLK source failure"
        ],
        "NMI watchdog reset": [
          "NMI watchdog counter reaching NMIWDPRD value"
        ],
        "Software-forced error": [
          "Writing to SWERR bit"
        ]
      },
      "cause_to_solution": {
        "OSCCLK source failure": [
          "PLL is bypassed and OSCCLK connected to INTOSC1"
        ],
        "NMI watchdog counter reaching NMIWDPRD value": [
          "Clear flag bit using NMIFLGCLR register"
        ],
        "Single-bit parity error in RAM read": [
          "Clear flag bit using NMIFLGCLR register",
          "Write NMI handler vector to PIE vector table"
        ],
        "Double-bit ECC data error in RAM read": [
          "Clear flag bit using NMIFLGCLR register",
          "Write NMI handler vector to PIE vector table"
        ],
        "Single-bit ECC address error in RAM read": [
          "Clear flag bit using NMIFLGCLR register",
          "Write NMI handler vector to PIE vector table"
        ],
        "Double-bit ECC data error in Flash read": [
          "Clear flag bit using NMIFLGCLR register",
          "Write NMI handler vector to PIE vector table"
        ],
        "Single-bit ECC address error in Flash read": [
          "Clear flag bit using NMIFLGCLR register",
          "Write NMI handler vector to PIE vector table"
        ],
        "Writing to SWERR bit": [
          "Use SWERR flag for self-test mode implementation",
          "Clear flag bit using NMIFLGCLR register"
        ]
      }
    }
  },
  {
    "title": "3.6.5 Error Pin",
    "entities": {
      "error_conditions": [
        "Illegal instruction trap (ITRAP)",
        "RAM fetch access violation",
        "Missing clock condition",
        "OSCCLK failure",
        "Watchdog counter overflow",
        "Bad key",
        "Out of window",
        "Clock failure"
      ],
      "status_indicators": [
        "NMI_FLG bit is set",
        "NMISHDFLG register bits",
        "ERRORSTS signal goes low",
        "MCDCR.MCLKSTS bit",
        "MCDCR.MCDSTS flag",
        "CLOCKFAIL signal goes high",
        "WDRSn flag",
        "PLLSTS[MCLKSTS] bit",
        "X1CNT register value reaches 1023 (0x3FF)",
        "WDCNTR overflow"
      ],
      "components": [
        "CPU",
        "PIE vector table",
        "GPIO24",
        "GPIO28",
        "GPIO29",
        "GPIO18",
        "System PLL",
        "INTOSC1",
        "INTOSC2",
        "XTAL",
        "X1 pin",
        "X2 pin",
        "VCO",
        "NMI watchdog timer",
        "DMA controller",
        "CLA",
        "ADC",
        "ePWM modules",
        "CAN modules",
        "SCI modules",
        "SPI modules",
        "Flash wrapper",
        "Boot ROM",
        "RAM",
        "Missing clock detection (MCD) subsystem",
        "CPU Timers 0/1/2",
        "Watchdog timer module",
        "WDKEY register",
        "WDCNTR counter"
      ],
      "root_causes": [
        "CPU tries to execute an illegal instruction",
        "Invalid pointer dereference",
        "Complete loss of OSCCLK",
        "Crystal oscillator failure",
        "External oscillator failure",
        "Device failure",
        "Incorrect watchdog key sequence",
        "Writing incorrect value to WDCR[WDCHK] bits",
        "Improper value written to WDKEY"
      ],
      "solutions": [
        "Clear flags by CPU or power-on reset",
        "Use external pull-down resistor for error-state assertion",
        "Use external pull-up resistor to prevent error-state assertion",
        "Follow crystal/resonator startup procedure",
        "Clear X1 counter by writing 1 to X1CNT.CLR",
        "Wait for X1 counter to reach 1023 (0x3FF)",
        "Check MCLKSTS bit in MCDCR register",
        "Clear missing clock status by writing 1 to MCDCR.MCLKCLR",
        "Write proper sequence (0x55 + 0xAA) to WDKEY register",
        "Reset the device",
        "Clear WDRSn flag after reading",
        "Use C2000Ware SysCtl:setClock() function for PLL configuration",
        "Wait 300 NOP instructions after clock source change",
        "Wait at least 60 CPU clock cycles after bypassing PLL",
        "Set WDWCR register for minimum window check",
        "Service watchdog when WDCNTR >= WDWCR"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "NMI_FLG bit is set": [
          "Illegal instruction trap (ITRAP)"
        ],
        "NMISHDFLG register bits": [
          "RAM fetch access violation",
          "Clock failure"
        ],
        "ERRORSTS signal goes low": [
          "RAM fetch access violation",
          "Clock failure"
        ],
        "MCDCR.MCLKSTS bit": [
          "OSCCLK failure",
          "Missing clock condition"
        ],
        "MCDCR.MCDSTS flag": [
          "Missing clock condition"
        ],
        "CLOCKFAIL signal goes high": [
          "Missing clock condition",
          "Clock failure"
        ],
        "WDRSn flag": [
          "Watchdog counter overflow"
        ],
        "PLLSTS[MCLKSTS] bit": [
          "Missing clock condition"
        ],
        "X1CNT register value reaches 1023 (0x3FF)": [
          "Crystal oscillator failure",
          "External oscillator failure"
        ],
        "WDCNTR overflow": [
          "Watchdog counter overflow"
        ]
      },
      "error_to_cause": {
        "Illegal instruction trap (ITRAP)": [
          "CPU tries to execute an illegal instruction"
        ],
        "RAM fetch access violation": [
          "Invalid pointer dereference"
        ],
        "Missing clock condition": [
          "Complete loss of OSCCLK"
        ],
        "OSCCLK failure": [
          "Crystal oscillator failure",
          "External oscillator failure",
          "Device failure"
        ],
        "Watchdog counter overflow": [
          "Incorrect watchdog key sequence",
          "Writing incorrect value to WDCR[WDCHK] bits"
        ],
        "Bad key": [
          "Improper value written to WDKEY"
        ],
        "Out of window": [
          "Incorrect watchdog key sequence"
        ],
        "Clock failure": [
          "Complete loss of OSCCLK",
          "Crystal oscillator failure",
          "External oscillator failure"
        ]
      },
      "cause_to_solution": {
        "CPU tries to execute an illegal instruction": [
          "Reset the device"
        ],
        "Invalid pointer dereference": [
          "Clear flags by CPU or power-on reset"
        ],
        "Complete loss of OSCCLK": [
          "Clear missing clock status by writing 1 to MCDCR.MCLKCLR",
          "Follow crystal/resonator startup procedure"
        ],
        "Crystal oscillator failure": [
          "Clear X1 counter by writing 1 to X1CNT.CLR",
          "Wait for X1 counter to reach 1023 (0x3FF)",
          "Check MCLKSTS bit in MCDCR register",
          "Follow crystal/resonator startup procedure"
        ],
        "External oscillator failure": [
          "Clear X1 counter by writing 1 to X1CNT.CLR",
          "Wait for X1 counter to reach 1023 (0x3FF)",
          "Check MCLKSTS bit in MCDCR register"
        ],
        "Device failure": [
          "Reset the device"
        ],
        "Incorrect watchdog key sequence": [
          "Write proper sequence (0x55 + 0xAA) to WDKEY register",
          "Service watchdog when WDCNTR >= WDWCR",
          "Set WDWCR register for minimum window check"
        ],
        "Writing incorrect value to WDCR[WDCHK] bits": [
          "Clear WDRSn flag after reading",
          "Reset the device"
        ],
        "Improper value written to WDKEY": [
          "Write proper sequence (0x55 + 0xAA) to WDKEY register"
        ]
      }
    }
  },
  {
    "title": "3.9.3 Watchdog Reset or Watchdog Interrupt Mode",
    "entities": {
      "error_conditions": [
        "Watchdog reset",
        "Watchdog interrupt",
        "Fetch protection violation",
        "Write protection violation",
        "Read protection violation",
        "CLA fetch protection violation",
        "Non-master access violation",
        "Access violation",
        "ITRAP",
        "MSTOP"
      ],
      "status_indicators": [
        "WDRST signal",
        "WDINT signal",
        "WDINTS bit",
        "LPMCR.LPM = 0x0",
        "LPMCR.LPM = 0x2",
        "SYSPLL.LOCKS = 1",
        "PLLCTL1.PLLCLKEN = 1",
        "CLKSRCCTL1.WDHALTI = 1",
        "CLKSRCCTL1.WDHALTI = 0",
        "XTALCR.OSCOFF bit",
        "MSEL_LSx bit field",
        "CLAPGM_LSx bit field",
        "FETCHPROTx bit",
        "CPUWRPROTx bit"
      ],
      "components": [
        "Watchdog",
        "SCSR register",
        "PIE",
        "CPU",
        "DMA controller",
        "CLA",
        "INTOSC1",
        "INTOSC2",
        "XTAL",
        "PLL",
        "SYSPLL",
        "Flash module",
        "Memory Controller Module",
        "M0 RAM",
        "M1 RAM",
        "LSx RAM",
        "GSx RAM",
        "MSGRAM",
        "GPIO",
        "WDCLK",
        "XRS pin"
      ],
      "root_causes": [
        "Watchdog counter reaches maximum value",
        "Invalid pointer dereference",
        "Changing watchdog configuration while WDINT is active",
        "Debug reset issued while WDINT is active",
        "Flash program or erase operation ongoing",
        "Wake event already asserted",
        "System PLL not locked or not connected to system clock",
        "Access to protected memory",
        "Unauthorized master access"
      ],
      "solutions": [
        "Reset the device",
        "Check WDINTS bit in SCSR register",
        "Enable WAKEINT interrupt in PIE",
        "Set LPMCR.LPM to appropriate value",
        "Execute IDLE instruction",
        "Drive GPIO low for minimum 5us",
        "Wait 16 \u03bcs plus 1024 OSCLK cycles",
        "Switch SYSCLK source from PLLCLK to OSCCLKLK",
        "Disable peripheral clocks through PCLKCRx registers",
        "Configure GPIOLPMSEL0 and GPIOLPMSEL1",
        "Power off XTAL prior to entering HALT",
        "Execute function from RAM when powering down Flash",
        "Optimize PSLEEP and RWAIT values",
        "Configure Flash fallback mode to active state",
        "Check memory allocation",
        "Inspect register values",
        "Configure access protection registers",
        "Lock configuration using GSxCOMMIT register"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "WDRST signal": [
          "Watchdog reset"
        ],
        "WDINT signal": [
          "Watchdog interrupt"
        ],
        "WDINTS bit": [
          "Watchdog interrupt"
        ],
        "FETCHPROTx bit": [
          "Fetch protection violation"
        ],
        "CPUWRPROTx bit": [
          "Write protection violation"
        ]
      },
      "error_to_cause": {
        "Watchdog reset": [
          "Watchdog counter reaches maximum value"
        ],
        "Watchdog interrupt": [
          "Watchdog counter reaches maximum value"
        ],
        "Fetch protection violation": [
          "Access to protected memory"
        ],
        "Write protection violation": [
          "Access to protected memory"
        ],
        "Read protection violation": [
          "Access to protected memory"
        ],
        "CLA fetch protection violation": [
          "Unauthorized master access"
        ],
        "Non-master access violation": [
          "Unauthorized master access"
        ],
        "Access violation": [
          "Access to protected memory",
          "Unauthorized master access"
        ],
        "ITRAP": [
          "Fetch protection violation"
        ],
        "MSTOP": [
          "CLA fetch protection violation"
        ]
      },
      "cause_to_solution": {
        "Watchdog counter reaches maximum value": [
          "Reset the device",
          "Check WDINTS bit in SCSR register"
        ],
        "Changing watchdog configuration while WDINT is active": [
          "Check WDINTS bit in SCSR register"
        ],
        "Debug reset issued while WDINT is active": [
          "Check WDINTS bit in SCSR register"
        ],
        "Flash program or erase operation ongoing": [
          "Execute function from RAM when powering down Flash"
        ],
        "Wake event already asserted": [
          "Drive GPIO low for minimum 5us",
          "Wait 16 \u03bcs plus 1024 OSCLK cycles"
        ],
        "System PLL not locked or not connected to system clock": [
          "Switch SYSCLK source from PLLCLK to OSCCLKLK",
          "Optimize PSLEEP and RWAIT values"
        ],
        "Access to protected memory": [
          "Configure access protection registers",
          "Check memory allocation",
          "Inspect register values"
        ],
        "Unauthorized master access": [
          "Configure access protection registers",
          "Lock configuration using GSxCOMMIT register"
        ],
        "Invalid pointer dereference": [
          "Check memory allocation",
          "Inspect register values"
        ]
      }
    }
  },
  {
    "title": "3.11.1.7 Memory Error Detection, Correction and Error Handling",
    "entities": {
      "error_conditions": [
        "CLA write protection violation",
        "CLA read protection violation",
        "DMA write protection violation",
        "non-master access violation",
        "non-master write protection violation",
        "master DMA write protection violation",
        "memory error",
        "single error",
        "double error"
      ],
      "status_indicators": [
        "access violation flag register",
        "DMAWRPROTx bit",
        "DMA access violation flag register",
        "interrupt enable register"
      ],
      "components": [
        "CLA",
        "CPU",
        "DMA",
        "local shared RAM",
        "LSx RAM",
        "GSx memory",
        "M0 memory",
        "M1 memory",
        "memory controller module",
        "dedicated RAMs",
        "shared RAMs"
      ],
      "root_causes": [
        "data write access from CLA to dedicated CPU RAM",
        "data write access from CLA to CLA program RAM",
        "data read access from CLA to dedicated CPU RAM",
        "data read access from CLA to CLA program RAM",
        "write access by DMA to protected memory",
        "write access to GSx memory by non-master DMA",
        "write access to dedicated or shared memory by master DMA with DMAWRPROTx set to 1"
      ],
      "solutions": [
        "write gets ignored",
        "flag gets set in access violation flag register",
        "memory address gets latched in CLA write access violation address register",
        "memory address gets latched in CLA read access violation address register",
        "memory address gets latched in DMA fetch access violation address register",
        "access violation interrupt is generated to CPU if enabled",
        "access violation interrupt is generated to master CPU if enabled",
        "use ECC protection for dedicated RAMs",
        "use parity protection for shared RAMs"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "access violation flag register": [
          "CLA write protection violation",
          "CLA read protection violation"
        ],
        "DMAWRPROTx bit": [
          "DMA write protection violation"
        ],
        "DMA access violation flag register": [
          "DMA write protection violation",
          "non-master write protection violation",
          "master DMA write protection violation"
        ],
        "interrupt enable register": [
          "CLA write protection violation",
          "CLA read protection violation"
        ]
      },
      "error_to_cause": {
        "CLA write protection violation": [
          "data write access from CLA to dedicated CPU RAM",
          "data write access from CLA to CLA program RAM"
        ],
        "CLA read protection violation": [
          "data read access from CLA to dedicated CPU RAM",
          "data read access from CLA to CLA program RAM"
        ],
        "DMA write protection violation": [
          "write access by DMA to protected memory"
        ],
        "non-master write protection violation": [
          "write access to GSx memory by non-master DMA"
        ],
        "master DMA write protection violation": [
          "write access to dedicated or shared memory by master DMA with DMAWRPROTx set to 1"
        ],
        "non-master access violation": [
          "data write access from CLA to dedicated CPU RAM",
          "data write access from CLA to CLA program RAM",
          "data read access from CLA to dedicated CPU RAM",
          "data read access from CLA to CLA program RAM"
        ]
      },
      "cause_to_solution": {
        "data write access from CLA to dedicated CPU RAM": [
          "write gets ignored",
          "flag gets set in access violation flag register",
          "memory address gets latched in CLA write access violation address register",
          "access violation interrupt is generated to CPU if enabled"
        ],
        "data write access from CLA to CLA program RAM": [
          "write gets ignored",
          "flag gets set in access violation flag register",
          "memory address gets latched in CLA write access violation address register",
          "access violation interrupt is generated to CPU if enabled"
        ],
        "data read access from CLA to dedicated CPU RAM": [
          "flag gets set in access violation flag register",
          "memory address gets latched in CLA read access violation address register",
          "access violation interrupt is generated to master CPU if enabled"
        ],
        "data read access from CLA to CLA program RAM": [
          "flag gets set in access violation flag register",
          "memory address gets latched in CLA read access violation address register",
          "access violation interrupt is generated to master CPU if enabled"
        ],
        "write access by DMA to protected memory": [
          "memory address gets latched in DMA fetch access violation address register"
        ],
        "write access to GSx memory by non-master DMA": [
          "memory address gets latched in DMA fetch access violation address register"
        ],
        "write access to dedicated or shared memory by master DMA with DMAWRPROTx set to 1": [
          "memory address gets latched in DMA fetch access violation address register"
        ]
      }
    }
  },
  {
    "title": "3.11.1.7.2 Error Handling",
    "entities": {
      "error_conditions": [
        "Parity errors",
        "Single-bit ECC errors",
        "Double-bit ECC errors",
        "Address ECC errors",
        "Correctable errors",
        "Uncorrectable errors",
        "Single-bit error for Parity RAMs",
        "Double bit Error for ECC RAMs",
        "Address error",
        "ITRAP"
      ],
      "status_indicators": [
        "correctable error count register",
        "correctable error threshold register",
        "correctable interrupt enable register",
        "flag gets set in a status register",
        "CPU/CPU.DMA/CPU.CLA1 CPU/DMA/CLA Read Error Address Register",
        "CPU/CPU.DMA CPU/DMA Read Error Address Register",
        "CPU/CPU.DMA/CPU.CLA1 CPU/DMA/CLA Read Address Error Register",
        "single error counter"
      ],
      "components": [
        "memory controller module",
        "CPU",
        "DMA",
        "CLA1",
        "Parity RAMs",
        "ECC RAMs",
        "CPU pipeline"
      ],
      "root_causes": [
        "Single-bit error at memory address",
        "Double-bit error due to another single-bit error at the same memory address",
        "Data read from memory error",
        "Address error during memory access",
        "Garbage instructions entering CPU pipeline"
      ],
      "solutions": [
        "Error gets corrected by the memory controller module",
        "Correct data is written back into the memory",
        "Configure the correctable error threshold register based on system requirements",
        "Handle error situations appropriately in software using status and interrupt indications",
        "Use interrupt when error counter reaches user programmable threshold",
        "Correctable and uncorrectable errors are masked during debug accesses"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "correctable error count register": [
          "Single-bit ECC errors",
          "Correctable errors"
        ],
        "correctable error threshold register": [
          "Single-bit ECC errors",
          "Correctable errors"
        ],
        "correctable interrupt enable register": [
          "Single-bit ECC errors",
          "Correctable errors"
        ],
        "flag gets set in a status register": [
          "Uncorrectable errors",
          "Correctable errors"
        ],
        "CPU/CPU.DMA/CPU.CLA1 CPU/DMA/CLA Read Error Address Register": [
          "Uncorrectable errors",
          "Single-bit error for Parity RAMs",
          "Double bit Error for ECC RAMs"
        ],
        "CPU/CPU.DMA CPU/DMA Read Error Address Register": [
          "Single-bit ECC errors"
        ],
        "CPU/CPU.DMA/CPU.CLA1 CPU/DMA/CLA Read Address Error Register": [
          "Address error"
        ],
        "single error counter": [
          "Single-bit ECC errors"
        ]
      },
      "error_to_cause": {
        "Parity errors": [
          "Data read from memory error"
        ],
        "Single-bit ECC errors": [
          "Single-bit error at memory address",
          "Data read from memory error"
        ],
        "Double-bit ECC errors": [
          "Double-bit error due to another single-bit error at the same memory address",
          "Data read from memory error"
        ],
        "Address ECC errors": [
          "Address error during memory access"
        ],
        "Correctable errors": [
          "Single-bit error at memory address"
        ],
        "Uncorrectable errors": [
          "Double-bit error due to another single-bit error at the same memory address",
          "Data read from memory error",
          "Address error during memory access"
        ],
        "Single-bit error for Parity RAMs": [
          "Data read from memory error"
        ],
        "Double bit Error for ECC RAMs": [
          "Data read from memory error"
        ],
        "Address error": [
          "Address error during memory access"
        ],
        "ITRAP": [
          "Garbage instructions entering CPU pipeline"
        ]
      },
      "cause_to_solution": {
        "Single-bit error at memory address": [
          "Error gets corrected by the memory controller module",
          "Correct data is written back into the memory"
        ],
        "Double-bit error due to another single-bit error at the same memory address": [
          "Correct data is written back into the memory",
          "Handle error situations appropriately in software using status and interrupt indications"
        ],
        "Data read from memory error": [
          "Error gets corrected by the memory controller module",
          "Handle error situations appropriately in software using status and interrupt indications",
          "Use interrupt when error counter reaches user programmable threshold"
        ],
        "Address error during memory access": [
          "Handle error situations appropriately in software using status and interrupt indications"
        ],
        "Garbage instructions entering CPU pipeline": [
          "Correctable and uncorrectable errors are masked during debug accesses"
        ]
      }
    }
  },
  {
    "title": "3.11.1.8 Application Test Hooks for Error Detection and Correction",
    "entities": {
      "error_conditions": [
        "ECC error",
        "Parity error",
        "Single error",
        "Double error",
        "Memory read/write does not happen correctly",
        "Initialization does not happen correctly"
      ],
      "status_indicators": [
        "INIT bit",
        "INITDONE bit",
        "RAMINITDONE bit",
        "ECC Code for lower 16 bits of data",
        "ECC Code for upper 16 bits of data",
        "ECC Code for address",
        "Parity for lower 16 bits of data",
        "Parity for upper 16 bits of data",
        "Parity for address"
      ],
      "components": [
        "ECC/Parity bits",
        "RAM",
        "Flash memory",
        "OTP memory",
        "Flash banks",
        "FMC",
        "Flash pump",
        "FSM",
        "DCSM",
        "CPU core",
        "RAMTEST mode",
        "Flash prefetch/cache",
        "Code-prefetch mechanism",
        "Data cache"
      ],
      "root_causes": [
        "Read from uninitialized RAM locations",
        "Fetch from uninitialized RAM locations",
        "Memory accessed before RAMINITDONE is set",
        "Invalid ECC/Parity bits",
        "Corrupted data bits"
      ],
      "solutions": [
        "Set INIT bit to 1 for specific RAM block",
        "Poll INITDONE bit for RAM block to be set",
        "Initialize RAM block with 0x0 data and respective ECC/Parity bits",
        "Use 32-bit access only in test mode",
        "Choose different test mode to access ECC/Parity bits",
        "Wait for RAMINITDONE to be set before accessing memory",
        "Use RAM_INIT feature for each memory block",
        "Inject ECC/Parity error for testing",
        "Configure wait states and operating mode of Flash"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "INIT bit": [
          "Memory read/write does not happen correctly",
          "Initialization does not happen correctly"
        ],
        "INITDONE bit": [
          "Memory read/write does not happen correctly",
          "Initialization does not happen correctly"
        ],
        "RAMINITDONE bit": [
          "Memory read/write does not happen correctly",
          "Initialization does not happen correctly"
        ],
        "ECC Code for lower 16 bits of data": [
          "ECC error",
          "Single error",
          "Double error"
        ],
        "ECC Code for upper 16 bits of data": [
          "ECC error",
          "Single error",
          "Double error"
        ],
        "ECC Code for address": [
          "ECC error",
          "Single error",
          "Double error"
        ],
        "Parity for lower 16 bits of data": [
          "Parity error"
        ],
        "Parity for upper 16 bits of data": [
          "Parity error"
        ],
        "Parity for address": [
          "Parity error"
        ]
      },
      "error_to_cause": {
        "ECC error": [
          "Read from uninitialized RAM locations",
          "Fetch from uninitialized RAM locations",
          "Invalid ECC/Parity bits",
          "Corrupted data bits"
        ],
        "Parity error": [
          "Read from uninitialized RAM locations",
          "Fetch from uninitialized RAM locations",
          "Invalid ECC/Parity bits",
          "Corrupted data bits"
        ],
        "Single error": [
          "Invalid ECC/Parity bits",
          "Corrupted data bits"
        ],
        "Double error": [
          "Invalid ECC/Parity bits",
          "Corrupted data bits"
        ],
        "Memory read/write does not happen correctly": [
          "Memory accessed before RAMINITDONE is set"
        ],
        "Initialization does not happen correctly": [
          "Memory accessed before RAMINITDONE is set"
        ]
      },
      "cause_to_solution": {
        "Read from uninitialized RAM locations": [
          "Set INIT bit to 1 for specific RAM block",
          "Initialize RAM block with 0x0 data and respective ECC/Parity bits",
          "Use RAM_INIT feature for each memory block"
        ],
        "Fetch from uninitialized RAM locations": [
          "Set INIT bit to 1 for specific RAM block",
          "Initialize RAM block with 0x0 data and respective ECC/Parity bits",
          "Use RAM_INIT feature for each memory block"
        ],
        "Memory accessed before RAMINITDONE is set": [
          "Wait for RAMINITDONE to be set before accessing memory",
          "Poll INITDONE bit for RAM block to be set"
        ],
        "Invalid ECC/Parity bits": [
          "Use 32-bit access only in test mode",
          "Choose different test mode to access ECC/Parity bits",
          "Inject ECC/Parity error for testing"
        ],
        "Corrupted data bits": [
          "Use 32-bit access only in test mode",
          "Choose different test mode to access ECC/Parity bits",
          "Inject ECC/Parity error for testing"
        ]
      }
    }
  },
  {
    "title": "3.12.3 Default Flash Configuration",
    "entities": {
      "error_conditions": [
        "ECC error",
        "Invalid pointer dereference",
        "PC discontinuity"
      ],
      "status_indicators": [
        "BNKPWR bit field in the FBFALLBAC register",
        "PMPPWR bit field in the FPAC1 register",
        "BAGP field in the FBAC register",
        "PAGP bit field in the FPAC2 register",
        "PREFETCH_EN bit in the FRD_INTF_CTRL register",
        "DATA_CACHE_EN bit in the FRD_INTF_CTRL register",
        "RWAIT bit-field in the FRDCNTL register",
        "PSLEEP bit field in the FPAC1 register"
      ],
      "components": [
        "Flash banks",
        "Flash module",
        "Shared pump",
        "ECC",
        "FMC",
        "Code-prefetch mechanism",
        "Data cache",
        "Bank0",
        "Bank1",
        "OTP",
        "USER OTP",
        "TI-OTP",
        "Flash Module Controller",
        "CPU",
        "Flash state machine",
        "FSM",
        "Charge pump",
        "Prefetch buffer",
        "Flash wrapper",
        "Dual Code Security Module",
        "DCSM"
      ],
      "root_causes": [
        "Flash banks are in sleep power mode at power-up",
        "Wait-states are set to maximum at power-up",
        "Prefetch mechanism tries to fetch from outside the bank",
        "PC discontinuity caused by executing branch, BANZ, call, or loop instructions",
        "Security zone is in locked state"
      ],
      "solutions": [
        "Initialize wait-states using the FRDCNTL register",
        "Configure cache/prefetch features using the FRD_INTF_CTRL register",
        "Execute Flash configuration software only from RAM memory",
        "Turn off pre-fetch and data caching before initializing wait-states",
        "Use Flash API library for program, erase, and verify operations",
        "Execute Flash API from RAM in single-bank devices",
        "Execute Flash API from one bank to perform operations on another bank in dual-bank devices",
        "Follow typical flow: Erase \u2192 Program \u2192 Verify",
        "Use Fapi_issueAsyncCommandWithAddress() for erase operations",
        "Use Fapi_doBlankCheck() to determine if Flash bank is blank",
        "Configure RWAIT using formula: RWAIT = ceiling[(SYSCLK/FCLK) - 1]"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "BNKPWR bit field in the FBFALLBAC register": [
          "ECC error"
        ],
        "PMPPWR bit field in the FPAC1 register": [
          "ECC error"
        ],
        "PREFETCH_EN bit in the FRD_INTF_CTRL register": [
          "ECC error"
        ],
        "DATA_CACHE_EN bit in the FRD_INTF_CTRL register": [
          "Invalid pointer dereference"
        ],
        "RWAIT bit-field in the FRDCNTL register": [
          "PC discontinuity"
        ]
      },
      "error_to_cause": {
        "ECC error": [
          "Prefetch mechanism tries to fetch from outside the bank",
          "Flash banks are in sleep power mode at power-up"
        ],
        "Invalid pointer dereference": [
          "Security zone is in locked state"
        ],
        "PC discontinuity": [
          "PC discontinuity caused by executing branch, BANZ, call, or loop instructions",
          "Wait-states are set to maximum at power-up"
        ]
      },
      "cause_to_solution": {
        "Flash banks are in sleep power mode at power-up": [
          "Initialize wait-states using the FRDCNTL register",
          "Configure cache/prefetch features using the FRD_INTF_CTRL register"
        ],
        "Wait-states are set to maximum at power-up": [
          "Configure RWAIT using formula: RWAIT = ceiling[(SYSCLK/FCLK) - 1]",
          "Initialize wait-states using the FRDCNTL register"
        ],
        "Prefetch mechanism tries to fetch from outside the bank": [
          "Turn off pre-fetch and data caching before initializing wait-states",
          "Execute Flash API from one bank to perform operations on another bank in dual-bank devices"
        ],
        "PC discontinuity caused by executing branch, BANZ, call, or loop instructions": [
          "Execute Flash configuration software only from RAM memory",
          "Use Flash API library for program, erase, and verify operations"
        ],
        "Security zone is in locked state": [
          "Use Fapi_issueAsyncCommandWithAddress() for erase operations",
          "Follow typical flow: Erase \u2192 Program \u2192 Verify"
        ]
      }
    }
  },
  {
    "title": "3.12.10 Error Correction Code (ECC) Protection",
    "entities": {
      "error_conditions": [
        "Single-bit data error",
        "Double-bit data error",
        "Address error",
        "Uncorrectable error",
        "Memory faults"
      ],
      "status_indicators": [
        "ECC_ENABLE register",
        "Single-bit Error position",
        "8-bit output decoded",
        "ECC check bits"
      ],
      "components": [
        "FSM",
        "Flash API",
        "USER OTP",
        "Flash",
        "ECC",
        "FMC",
        "SECDED module",
        "CPU",
        "Flash banks",
        "ECC memory space",
        "Flash Plugin",
        "Code Composer Studio IDE",
        "DCSM OTP",
        "DCSM Zx-LINKPOINTER1",
        "DCSM Zx-LINKPOINTER2",
        "DCSM Zx-LINKPOINTER3",
        "DCSM Zx-PSWDLOCK"
      ],
      "root_causes": [
        "Single-bit data error in address field",
        "Double-bit data error",
        "Address error",
        "Memory faults"
      ],
      "solutions": [
        "Use Fapi_issueProgrammingCommand()",
        "Use Fapi_doVerify() to verify programmed contents",
        "Perform CRC check during power-up and runtime",
        "Use AutoEccGeneration option in Plugin/API",
        "Use F021 Flash API to calculate and program ECC data",
        "Use linker-supported ECC generation option",
        "Program ECC check bits along with Flash",
        "Align main array Flash programming to 64-bit address boundaries",
        "Align DCSM OTP programming to 128-bit address boundaries",
        "Enable ECC logic for error detection and correction"
      ]
    },
    "relationships": {}
  },
  {
    "title": "3.15.19 MEMORY_ERROR_REGS Registers",
    "source_text": "3.15.19 MEMORY_ERROR_REGS Registers\nTable 3-318 lists the memory-mapped registers for the MEMORY_ERROR_REGS registers. All register offset \naddresses not listed in Table 3-318 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-318. MEMORY_ERROR_REGS Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nUCERRFLG\nUncorrectable Error Flag Register\nGo\n2h\nUCERRSET\nUncorrectable Error Flag Set Register\nEALLOW\nGo\n4h\nUCERRCLR\nUncorrectable Error Flag Clear Register\nEALLOW\nGo\n6h\nUCCPUREADDR\nUncorrectable CPU Read Error Address\nGo\n8h\nUCDMAREADDR\nUncorrectable DMA Read Error Address\nGo\nAh\nUCCLA1READDR\nUncorrectable CLA1 Read Error Address\nGo\n20h\nCERRFLG\nCorrectable Error Flag Register\nGo\n22h\nCERRSET\nCorrectable Error Flag Set Register\nEALLOW\nGo\n24h\nCERRCLR\nCorrectable Error Flag Clear Register\nEALLOW\nGo\n26h\nCCPUREADDR\nCorrectable CPU Read Error Address\nGo\n2Eh\nCERRCNT\nCorrectable Error Count Register\nGo\n30h\nCERRTHRES\nCorrectable Error Threshold Value Register\nEALLOW\nGo\n32h\nCEINTFLG\nCorrectable Error Interrupt Flag Status Register\nGo\n34h\nCEINTCLR\nCorrectable Error Interrupt Flag Clear Register\nEALLOW\nGo\n36h\nCEINTSET\nCorrectable Error Interrupt Flag Set Register\nEALLOW\nGo\n38h\nCEINTEN\nCorrectable Error Interrupt Enable Register\nEALLOW\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-319 shows the codes that are used for \naccess types in this section.\nTable 3-319. MEMORY_ERROR_REGS Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nR-0\nR\n-0\nRead\nReturns 0s\nWrite Type\nW\nW\nWrite\nW1S\nW\n1S\nWrite\n1 to set\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nSystem Control and Interrupts\nwww.ti.com\n526\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.1 UCERRFLG Register (Offset = 0h) [Reset = 00000000h] \nUCERRFLG is shown in Figure 3-286 and described in Table 3-320.\nReturn to the Summary Table.\nUncorrectable Error Flag Register\nFigure 3-286. UCERRFLG Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nTable 3-320. UCERRFLG Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR\n0h\nReserved\n2\nCLA1RDERR\nR\n0h\nCLA1 Uncorrectable Read Error Flag\n0: No Error.\n1: Uncorrectable error occurred during CLA1 read.\nReset type: SYSRSn\n1\nDMARDERR\nR\n0h\nDMA Uncorrectable Read Error Flag\n0: No Error.\n1: Uncorrectable error occurred during DMA read.\nReset type: SYSRSn\n0\nCPURDERR\nR\n0h\nCPU Uncorrectable Read Error Flag\n0: No Error.\n1: Uncorrectable error occurred during CPU read.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n527\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.2 UCERRSET Register (Offset = 2h) [Reset = 00000000h] \nUCERRSET is shown in Figure 3-287 and described in Table 3-321.\nReturn to the Summary Table.\nUncorrectable Error Flag Set Register\nFigure 3-287. UCERRSET Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-321. UCERRSET Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR-0/W1S\n0h\nReserved\n2\nCLA1RDERR\nR-0/W1S\n0h\n0: No action.\n1: CLA1 Read Error Flag in UCERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\n1\nDMARDERR\nR-0/W1S\n0h\n0: No action.\n1: DMA Read Error Flag in UCERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\n0\nCPURDERR\nR-0/W1S\n0h\n0: No action.\n1: CPU Read Error Flag in UCERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n528\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.3 UCERRCLR Register (Offset = 4h) [Reset = 00000000h] \nUCERRCLR is shown in Figure 3-288 and described in Table 3-322.\nReturn to the Summary Table.\nUncorrectable Error Flag Clear Register\nFigure 3-288. UCERRCLR Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-322. UCERRCLR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR-0/W1S\n0h\nReserved\n2\nCLA1RDERR\nR-0/W1S\n0h\n0: No action.\n1: CLA1 Read Error Flag in UCERRFLG register will be cleared.\nReset type: SYSRSn\n1\nDMARDERR\nR-0/W1S\n0h\n0: No action.\n1: DMA Read Error Flag in UCERRFLG register will be cleared .\nReset type: SYSRSn\n0\nCPURDERR\nR-0/W1S\n0h\n0: No action.\n1: CPU Read Error Flag in UCERRFLG register will be cleared.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n529\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.4 UCCPUREADDR Register (Offset = 6h) [Reset = 00000000h] \nUCCPUREADDR is shown in Figure 3-289 and described in Table 3-323.\nReturn to the Summary Table.\nUncorrectable CPU Read Error Address\nFigure 3-289. UCCPUREADDR Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUCCPUREADDR\nR-0h\nTable 3-323. UCCPUREADDR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUCCPUREADDR\nR\n0h\nThis register captures the address location for which CPU read/fetch \naccess resulted in uncorrectable ECC/Parity error.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n530\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.5 UCDMAREADDR Register (Offset = 8h) [Reset = 00000000h] \nUCDMAREADDR is shown in Figure 3-290 and described in Table 3-324.\nReturn to the Summary Table.\nUncorrectable DMA Read Error Address\nFigure 3-290. UCDMAREADDR Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUCDMAREADDR\nR-0h\nTable 3-324. UCDMAREADDR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUCDMAREADDR\nR\n0h\nThis register captures the address location for which DMA read \naccess resulted in uncorrectable Parity error.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n531\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.6 UCCLA1READDR Register (Offset = Ah) [Reset = 00000000h] \nUCCLA1READDR is shown in Figure 3-291 and described in Table 3-325.\nReturn to the Summary Table.\nUncorrectable CLA1 Read Error Address\nFigure 3-291. UCCLA1READDR Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUCCLA1READDR\nR-0h\nTable 3-325. UCCLA1READDR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUCCLA1READDR\nR\n0h\nThis register captures the address location for which CLA1 read/\nfetch access resulted in uncorrectable Parity error.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n532\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.7 CERRFLG Register (Offset = 20h) [Reset = 00000000h] \nCERRFLG is shown in Figure 3-292 and described in Table 3-326.\nReturn to the Summary Table.\nCorrectable Error Flag Register\nFigure 3-292. CERRFLG Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nTable 3-326. CERRFLG Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR\n0h\nReserved\n2\nCLA1RDERR\nR\n0h\nCLA1 Correctable Read Error Flag\n0: No Error.\n1: Correctable error occurred during CLA1 read.\nReset type: SYSRSn\n1\nDMARDERR\nR\n0h\nDMA Correctable Read Error Flag\n0: No Error.\n1: Correctable error occurred during DMA read.\nReset type: SYSRSn\n0\nCPURDERR\nR\n0h\nCPU Correctable Read Error Flag\n0: No Error.\n1: Correctable error occurred during CPU read.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n533\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.8 CERRSET Register (Offset = 22h) [Reset = 00000000h] \nCERRSET is shown in Figure 3-293 and described in Table 3-327.\nReturn to the Summary Table.\nCorrectable Error Flag Set Register\nFigure 3-293. CERRSET Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-327. CERRSET Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR-0/W1S\n0h\nReserved\n2\nCLA1RDERR\nR-0/W1S\n0h\n0: No action.\n1: CLA1 Read Error Flag in CERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\n1\nDMARDERR\nR-0/W1S\n0h\n0: No action.\n1: DMA Read Error Flag in CERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\n0\nCPURDERR\nR-0/W1S\n0h\n0: No action.\n1: CPU Read Error Flag in CERRFLG register will be set and \ninterrupt will be generated if enabled..\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n534\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.9 CERRCLR Register (Offset = 24h) [Reset = 00000000h] \nCERRCLR is shown in Figure 3-294 and described in Table 3-328.\nReturn to the Summary Table.\nCorrectable Error Flag Clear Register\nFigure 3-294. CERRCLR Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nCLA1RDERR\nDMARDERR\nCPURDERR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-328. CERRCLR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3\nRESERVED\nR-0/W1S\n0h\nReserved\n2\nCLA1RDERR\nR-0/W1S\n0h\n0: No action.\n1: CLA1 Read Error Flag in CERRFLG register will be cleared.\nReset type: SYSRSn\n1\nDMARDERR\nR-0/W1S\n0h\n0: No action.\n1: DMA Read Error Flag in CERRFLG register will be cleared .\nReset type: SYSRSn\n0\nCPURDERR\nR-0/W1S\n0h\n0: No action.\n1: CPU Read Error Flag in CERRFLG register will be cleared.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n535\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.10 CCPUREADDR Register (Offset = 26h) [Reset = 00000000h] \nCCPUREADDR is shown in Figure 3-295 and described in Table 3-329.\nReturn to the Summary Table.\nCorrectable CPU Read Error Address\nFigure 3-295. CCPUREADDR Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nCCPUREADDR\nR-0h\nTable 3-329. CCPUREADDR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nCCPUREADDR\nR\n0h\nThis register captures the address location for which CPU read/fetch \naccess resulted in correctable ECC error.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n536\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.11 CERRCNT Register (Offset = 2Eh) [Reset = 00000000h] \nCERRCNT is shown in Figure 3-296 and described in Table 3-330.\nReturn to the Summary Table.\nCorrectable Error Count Register\nFigure 3-296. CERRCNT Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nCERRCNT\nR-0h\nTable 3-330. CERRCNT Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nCERRCNT\nR\n0h\nThis register holds the count of how many times correctable error \noccurred.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n537\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.12 CERRTHRES Register (Offset = 30h) [Reset = 00000000h] \nCERRTHRES is shown in Figure 3-297 and described in Table 3-331.\nReturn to the Summary Table.\nCorrectable Error Threshold Value Register\nFigure 3-297. CERRTHRES Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nCERRTHRES\nR/W-0h\nTable 3-331. CERRTHRES Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nCERRTHRES\nR/W\n0h\nWhen value in CERRCNT register is greater than value configured in \nthis register, corretable interrupt gets generated, if enabled.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n538\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.13 CEINTFLG Register (Offset = 32h) [Reset = 00000000h] \nCEINTFLG is shown in Figure 3-298 and described in Table 3-332.\nReturn to the Summary Table.\nCorrectable Error Interrupt Flag Status Register\nFigure 3-298. CEINTFLG Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nCEINTFLAG\nR-0h\nR-0h\nTable 3-332. CEINTFLG Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-1\nRESERVED\nR\n0h\nReserved\n0\nCEINTFLAG\nR\n0h\nTotal corrected error count exceeded threshold Flag\n0: Total correctable errors < Threshold value configured in \nCERRTHRES register.\n1: Total correctable errors >= Threshold value configured in \nCERRTHRES register.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n539\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.14 CEINTCLR Register (Offset = 34h) [Reset = 00000000h] \nCEINTCLR is shown in Figure 3-299 and described in Table 3-333.\nReturn to the Summary Table.\nCorrectable Error Interrupt Flag Clear Register\nFigure 3-299. CEINTCLR Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nCEINTCLR\nR-0h\nR-0/W1S-0h\nTable 3-333. CEINTCLR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-1\nRESERVED\nR\n0h\nReserved\n0\nCEINTCLR\nR-0/W1S\n0h\n0: No action.\n1: Total corrected error count exceeded flag in CEINTFLG register \nwill be cleared.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n540\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.15 CEINTSET Register (Offset = 36h) [Reset = 00000000h] \nCEINTSET is shown in Figure 3-300 and described in Table 3-334.\nReturn to the Summary Table.\nCorrectable Error Interrupt Flag Set Register\nFigure 3-300. CEINTSET Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nCEINTSET\nR-0h\nR-0/W1S-0h\nTable 3-334. CEINTSET Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-1\nRESERVED\nR\n0h\nReserved\n0\nCEINTSET\nR-0/W1S\n0h\n0: No action.\n1: Total corrected error count exceeded flag in CEINTFLG register \nwill be set and interrupt will be generated if enabled.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n541\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.19.16 CEINTEN Register (Offset = 38h) [Reset = 00000000h] \nCEINTEN is shown in Figure 3-301 and described in Table 3-335.\nReturn to the Summary Table.\nCorrectable Error Interrupt Enable Register\nFigure 3-301. CEINTEN Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nCEINTEN\nR-0h\nR/W-0h\nTable 3-335. CEINTEN Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-1\nRESERVED\nR\n0h\nReserved\n0\nCEINTEN\nR/W\n0h\n0: Correctable Error Interrupt is disabled.\n1: Correctable Error Interrupt is enabled.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n542\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20 FLASH_CTRL_REGS Registers\nTable 3-336 lists the memory-mapped registers for the FLASH_CTRL_REGS registers. All register offset \naddresses not listed in Table 3-336 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-336. FLASH_CTRL_REGS Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nFRDCNTL\nFlash Read Control Register\nEALLOW\nGo\n1Eh\nFBAC\nFlash Bank Access Control Register\nEALLOW\nGo\n20h\nFBFALLBACK\nFlash Bank Fallback Power Register\nEALLOW\nGo\n22h\nFBPRDY\nFlash Bank Pump Ready Register\nEALLOW\nGo\n24h\nFPAC1\nFlash Pump Access Control Register 1\nEALLOW\nGo\n26h\nFPAC2\nFlash Pump Access Control Register 2\nEALLOW\nGo\n2Ah\nFMSTAT\nFlash Module Status Register\nEALLOW\nGo\n180h\nFRD_INTF_CTRL\nFlash Read Interface Control Register\nEALLOW\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-337 shows the codes that are used for \naccess types in this section.\nTable 3-337. FLASH_CTRL_REGS Access Type \nCodes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nWrite Type\nW\nW\nWrite\nReset or Default Value\n-n\nValue after reset or the default \nvalue\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in \na register name, an offset, or an \naddress, they refer to the value of \na register array where the register \nis part of a group of repeating \nregisters. The register groups \nform a hierarchical structure and \nthe array is represented with a \nformula.\ny\nWhen this variable is used in a \nregister name, an offset, or an \naddress it refers to the value of \na register array.\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n543\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.1 FRDCNTL Register (Offset = 0h) [Reset = F00h]\nFRDCNTL is shown in Figure 3-302 and described in Table 3-338.\nReturn to the Summary Table.\nFlash Read Control Register\nFigure 3-302. FRDCNTL Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRWAIT\nRESERVED\nR-0h\nR/W-Fh\nR-0h\nTable 3-338. FRDCNTL Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-12\nRESERVED\nR\n0h\nReserved\n11-8\nRWAIT\nR/W\nFh\nRandom read waitstate\nThese bits indicate how many waitstates are added to a flash read/\nfetch access. The RWAIT value can be set anywhere from 0 to 0xF. \nFor a flash access, data is returned in RWAIT+1 SYSCLK cycles.\nNote: The required wait states for each SYSCLK frequency can be \nfound in the device data manual.\nReset type: SYSRSn\n7-0\nRESERVED\nR\n0h\nReserved\nSystem Control and Interrupts\nwww.ti.com\n544\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.2 FBAC Register (Offset = 1Eh) [Reset = Fh]\nFBAC is shown in Figure 3-303 and described in Table 3-339.\nReturn to the Summary Table.\nFlash Bank Access Control Register\nFigure 3-303. FBAC Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nBAGP\nRESERVED\nR-0h\nR/W-0h\nR/W-Fh\nTable 3-339. FBAC Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-8\nBAGP\nR/W\n0h\nBank Active Grace Period. These bits contain the starting count \nvalue for the BAGP down counter. Any access to a given bank \ncauses its BAGP counter to reload the BAGP value for that bank. \nAfter the last access to this flash bank, the down counter delays \nfrom 0 to 255 prescaled SYSCLK clock cycles before putting the \nbank into one of the fallback power modes as determined by the \nFBFALLBACK register. This value must be greater than 1 when the \nfallback mode is not ACTIVE.\nNote: The prescaled clock used for the BAGP down counter is a \nclock divided by 16 from input SYSCLK.\nReset type: SYSRSn\n7-0\nRESERVED\nR/W\nFh\nReserved\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n545\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.3 FBFALLBACK Register (Offset = 20h) [Reset = 0h]\nFBFALLBACK is shown in Figure 3-304 and described in Table 3-340.\nReturn to the Summary Table.\nFlash Bank Fallback Power Register\nFigure 3-304. FBFALLBACK Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nBNKPWR1\nBNKPWR0\nR-0h\nR/W-0h\nR/W-0h\nTable 3-340. FBFALLBACK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3-2\nBNKPWR1\nR/W\n0h\nFall Back power mode\n00 Sleep (Sense amplifiers and sense reference disabled)\n01 Standby (Sense amplifiers disabled, but sense reference \nenabled)\n10 Reserved\n11 Active (Both sense amplifiers and sense reference enabled)\nReset type: SYSRSn\n1-0\nBNKPWR0\nR/W\n0h\nFall Back power mode\n00 Sleep (Sense amplifiers and sense reference disabled)\n01 Standby (Sense amplifiers disabled, but sense reference \nenabled)\n10 Reserved\n11 Active (Both sense amplifiers and sense reference enabled)\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n546\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.4 FBPRDY Register (Offset = 22h) [Reset = 0h]\nFBPRDY is shown in Figure 3-305 and described in Table 3-341.\nReturn to the Summary Table.\nFlash Bank Pump Ready Register\nFigure 3-305. FBPRDY Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nPUMPRDY\nRESERVED\nR-0h\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nBANK1RDY\nBANK0RDY\nR-0h\nR-0h\nR-0h\nTable 3-341. FBPRDY Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15\nPUMPRDY\nR\n0h\nPump Ready. This is a read-only bit which allows software to \ndetermine if the pump is ready for flash access before attempting \nthe actual access. If an access is made to a bank when the pump is \nnot ready, wait states are asserted until it becomes ready.\n0 Pump is not ready.\n1 Pump is ready, in active power state.\nReset type: SYSRSn\n14-2\nRESERVED\nR\n0h\nReserved\n1\nBANK1RDY\nR\n0h\nBank 1 Ready. This is a read-only register which allows software to \ndetermine if the Bank 1 is ready for Flash access before the access \nis attempted.\nNote: The user should wait for both the pump and the bank to be \nready before attempting an access.\n0 Bank 1 is not ready.\n1 Bank 1 is in active power mode and is ready for access.\nReset type: SYSRSn\n0\nBANK0RDY\nR\n0h\nBank 0 Ready. This is a read-only register which allows software to \ndetermine if the Bank 0 is ready for Flash access before the access \nis attempted.\nNote: The user should wait for both the pump and the bank to be \nready before attempting an access.\n0 Bank 0 is not ready.\n1 Bank 0 is in active power mode and is ready for access.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n547\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.5 FPAC1 Register (Offset = 24h) [Reset = 00A00000h]\nFPAC1 is shown in Figure 3-306 and described in Table 3-342.\nReturn to the Summary Table.\nFlash Pump Access Control Register 1\nFigure 3-306. FPAC1 Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nPSLEEP\nR-0h\nR/W-A0h\n23\n22\n21\n20\n19\n18\n17\n16\nPSLEEP\nR/W-A0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nPMPPWR\nR-0h\nR/W-0h\nTable 3-342. FPAC1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-28\nRESERVED\nR\n0h\nReserved\n27-16\nPSLEEP\nR/W\nA0h\nPump sleep. These bits contain the starting count value for the \ncharge pump sleep down counter. While the charge pump is in \nsleep mode, the power mode management logic holds the charge \npump sleep counter at this value. When the charge pump exits sleep \npower mode, the down counter delays from 0 to PSLEEP prescaled \nSYSCLK clock cycles before putting the charge pump into active \npower mode.\nNote: The pump sleep down counter uses the same prescaled clock \nas Bank sleep down counter which is divided by 2 of input SYSCLK.\nNote: BootROM configures the PSLEEP value as 0x3E8 for 100 \nMHz operation. Users can modify the PSLEEP value based on their \napplication requirements if needed.\nReset type: SYSRSn\n15-1\nRESERVED\nR\n0h\nReserved\n0\nPMPPWR\nR/W\n0h\nFlash Charge Pump Fallback Power Mode. This bit selects what \npower mode the charge pump enters after the pump active grace \nperiod (PAGP) counter has timed out.\n0 Sleep (all pump circuits disabled)\n1 Active (all pump circuits active)\nNote for devices with multiple flash banks: As the pump is shared \nbetween flash banks, if an access is made either bank, the value of \nthis bit changes to 1 (active).\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n548\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.6 FPAC2 Register (Offset = 26h) [Reset = 0h]\nFPAC2 is shown in Figure 3-307 and described in Table 3-343.\nReturn to the Summary Table.\nFlash Pump Access Control Register 2\nFigure 3-307. FPAC2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nPAGP\nR-0h\nR/W-0h\nTable 3-343. FPAC2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-0\nPAGP\nR/W\n0h\nPump Active Grace Period. This register contains the starting count \nvalue for the PAGP mode down counter. Any access to flash memory \ncauses the counter to reload with the PAGP value. After the last \naccess to flash memory, the down counter delays from 0 to 65535 \nprescaled SYSCLK clock cycles before entering one of the charge \npump fallback power modes as determined by PUMPPWR in the \nFPAC1 register.\nNote: The PAGP down counter is clocked by the same prescaled \nclock as the BAGP down counter which is divided by 16 of input \nSYSCLK.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n549\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.7 FMSTAT Register (Offset = 2Ah) [Reset = 0h]\nFMSTAT is shown in Figure 3-308 and described in Table 3-344.\nReturn to the Summary Table.\nFlash Module Status Register\nFigure 3-308. FMSTAT Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nRESERVED\nRESERVED\nR-0h\nR-0h\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nRESERVED\nRESERVED\nPGV\nRESERVED\nEV\nRESERVED\nBUSY\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nERS\nPGM\nINVDAT\nCSTAT\nVOLTSTAT\nESUSP\nPSUSP\nRESERVED\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nR-0h\nTable 3-344. FMSTAT Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-18\nRESERVED\nR\n0h\nReserved\n17\nRESERVED\nR\n0h\nReserved\n16\nRESERVED\nR\n0h\nReserved\n15\nRESERVED\nR\n0h\nReserved\n14\nRESERVED\nR\n0h\nReserved\n13\nRESERVED\nR\n0h\nReserved\n12\nPGV\nR\n0h\nProgram verify When set, indicates that a word is not successfully \nprogrammed after the maximum allowed number of program pulses \nare given for program operation.\nReset type: SYSRSn\n11\nRESERVED\nR\n0h\nReserved\n10\nEV\nR\n0h\nErase verify When set, indicates that a sector is not successfully \nerased after the maximum allowed number of erase pulses are given \nfor erase operation.\nReset type: SYSRSn\n9\nRESERVED\nR\n0h\nReserved\n8\nBUSY\nR\n0h\nWhen set, this bit indicates that a program, erase, or suspend \noperation is being processed.\nReset type: SYSRSn\n7\nERS\nR\n0h\nErase Active. When set, this bit indicates that the flash module is \nactively performing an erase operation. This bit is set when erasing \nstarts and is cleared when erasing is complete. It is also cleared \nwhen the erase is suspended and set when the erase resumes.\nReset type: SYSRSn\n6\nPGM\nR\n0h\nProgram Active. When set, this bit indicates that the flash module \nis currently performing a program operation. This bit is set when \nprogramming starts and is cleared when programming is complete. \nIt is also cleared when programming is suspended and set when \nprogramming is resumed.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n550\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-344. FMSTAT Register Field Descriptions (continued)\nBit\nField\nType\nReset\nDescription\n5\nINVDAT\nR\n0h\nInvalid Data. When set, this bit indicates that the user attempted to \nprogram a \"1\" where a \"0\" was already present.\nReset type: SYSRSn\n4\nCSTAT\nR\n0h\nCommand Status. Once the FSM starts any failure will set this bit. \nWhen set, this bit informs the host that the program, erase, or \nvalidate sector command failed and the command was stopped. This \nbit is cleared by the Clear Status command. For some errors, this will \nbe the only indication of an FSM error because the cause does not \nfall within the other error bit types.\nReset type: SYSRSn\n3\nVOLTSTAT\nR\n0h\nCore Voltage Status. When set, this bit indicates that the core \nvoltage generator of the pump power upply dipped below the lower \nlimit allowable during a program or erase operation.\nReset type: SYSRSn\n2\nESUSP\nR\n0h\nWhen set, this bit indicates that the flash module has received and \nprocessed an erase suspend operation. This bit remains set until the \nerase resume command has been issued or until the Clear_More \ncommand is run.\nReset type: SYSRSn\n1\nPSUSP\nR\n0h\nWhen set, this bit indicates that the flash module has received \nand processed a program suspend operation. This bit remains set \nuntil the program resume command has been issued or until the \nClear_More command is run.\nReset type: SYSRSn\n0\nRESERVED\nR\n0h\nReserved\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n551\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.20.8 FRD_INTF_CTRL Register (Offset = 180h) [Reset = 0h]\nFRD_INTF_CTRL is shown in Figure 3-309 and described in Table 3-345.\nReturn to the Summary Table.\nFlash Read Interface Control Register\nFigure 3-309. FRD_INTF_CTRL Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nDATA_CACHE_\nEN\nPREFETCH_E\nN\nR-0h\nR/W-0h\nR/W-0h\nTable 3-345. FRD_INTF_CTRL Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-2\nRESERVED\nR\n0h\nReserved\n1\nDATA_CACHE_EN\nR/W\n0h\nData cache enable.\n0 A value of 0 disables the data cache.\n1 A value of 1 enables the data cache.\nReset type: SYSRSn\n0\nPREFETCH_EN\nR/W\n0h\nPrefetch enable.\n0 A value of 0 disables prefetch mechanism.\n1 A value of 1 enables pre-fetch mechanism.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n552\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21 FLASH_ECC_REGS Registers\nTable 3-346 lists the memory-mapped registers for the FLASH_ECC_REGS registers. All register offset \naddresses not listed in Table 3-346 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-346. FLASH_ECC_REGS Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nECC_ENABLE\nECC Enable\nEALLOW\nGo\n2h\nSINGLE_ERR_ADDR_LOW\nSingle Error Address Low\nEALLOW\nGo\n4h\nSINGLE_ERR_ADDR_HIGH\nSingle Error Address High\nEALLOW\nGo\n6h\nUNC_ERR_ADDR_LOW\nUncorrectable Error Address Low\nEALLOW\nGo\n8h\nUNC_ERR_ADDR_HIGH\nUncorrectable Error Address High\nEALLOW\nGo\nAh\nERR_STATUS\nError Status\nEALLOW\nGo\nCh\nERR_POS\nError Position\nEALLOW\nGo\nEh\nERR_STATUS_CLR\nError Status Clear\nEALLOW\nGo\n10h\nERR_CNT\nError Control\nEALLOW\nGo\n12h\nERR_THRESHOLD\nError Threshold\nEALLOW\nGo\n14h\nERR_INTFLG\nError Interrupt Flag\nEALLOW\nGo\n16h\nERR_INTCLR\nError Interrupt Flag Clear\nEALLOW\nGo\n18h\nFDATAH_TEST\nData High Test\nEALLOW\nGo\n1Ah\nFDATAL_TEST\nData Low Test\nEALLOW\nGo\n1Ch\nFADDR_TEST\nECC Test Address\nEALLOW\nGo\n1Eh\nFECC_TEST\nECC Test Address\nEALLOW\nGo\n20h\nFECC_CTRL\nECC Control\nEALLOW\nGo\n22h\nFOUTH_TEST\nTest Data Out High\nEALLOW\nGo\n24h\nFOUTL_TEST\nTest Data Out Low\nEALLOW\nGo\n26h\nFECC_STATUS\nECC Status\nEALLOW\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-347 shows the codes that are used for \naccess types in this section.\nTable 3-347. FLASH_ECC_REGS Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nR-0\nR\n-0\nRead\nReturns 0s\nWrite Type\nW\nW\nWrite\nW1S\nW\n1S\nWrite\n1 to set\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n553\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-347. FLASH_ECC_REGS Access Type Codes (continued)\nAccess Type\nCode\nDescription\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nSystem Control and Interrupts\nwww.ti.com\n554\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.1 ECC_ENABLE Register (Offset = 0h) [Reset = 0000000Ah] \nECC_ENABLE is shown in Figure 3-310 and described in Table 3-348.\nReturn to the Summary Table.\nECC Enable\nFigure 3-310. ECC_ENABLE Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nENABLE\nR-0h\nR/W-Ah\nTable 3-348. ECC_ENABLE Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-4\nRESERVED\nR\n0h\nReserved\n3-0\nENABLE\nR/W\nAh\nECC enable. A value of 0xA would enable ECC. Any other value \nwould disable ECC.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n555\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.2 SINGLE_ERR_ADDR_LOW Register (Offset = 2h) [Reset = 00000000h] \nSINGLE_ERR_ADDR_LOW is shown in Figure 3-311 and described in Table 3-349.\nReturn to the Summary Table.\nSingle Error Address Low\nFigure 3-311. SINGLE_ERR_ADDR_LOW Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nERR_ADDR_L\nR/W-0h\nTable 3-349. SINGLE_ERR_ADDR_LOW Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nERR_ADDR_L\nR/W\n0h\n64-bit aligned address at which a single bit error occurred in the \nlower 64-bits of a 128-bit aligned memory.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n556\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.3 SINGLE_ERR_ADDR_HIGH Register (Offset = 4h) [Reset = 00000000h] \nSINGLE_ERR_ADDR_HIGH is shown in Figure 3-312 and described in Table 3-350.\nReturn to the Summary Table.\nSingle Error Address High\nFigure 3-312. SINGLE_ERR_ADDR_HIGH Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nERR_ADDR_H\nR/W-0h\nTable 3-350. SINGLE_ERR_ADDR_HIGH Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nERR_ADDR_H\nR/W\n0h\n64-bit aligned address at which a single bit error occurred in the \nupper 64-bits of a 128-bit aligned memory.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n557\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.4 UNC_ERR_ADDR_LOW Register (Offset = 6h) [Reset = 00000000h] \nUNC_ERR_ADDR_LOW is shown in Figure 3-313 and described in Table 3-351.\nReturn to the Summary Table.\nUncorrectable Error Address Low\nFigure 3-313. UNC_ERR_ADDR_LOW Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUNC_ERR_ADDR_L\nR/W-0h\nTable 3-351. UNC_ERR_ADDR_LOW Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUNC_ERR_ADDR_L\nR/W\n0h\n64-bit aligned address at which an uncorrectable error occurred in \nthe lower 64-bits of a 128-bit aligned memory.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n558\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.5 UNC_ERR_ADDR_HIGH Register (Offset = 8h) [Reset = 00000000h] \nUNC_ERR_ADDR_HIGH is shown in Figure 3-314 and described in Table 3-352.\nReturn to the Summary Table.\nUncorrectable Error Address High\nFigure 3-314. UNC_ERR_ADDR_HIGH Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUNC_ERR_ADDR_H\nR/W-0h\nTable 3-352. UNC_ERR_ADDR_HIGH Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUNC_ERR_ADDR_H\nR/W\n0h\n64-bit aligned address at which an uncorrectable error occurred in \nthe upper 64-bits of a 128-bit aligned memory.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n559\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.6 ERR_STATUS Register (Offset = Ah) [Reset = 00000000h] \nERR_STATUS is shown in Figure 3-315 and described in Table 3-353.\nReturn to the Summary Table.\nError Status\nFigure 3-315. ERR_STATUS Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nUNC_ERR_H\nFAIL_1_H\nFAIL_0_H\nR-0h\nR-0h\nR-0h\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nUNC_ERR_L\nFAIL_1_L\nFAIL_0_L\nR-0h\nR-0h\nR-0h\nR-0h\nTable 3-353. ERR_STATUS Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-19\nRESERVED\nR\n0h\nReserved\n18\nUNC_ERR_H\nR\n0h\nUncorrectable error. A value of 1 indicates that an un-correctable \nerror occurred in upper 64bits of a 128-bit aligned address. Cleared \nby writing a 1 to UNC_ERR_H_CLR bit of ERR_STATUS_CLR \nregister.\nReset type: SYSRSn\n17\nFAIL_1_H\nR\n0h\nFail on 1.\n0 Fail on 1 single bit error did not occur in upper 64bits of a 128-bit \naligned address.\n1 A value of 1 would indicate that a single bit error occurred in upper \n64bits of a 128-bit aligned address and the corrected value was 1. \nCleared by writing a 1 to FAIL_1_H_CLR bit of ERR_STATUS_CLR \nregister.\nNote: This bit is updated on every flash access which results in a \nsingle bit error, So, in case of multiple single bit error, the status \nwould correspond to the last error which occured.\nReset type: SYSRSn\n16\nFAIL_0_H\nR\n0h\nFail on 0.\n0 Fail on 0 single bit error did not occur in upper 64bits of a 128-bit \naligned address.\n1 A value of 1 would indicate that a single bit error occurred in upper \n64bits of a 128-bit aligned address and the corrected value was 0. \nCleared by writing a 1 to FAIL_0_H_CLR bit of ERR_STATUS_CLR \nregister.\nNote: This bit is updated on every flash access which results in a \nsingle bit error, So, in case of multiple single bit error, the status \nwould correspond to the last error which occurred.\nReset type: SYSRSn\n15-3\nRESERVED\nR\n0h\nReserved\nSystem Control and Interrupts\nwww.ti.com\n560\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-353. ERR_STATUS Register Field Descriptions (continued)\nBit\nField\nType\nReset\nDescription\n2\nUNC_ERR_L\nR\n0h\nUncorrectable error. A value of 1 indicates that an un-correctable \nerror occurred in lower 64bits of a 128-bit aligned address. Cleared \nby writing a 1 to UNC_ERR_L_CLR bit of ERR_STATUS_CLR \nregister.\nReset type: SYSRSn\n1\nFAIL_1_L\nR\n0h\nFail on 1.\n0 Fail on 1 single bit error did not occur in lower 64bits of a 128-bit \naligned address.\n1 A value of 1 would indicate that a single bit error occurred in lower \n64bits of a 128-bit aligned address and the corrected value was 1. \nCleared by writing a 1 to FAIL_1_L_CLR bit of ERR_STATUS_CLR \nregister.\nNote: This bit is updated on every flash access which results in a \nsingle bit error, So, in case of multiple single bit error, the status \nwould correspond to the last error which occured.\nReset type: SYSRSn\n0\nFAIL_0_L\nR\n0h\nFail on 0.\n0 Fail on 0 single bit error did not occur in lower 64bits of a 128-bit \naligned address.\n1 Would indicate that a single bit error occurred in lower 64bits of a \n128-bit aligned address and the corrected value was 0. Cleared by \nwriting a 1 to FAIL_0_L_CLR bit of ERR_STATUS_CLR register.\nNote: This bit is updated on every flash access which results in a \nsingle bit error, So, in case of multiple single bit error, the status \nwould correspond to the last error which occured.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n561\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.7 ERR_POS Register (Offset = Ch) [Reset = 00000000h] \nERR_POS is shown in Figure 3-316 and described in Table 3-354.\nReturn to the Summary Table.\nError Position\nFigure 3-316. ERR_POS Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nERR_TYPE_H\nR-0h\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nERR_POS_H\nR-0h\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nERR_TYPE_L\nR-0h\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nERR_POS_L\nR-0h\nR-0h\nTable 3-354. ERR_POS Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-25\nRESERVED\nR\n0h\nReserved\n24\nERR_TYPE_H\nR\n0h\nError type\n0 Indicates that a single bit error occured in upper 64 data bits of a \n128-bit aligned address.\n1 Indicates that a single bit error occured in ECC check bits of upper \n64bits of a 128-bit aligned address.\nReset type: SYSRSn\n23-22\nRESERVED\nR\n0h\nReserved\n21-16\nERR_POS_H\nR\n0h\nError position. Bit position of the single bit error in upper 64bits of \na 128-bit aligned address. The position is interpreted depending on \nwhether the ERR_TYPE bit indicates a check bit or a data bit. If \nERR_TYPE indicates a check bit error, the error position could range \nfrom 0 to 7, else it could range from 0 to 63.\nReset type: SYSRSn\n15-9\nRESERVED\nR\n0h\nReserved\n8\nERR_TYPE_L\nR\n0h\nError type\n0 Indicates that a single bit error occured in lower 64 data bits of a \n128-bit aligned address.\n1 Indicates that a single bit error occured in ECC check bits of lower \n64bits of a 128-bit aligned address.\nReset type: SYSRSn\n7-6\nRESERVED\nR\n0h\nReserved\n5-0\nERR_POS_L\nR\n0h\nError position. Bit position of the single bit error in lower 64bits of \na 128-bit aligned address. The position is interpreted depending on \nwhether the ERR_TYPE bit indicates a check bit or a data bit. If \nERR_TYPE indicates a check bit error, the error position could range \nfrom 0 to 7, else it could range from 0 to 63.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n562\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.8 ERR_STATUS_CLR Register (Offset = Eh) [Reset = 00000000h] \nERR_STATUS_CLR is shown in Figure 3-317 and described in Table 3-355.\nReturn to the Summary Table.\nError Status Clear\nFigure 3-317. ERR_STATUS_CLR Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nUNC_ERR_H_\nCLR\nFAIL_1_H_CLR FAIL_0_H_CLR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nUNC_ERR_L_C\nLR\nFAIL_1_L_CLR\nFAIL_0_L_CLR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-355. ERR_STATUS_CLR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-19\nRESERVED\nR\n0h\nReserved\n18\nUNC_ERR_H_CLR\nR-0/W1S\n0h\nUncorrectable error clear. Writing a 1 to this bit will clear the \nUNC_ERR_H bit of ERR_STATUS\nregister. Writes of 0 have no effect. Read returns 0.\nReset type: SYSRSn\n17\nFAIL_1_H_CLR\nR-0/W1S\n0h\nFail on 1 clear. Writing a 1 to this bit will clear the FAIL_1_H bit of \nERR_STATUS register. Writes of 0\nhave no effect. Read returns 0.\nReset type: SYSRSn\n16\nFAIL_0_H_CLR\nR-0/W1S\n0h\nFail on 0 clear. Writing a 1 to this bit will clear the FAIL_0_H bit of \nERR_STATUS register. Writes of 0\nhave no effect. Read returns 0.\nReset type: SYSRSn\n15-3\nRESERVED\nR\n0h\nReserved\n2\nUNC_ERR_L_CLR\nR-0/W1S\n0h\nUncorrectable error clear. Writing a 1 to this bit will clear the \nUNC_ERR_L bit of ERR_STATUS\nregister. Writes of 0 have no effect. Read returns 0.\nReset type: SYSRSn\n1\nFAIL_1_L_CLR\nR-0/W1S\n0h\nFail on 1 clear. Writing a 1 to this bit will clear the FAIL_1_L bit of \nERR_STATUS register. Writes of 0\nhave no effect. Read returns 0.\nReset type: SYSRSn\n0\nFAIL_0_L_CLR\nR-0/W1S\n0h\nFail on 0 clear. Writing a 1 to this bit will clear the FAIL_0_L bit of \nERR_STATUS register. Writes of 0\nhave no effect. Read returns 0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n563\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.9 ERR_CNT Register (Offset = 10h) [Reset = 00000000h] \nERR_CNT is shown in Figure 3-318 and described in Table 3-356.\nReturn to the Summary Table.\nError Control\nFigure 3-318. ERR_CNT Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nERR_CNT\nR-0h\nR/W-0h\nTable 3-356. ERR_CNT Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-0\nERR_CNT\nR/W\n0h\nSingle bit error count. This counter increments with every single bit \nECC error occurrence. Upon reaching the threshold value counter \nstops counting on single bit errors. ERR_CNT can be cleared \n(irrespective of whether threshold is met or not) using 'Single Err \nInt Clear' bit. This is applicable for ECC logic test mode and normal \noperational mode.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n564\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.10 ERR_THRESHOLD Register (Offset = 12h) [Reset = 00000000h] \nERR_THRESHOLD is shown in Figure 3-319 and described in Table 3-357.\nReturn to the Summary Table.\nError Threshold\nFigure 3-319. ERR_THRESHOLD Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nERR_THRESHOLD\nR-0h\nR/W-0h\nTable 3-357. ERR_THRESHOLD Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-0\nERR_THRESHOLD\nR/W\n0h\nSingle bit error threshold. Sets the threshold for single bit errors. \nWhen the ERR_CNT value equals the THRESHOLD value and \na single bit error occurs, SINGLE_ERR_INT flag is set, and an \ninterrupt is fired.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n565\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.11 ERR_INTFLG Register (Offset = 14h) [Reset = 00000000h] \nERR_INTFLG is shown in Figure 3-320 and described in Table 3-358.\nReturn to the Summary Table.\nError Interrupt Flag\nFigure 3-320. ERR_INTFLG Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nUNC_ERR_INT\nFLG\nSINGLE_ERR_I\nNTFLG\nR-0h\nR-0h\nR-0h\nTable 3-358. ERR_INTFLG Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-2\nRESERVED\nR\n0h\nReserved\n1\nUNC_ERR_INTFLG\nR\n0h\nUncorrectable bit error interrupt flag. When a Un-correctable error \noccurs, this bit is set and the UNC_ERR_INT interrupt is fired. When \nUNC_ERR_INTCLR bit of ERR_INTCLR register is written a value of \n1 this bit is cleared.\nReset type: SYSRSn\n0\nSINGLE_ERR_INTFLG\nR\n0h\nSingle bit error interrupt flag. When the ERR_CNT value equals \nthe ERR_THRESHOLD value and a single bit error occurs then \nSINGLE_ERR_INT flag is set and SINGLE_ERR_INT interrupt is \nfired. When SINGLE_ERR_INTCLR bit of ERR_INTCLR register is \nwritten a value of 1 this bit is cleared.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n566\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.12 ERR_INTCLR Register (Offset = 16h) [Reset = 00000000h] \nERR_INTCLR is shown in Figure 3-321 and described in Table 3-359.\nReturn to the Summary Table.\nError Interrupt Flag Clear\nFigure 3-321. ERR_INTCLR Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nUNC_ERR_INT\nCLR\nSINGLE_ERR_I\nNTCLR\nR-0h\nR-0/W1S-0h\nR-0/W1S-0h\nTable 3-359. ERR_INTCLR Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-2\nRESERVED\nR\n0h\nReserved\n1\nUNC_ERR_INTCLR\nR-0/W1S\n0h\nUncorrectable bit error interrupt flag clear. Writing a 1 to this bit will \nclear UNC_ERR_INT_FLG. Writes of 0 have no effect.\nReset type: SYSRSn\n0\nSINGLE_ERR_INTCLR\nR-0/W1S\n0h\nSingle bit error interrupt flag clear. Writing a 1 to this bit will clear \nSINGLE_ERR_INT_FLG. Writes of 0 have no effect.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n567\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.13 FDATAH_TEST Register (Offset = 18h) [Reset = 00000000h] \nFDATAH_TEST is shown in Figure 3-322 and described in Table 3-360.\nReturn to the Summary Table.\nData High Test\nFigure 3-322. FDATAH_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nFDATAH\nR/W-0h\nTable 3-360. FDATAH_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nFDATAH\nR/W\n0h\nHigh double word of selected 64-bit data. User-configurable bits \n63:32 of the selected data block in ECC test mode.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n568\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.14 FDATAL_TEST Register (Offset = 1Ah) [Reset = 00000000h] \nFDATAL_TEST is shown in Figure 3-323 and described in Table 3-361.\nReturn to the Summary Table.\nData Low Test\nFigure 3-323. FDATAL_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nFDATAL\nR/W-0h\nTable 3-361. FDATAL_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nFDATAL\nR/W\n0h\nLow double word of selected 64-bit data. User-configurable bits 31:0 \nof the selected data block in ECC test mode.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n569\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.15 FADDR_TEST Register (Offset = 1Ch) [Reset = 00000000h] \nFADDR_TEST is shown in Figure 3-324 and described in Table 3-362.\nReturn to the Summary Table.\nECC Test Address\nFigure 3-324. FADDR_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nADDRH\nR-0h\nR/W-0h\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nADDRL\nRESERVED\nR/W-0h\nR-0h\nTable 3-362. FADDR_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-22\nRESERVED\nR\n0h\nReserved\n21-16\nADDRH\nR/W\n0h\nAddress for selected 64-bit data. User-configurable address bits of \nthe selected data in ECC test mode. Left-shift the address by one bit \n(to provide byte address) and ignore the three least significant bits of \nthe address and write the bits 21:16 in remaining address bits in this \nfield.\nReset type: SYSRSn\n15-3\nADDRL\nR/W\n0h\nAddress for selected 64-bit data. User-configurable address bits of \nthe selected data in ECC test mode. Left-shift the address by one bit \n(to provide byte address) and ignore the three least significant bits of \nthe address and write the bits 15:3 in remaining address bits in this \nfield.\nReset type: SYSRSn\n2-0\nRESERVED\nR\n0h\nReserved\nSystem Control and Interrupts\nwww.ti.com\n570\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.16 FECC_TEST Register (Offset = 1Eh) [Reset = 00000000h] \nFECC_TEST is shown in Figure 3-325 and described in Table 3-363.\nReturn to the Summary Table.\nECC Test Address\nFigure 3-325. FECC_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nRESERVED\nECC\nR-0h\nR-0h\nR/W-0h\nTable 3-363. FECC_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-8\nRESERVED\nR\n0h\nReserved\n7-0\nECC\nR/W\n0h\n8-bit ECC for selected 64-bit data. User-configurable ECC bits of the \nselected 64-bit data block in ECC test mode.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n571\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.17 FECC_CTRL Register (Offset = 20h) [Reset = 00000000h] \nFECC_CTRL is shown in Figure 3-326 and described in Table 3-364.\nReturn to the Summary Table.\nECC Control\nFigure 3-326. FECC_CTRL Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nDO_ECC_CAL\nC\nECC_SELECT\nECC_TEST_EN\nR-0h\nR-0/W1S-0h\nR/W-0h\nR/W-0h\nTable 3-364. FECC_CTRL Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-3\nRESERVED\nR\n0h\nReserved\n2\nDO_ECC_CALC\nR-0/W1S\n0h\nEnable ECC calculation. ECC logic will calculate ECC in one cycle \nfor the data and address written in ECC test registers when ECC test \nlogic is enabled by setting ECC_TEST_EN.\nReset type: SYSRSn\n1\nECC_SELECT\nR/W\n0h\nECC block select.\n0 Selects the ECC block on bits [63:0] of bank data.\n1 Selects the ECC block on bits [127:64] of bank data.\nReset type: SYSRSn\n0\nECC_TEST_EN\nR/W\n0h\nECC test mode enable.\n0 ECC test mode disabled\n1 ECC test mode enabled\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n572\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.18 FOUTH_TEST Register (Offset = 22h) [Reset = 00000000h] \nFOUTH_TEST is shown in Figure 3-327 and described in Table 3-365.\nReturn to the Summary Table.\nTest Data Out High\nFigure 3-327. FOUTH_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nDATAOUTH\nR-0h\nTable 3-365. FOUTH_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nDATAOUTH\nR\n0h\nHigh double word test data out. Holds bits 63:32 of the data out of \nthe selected ECC block.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n573\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.19 FOUTL_TEST Register (Offset = 24h) [Reset = 00000000h] \nFOUTL_TEST is shown in Figure 3-328 and described in Table 3-366.\nReturn to the Summary Table.\nTest Data Out Low\nFigure 3-328. FOUTL_TEST Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nDATAOUTL\nR-0h\nTable 3-366. FOUTL_TEST Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nDATAOUTL\nR\n0h\nLow double word test data out. Holds bits 31:0 of the data out of the \nselected ECC block.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n574\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.21.20 FECC_STATUS Register (Offset = 26h) [Reset = 00000000h] \nFECC_STATUS is shown in Figure 3-329 and described in Table 3-367.\nReturn to the Summary Table.\nECC Status\nFigure 3-329. FECC_STATUS Register\n31\n30\n29\n28\n27\n26\n25\n24\nRESERVED\nR-0h\n23\n22\n21\n20\n19\n18\n17\n16\nRESERVED\nR-0h\n15\n14\n13\n12\n11\n10\n9\n8\nRESERVED\nERR_TYPE\nR-0h\nR-0h\n7\n6\n5\n4\n3\n2\n1\n0\nDATA_ERR_POS\nUNC_ERR\nSINGLE_ERR\nR-0h\nR-0h\nR-0h\nTable 3-367. FECC_STATUS Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-16\nRESERVED\nR\n0h\nReserved\n15-9\nRESERVED\nR\n0h\nReserved\n8\nERR_TYPE\nR\n0h\nTest mode ECC single bit error indicator. When 1, indicates that the \nsingle bit error is in check bits. When 0, indicates that the single bit \nerror is in data bits (If SINGLE_ERR field is also set).\nReset type: SYSRSn\n7-2\nDATA_ERR_POS\nR\n0h\nTest mode single bit error position. Holds the bit position where the \nsingle bit error occurred.\nThe position is interpreted depending on whether the CHK_ERR bit \nindicates a check bit or a data bit. If CHK_ERR indicates a check \nbit error, the error position could range from 0 to 7, or it could range \nfrom 0 to 63.\nReset type: SYSRSn\n1\nUNC_ERR\nR\n0h\nTest mode ECC double bit error. When 1 indicates that the ECC test \nresulted in an uncorrectable bit error.\nReset type: SYSRSn\n0\nSINGLE_ERR\nR\n0h\nTest mode ECC single bit error. When 1 indicates that the ECC test \nresulted in a single bit error.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n575\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22 UID_REGS Registers\nTable 3-368 lists the memory-mapped registers for the UID_REGS registers. All register offset addresses not \nlisted in Table 3-368 should be considered as reserved locations and the register contents should not be \nmodified.\nTable 3-368. UID_REGS Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nUID_PSRAND0\nUID Psuedo-random 192 bit number\nGo\n2h\nUID_PSRAND1\nUID Psuedo-random 192 bit number\nGo\n4h\nUID_PSRAND2\nUID Psuedo-random 192 bit number\nGo\n6h\nUID_PSRAND3\nUID Psuedo-random 192 bit number\nGo\n8h\nUID_PSRAND4\nUID Psuedo-random 192 bit number\nGo\nAh\nUID_PSRAND5\nUID Psuedo-random 192 bit number\nGo\nCh\nUID_UNIQUE\nUID Unique 32 bit number\nGo\nEh\nUID_CHECKSUM\nUID Checksum\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-369 shows the codes that are used for \naccess types in this section.\nTable 3-369. UID_REGS Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nReset or Default Value\n-n\nValue after reset or the default \nvalue\nSystem Control and Interrupts\nwww.ti.com\n576\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.1 UID_PSRAND0 Register (Offset = 0h) [Reset = 00000000h] \nUID_PSRAND0 is shown in Figure 3-330 and described in Table 3-370.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-330. UID_PSRAND0 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-370. UID_PSRAND0 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n577\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.2 UID_PSRAND1 Register (Offset = 2h) [Reset = 00000000h] \nUID_PSRAND1 is shown in Figure 3-331 and described in Table 3-371.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-331. UID_PSRAND1 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-371. UID_PSRAND1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nSystem Control and Interrupts\nwww.ti.com\n578\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.3 UID_PSRAND2 Register (Offset = 4h) [Reset = 00000000h] \nUID_PSRAND2 is shown in Figure 3-332 and described in Table 3-372.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-332. UID_PSRAND2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-372. UID_PSRAND2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n579\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.4 UID_PSRAND3 Register (Offset = 6h) [Reset = 00000000h] \nUID_PSRAND3 is shown in Figure 3-333 and described in Table 3-373.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-333. UID_PSRAND3 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-373. UID_PSRAND3 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nSystem Control and Interrupts\nwww.ti.com\n580\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.5 UID_PSRAND4 Register (Offset = 8h) [Reset = 00000000h] \nUID_PSRAND4 is shown in Figure 3-334 and described in Table 3-374.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-334. UID_PSRAND4 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-374. UID_PSRAND4 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n581\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.6 UID_PSRAND5 Register (Offset = Ah) [Reset = 00000000h] \nUID_PSRAND5 is shown in Figure 3-335 and described in Table 3-375.\nReturn to the Summary Table.\nUID Psuedo-random 192 bit number\nFigure 3-335. UID_PSRAND5 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRandomID\nR-0h\nTable 3-375. UID_PSRAND5 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRandomID\nR\n0h\nPsuedorandom portion of the UID\nReset type: N/A\nSystem Control and Interrupts\nwww.ti.com\n582\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.7 UID_UNIQUE Register (Offset = Ch) [Reset = 00000000h] \nUID_UNIQUE is shown in Figure 3-336 and described in Table 3-376.\nReturn to the Summary Table.\nUID Unique 32 bit number\nFigure 3-336. UID_UNIQUE Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nUniqueID\nR-0h\nTable 3-376. UID_UNIQUE Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nUniqueID\nR\n0h\nUnique portion of the UID. This identifier will be unique across all \ndevices with the same PARTIDH.\nReset type: N/A\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n583\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.22.8 UID_CHECKSUM Register (Offset = Eh) [Reset = 00000000h] \nUID_CHECKSUM is shown in Figure 3-337 and described in Table 3-377.\nReturn to the Summary Table.\nFletcher checksum of UID_PSRAND and UID_UNIQUE registers\nFigure 3-337. UID_CHECKSUM Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nChecksum\nR-0h\nTable 3-377. UID_CHECKSUM Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nChecksum\nR\n0h\nFletcher checksum of UID_PSRANDx and UID_UINIQUE\nReset type: N/A\nSystem Control and Interrupts\nwww.ti.com\n584\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23 DCSM_BANK0_Z1_OTP Registers\nTable 3-378 lists the memory-mapped registers for the DCSM_BANK0_Z1_OTP registers. All register offset \naddresses not listed in Table 3-378 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-378. DCSM_BANK0_Z1_OTP Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nB0_Z1OTP_LINKPOINTER1\nZone 1 Link Pointer1 in Z1 OTP for flash BANK0\nGo\n4h\nB0_Z1OTP_LINKPOINTER2\nZone 1 Link Pointer2 in Z1 OTP for flash BANK0\nGo\n8h\nB0_Z1OTP_LINKPOINTER3\nZone 1 Link Pointer3 in Z1 OTP for flash BANK0\nGo\nCh\nZ1OTP_BOOTPIN_CONFIG\nBoot Pin Configuration\nGo\nEh\nZ1OTP_GPREG2\nZone-1 General Purpose Register-2 content\nGo\n10h\nZ1OTP_PSWDLOCK\nSecure Password Lock in Z1 OTP\nGo\n14h\nZ1OTP_CRCLOCK\nSecure CRC Lock in Z1 OTP\nGo\n18h\nZ1OTP_JTAGLOCK\nSecure JTAG Lock in Z1 OTP\nGo\n1Ch\nZ1OTP_BOOTDEF_LOW\nBoot definition (low 32bit)\nGo\n1Eh\nZ1OTP_BOOTDEF_HIGH\nBoot definition (high 32bit)\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-379 shows the codes that are used for \naccess types in this section.\nTable 3-379. DCSM_BANK0_Z1_OTP Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n585\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.1 B0_Z1OTP_LINKPOINTER1 Register (Offset = 0h) [Reset = FFFFFFFFh] \nB0_Z1OTP_LINKPOINTER1 is shown in Figure 3-338 and described in Table 3-380.\nReturn to the Summary Table.\nZone 1 Link Pointer1 in Z1 OTP for flash BANK0\nFigure 3-338. B0_Z1OTP_LINKPOINTER1 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z1OTP_LINKPOINTER1\nR-FFFFFFFFh\nTable 3-380. B0_Z1OTP_LINKPOINTER1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z1OTP_LINKPOINTE\nR1\nR\nFFFFFFFFh Zone1 Link Pointer 1 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n586\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.2 B0_Z1OTP_LINKPOINTER2 Register (Offset = 4h) [Reset = FFFFFFFFh] \nB0_Z1OTP_LINKPOINTER2 is shown in Figure 3-339 and described in Table 3-381.\nReturn to the Summary Table.\nZone 1 Link Pointer2 in Z1 OTP for flash BANK0\nFigure 3-339. B0_Z1OTP_LINKPOINTER2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z1OTP_LINKPOINTER2\nR-FFFFFFFFh\nTable 3-381. B0_Z1OTP_LINKPOINTER2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z1OTP_LINKPOINTE\nR2\nR\nFFFFFFFFh Zone1 Link Pointer 2 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n587\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.3 B0_Z1OTP_LINKPOINTER3 Register (Offset = 8h) [Reset = FFFFFFFFh] \nB0_Z1OTP_LINKPOINTER3 is shown in Figure 3-340 and described in Table 3-382.\nReturn to the Summary Table.\nZone 1 Link Pointer3 in Z1 OTP for flash BANK0\nFigure 3-340. B0_Z1OTP_LINKPOINTER3 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z1OTP_LINKPOINTER3\nR-FFFFFFFFh\nTable 3-382. B0_Z1OTP_LINKPOINTER3 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z1OTP_LINKPOINTE\nR3\nR\nFFFFFFFFh Zone1 Link Pointer 3 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n588\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.4 Z1OTP_BOOTPIN_CONFIG Register (Offset = Ch) [Reset = FFFFFFFFh] \nZ1OTP_BOOTPIN_CONFIG is shown in Figure 3-341 and described in Table 3-383.\nReturn to the Summary Table.\nBoot Pin Configuration\nFigure 3-341. Z1OTP_BOOTPIN_CONFIG Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_BOOTPIN_CONFIG\nR-FFFFFFFFh\nTable 3-383. Z1OTP_BOOTPIN_CONFIG Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_BOOTPIN_CONF\nIG\nR\nFFFFFFFFh Zone1 Boot pin configuration register location in USER OTP of Flash \nBANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n589\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.5 Z1OTP_GPREG2 Register (Offset = Eh) [Reset = FFFFFFFFh] \nZ1OTP_GPREG2 is shown in Figure 3-342 and described in Table 3-384.\nReturn to the Summary Table.\nZone-1 General Purpose Register-2 content\nFigure 3-342. Z1OTP_GPREG2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_GPREG2\nR-FFFFFFFFh\nTable 3-384. Z1OTP_GPREG2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_GPREG2\nR\nFFFFFFFFh Zone1 General Purpose register location in USER OTP of Flash \nBANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n590\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.6 Z1OTP_PSWDLOCK Register (Offset = 10h) [Reset = FFFFFFFFh] \nZ1OTP_PSWDLOCK is shown in Figure 3-343 and described in Table 3-385.\nReturn to the Summary Table.\nSecure Password Lock in Z1 OTP\nFigure 3-343. Z1OTP_PSWDLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_PSWDLOCK\nR-FFFFFFFFh\nTable 3-385. Z1OTP_PSWDLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_PSWDLOCK\nR\nFFFFFFFFh Zone1 password lock location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n591\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.7 Z1OTP_CRCLOCK Register (Offset = 14h) [Reset = FFFFFFFFh] \nZ1OTP_CRCLOCK is shown in Figure 3-344 and described in Table 3-386.\nReturn to the Summary Table.\nSecure CRC Lock in Z1 OTP\nFigure 3-344. Z1OTP_CRCLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_CRCLOCK\nR-FFFFFFFFh\nTable 3-386. Z1OTP_CRCLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_CRCLOCK\nR\nFFFFFFFFh Zone1 CRC lock location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n592\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.8 Z1OTP_JTAGLOCK Register (Offset = 18h) [Reset = FFFFFFFFh] \nZ1OTP_JTAGLOCK is shown in Figure 3-345 and described in Table 3-387.\nReturn to the Summary Table.\nSecure JTAG Lock in Z1 OTP\nFigure 3-345. Z1OTP_JTAGLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nR-FFFFFFFFh\nTable 3-387. Z1OTP_JTAGLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRESERVED\nR\nFFFFFFFFh Reserved\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n593\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.9 Z1OTP_BOOTDEF_LOW Register (Offset = 1Ch) [Reset = FFFFFFFFh] \nZ1OTP_BOOTDEF_LOW is shown in Figure 3-346 and described in Table 3-388.\nReturn to the Summary Table.\nBoot definition (low 32bit)\nFigure 3-346. Z1OTP_BOOTDEF_LOW Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_BOOTDEF_LOW\nR-FFFFFFFFh\nTable 3-388. Z1OTP_BOOTDEF_LOW Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_BOOTDEF_LOW\nR\nFFFFFFFFh Zone1 Boot definition (low) register location in USER OTP of Flash \nBANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n594\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.23.10 Z1OTP_BOOTDEF_HIGH Register (Offset = 1Eh) [Reset = FFFFFFFFh] \nZ1OTP_BOOTDEF_HIGH is shown in Figure 3-347 and described in Table 3-389.\nReturn to the Summary Table.\nBoot definition (high 32bit)\nFigure 3-347. Z1OTP_BOOTDEF_HIGH Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ1OTP_BOOTDEF_HIGH\nR-FFFFFFFFh\nTable 3-389. Z1OTP_BOOTDEF_HIGH Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ1OTP_BOOTDEF_HIGH R\nFFFFFFFFh Zone1 Boot Definition (high)register location in USER OTP of Flash \nBANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n595\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24 DCSM_BANK0_Z2_OTP Registers\nTable 3-390 lists the memory-mapped registers for the DCSM_BANK0_Z2_OTP registers. All register offset \naddresses not listed in Table 3-390 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-390. DCSM_BANK0_Z2_OTP Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nB0_Z2OTP_LINKPOINTER1\nZone 2Link Pointer1 in Z2 OTP for flash BANK0\nGo\n4h\nB0_Z2OTP_LINKPOINTER2\nZone 2 Link Pointer2 in Z2 OTP for flash BANK0\nGo\n8h\nB0_Z2OTP_LINKPOINTER3\nZone 12Link Pointer3 in Z2 OTP for flash BANK0\nGo\n10h\nZ2OTP_PSWDLOCK\nSecure Password Lock in Z2 OTP\nGo\n14h\nZ2OTP_CRCLOCK\nSecure CRC Lock in Z2 OTP\nGo\n18h\nZ2OTP_JTAGLOCK\nSecure JTAG Lock in Z2 OTP\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-391 shows the codes that are used for \naccess types in this section.\nTable 3-391. DCSM_BANK0_Z2_OTP Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nSystem Control and Interrupts\nwww.ti.com\n596\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.1 B0_Z2OTP_LINKPOINTER1 Register (Offset = 0h) [Reset = FFFFFFFFh] \nB0_Z2OTP_LINKPOINTER1 is shown in Figure 3-348 and described in Table 3-392.\nReturn to the Summary Table.\nZone 2Link Pointer1 in Z2 OTP for flash BANK0\nFigure 3-348. B0_Z2OTP_LINKPOINTER1 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z2OTP_LINKPOINTER1\nR-FFFFFFFFh\nTable 3-392. B0_Z2OTP_LINKPOINTER1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z2OTP_LINKPOINTE\nR1\nR\nFFFFFFFFh Zone2 Link Pointer 1 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n597\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.2 B0_Z2OTP_LINKPOINTER2 Register (Offset = 4h) [Reset = FFFFFFFFh] \nB0_Z2OTP_LINKPOINTER2 is shown in Figure 3-349 and described in Table 3-393.\nReturn to the Summary Table.\nZone 2 Link Pointer2 in Z2 OTP for flash BANK0\nFigure 3-349. B0_Z2OTP_LINKPOINTER2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z2OTP_LINKPOINTER2\nR-FFFFFFFFh\nTable 3-393. B0_Z2OTP_LINKPOINTER2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z2OTP_LINKPOINTE\nR2\nR\nFFFFFFFFh Zone2 Link Pointer 2 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n598\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.3 B0_Z2OTP_LINKPOINTER3 Register (Offset = 8h) [Reset = FFFFFFFFh] \nB0_Z2OTP_LINKPOINTER3 is shown in Figure 3-350 and described in Table 3-394.\nReturn to the Summary Table.\nZone 12Link Pointer3 in Z2 OTP for flash BANK0\nFigure 3-350. B0_Z2OTP_LINKPOINTER3 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB0_Z2OTP_LINKPOINTER3\nR-FFFFFFFFh\nTable 3-394. B0_Z2OTP_LINKPOINTER3 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB0_Z2OTP_LINKPOINTE\nR3\nR\nFFFFFFFFh Zone2 Link Pointer 3 location in USER OTP of Flash BANK0.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n599\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.4 Z2OTP_PSWDLOCK Register (Offset = 10h) [Reset = FFFFFFFFh] \nZ2OTP_PSWDLOCK is shown in Figure 3-351 and described in Table 3-395.\nReturn to the Summary Table.\nSecure Password Lock in Z2 OTP\nFigure 3-351. Z2OTP_PSWDLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ2OTP_PSWDLOCK\nR-FFFFFFFFh\nTable 3-395. Z2OTP_PSWDLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ2OTP_PSWDLOCK\nR\nFFFFFFFFh Zone2 password lock location in USER OTP.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n600\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.5 Z2OTP_CRCLOCK Register (Offset = 14h) [Reset = FFFFFFFFh] \nZ2OTP_CRCLOCK is shown in Figure 3-352 and described in Table 3-396.\nReturn to the Summary Table.\nSecure CRC Lock in Z2 OTP\nFigure 3-352. Z2OTP_CRCLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nZ2OTP_CRCLOCK\nR-FFFFFFFFh\nTable 3-396. Z2OTP_CRCLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nZ2OTP_CRCLOCK\nR\nFFFFFFFFh Zone2 CRC lock location in USER OTP.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n601\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.24.6 Z2OTP_JTAGLOCK Register (Offset = 18h) [Reset = FFFFFFFFh] \nZ2OTP_JTAGLOCK is shown in Figure 3-353 and described in Table 3-397.\nReturn to the Summary Table.\nSecure JTAG Lock in Z2 OTP\nFigure 3-353. Z2OTP_JTAGLOCK Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nRESERVED\nR-FFFFFFFFh\nTable 3-397. Z2OTP_JTAGLOCK Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nRESERVED\nR\nFFFFFFFFh Reserved\nSystem Control and Interrupts\nwww.ti.com\n602\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.25 DCSM_BANK1_Z1_OTP Registers\nTable 3-398 lists the memory-mapped registers for the DCSM_BANK1_Z1_OTP registers. All register offset \naddresses not listed in Table 3-398 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-398. DCSM_BANK1_Z1_OTP Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nB1_Z1OTP_LINKPOINTER1\nZone 1 Link Pointer1 in Z1 OTP for flash BANK1\nGo\n4h\nB1_Z1OTP_LINKPOINTER2\nZone 1 Link Pointer2 in Z1 OTP for flash BANK1\nGo\n8h\nB1_Z1OTP_LINKPOINTER3\nZone 1 Link Pointer3 in Z1 OTP for flash BANK1\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-399 shows the codes that are used for \naccess types in this section.\nTable 3-399. DCSM_BANK1_Z1_OTP Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n603\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.25.1 B1_Z1OTP_LINKPOINTER1 Register (Offset = 0h) [Reset = FFFFFFFFh] \nB1_Z1OTP_LINKPOINTER1 is shown in Figure 3-354 and described in Table 3-400.\nReturn to the Summary Table.\nZone 1 Link Pointer1 in Z1 OTP for flash BANK1\nFigure 3-354. B1_Z1OTP_LINKPOINTER1 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z1OTP_LINKPOINTER1\nR-FFFFFFFFh\nTable 3-400. B1_Z1OTP_LINKPOINTER1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z1OTP_LINKPOINTE\nR1\nR\nFFFFFFFFh Zone1 Link Pointer 1 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n604\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.25.2 B1_Z1OTP_LINKPOINTER2 Register (Offset = 4h) [Reset = FFFFFFFFh] \nB1_Z1OTP_LINKPOINTER2 is shown in Figure 3-355 and described in Table 3-401.\nReturn to the Summary Table.\nZone 1 Link Pointer2 in Z1 OTP for flash BANK1\nFigure 3-355. B1_Z1OTP_LINKPOINTER2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z1OTP_LINKPOINTER2\nR-FFFFFFFFh\nTable 3-401. B1_Z1OTP_LINKPOINTER2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z1OTP_LINKPOINTE\nR2\nR\nFFFFFFFFh Zone1 Link Pointer 2 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n605\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.25.3 B1_Z1OTP_LINKPOINTER3 Register (Offset = 8h) [Reset = FFFFFFFFh] \nB1_Z1OTP_LINKPOINTER3 is shown in Figure 3-356 and described in Table 3-402.\nReturn to the Summary Table.\nZone 1 Link Pointer3 in Z1 OTP for flash BANK1\nFigure 3-356. B1_Z1OTP_LINKPOINTER3 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z1OTP_LINKPOINTER3\nR-FFFFFFFFh\nTable 3-402. B1_Z1OTP_LINKPOINTER3 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z1OTP_LINKPOINTE\nR3\nR\nFFFFFFFFh Zone1 Link Pointer 3 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n606\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.26 DCSM_BANK1_Z2_OTP Registers\nTable 3-403 lists the memory-mapped registers for the DCSM_BANK1_Z2_OTP registers. All register offset \naddresses not listed in Table 3-403 should be considered as reserved locations and the register contents should \nnot be modified.\nTable 3-403. DCSM_BANK1_Z2_OTP Registers\nOffset\nAcronym\nRegister Name\nWrite Protection\nSection\n0h\nB1_Z2OTP_LINKPOINTER1\nZone 2 Link Pointer1 in Z2 OTP for flash BANK1\nGo\n4h\nB1_Z2OTP_LINKPOINTER2\nZone 2 Link Pointer2 in Z2 OTP for flash BANK1\nGo\n8h\nB1_Z2OTP_LINKPOINTER3\nZone 2 Link Pointer3 in Z2 OTP for flash BANK1\nGo\nComplex bit access types are encoded to fit into small table cells. Table 3-404 shows the codes that are used for \naccess types in this section.\nTable 3-404. DCSM_BANK1_Z2_OTP Access Type Codes\nAccess Type\nCode\nDescription\nRead Type\nR\nR\nRead\nReset or Default Value\n-n\nValue after reset or the default value\nRegister Array Variables\ni,j,k,l,m,n\nWhen these variables are used in a register name, \nan offset, or an address, they refer to the value of a \nregister array where the register is part of a group \nof repeating registers. The register groups form a \nhierarchical structure and the array is represented \nwith a formula.\ny\nWhen this variable is used in a register name, an \noffset, or an address it refers to the value of a \nregister array.\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n607\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.26.1 B1_Z2OTP_LINKPOINTER1 Register (Offset = 0h) [Reset = FFFFFFFFh] \nB1_Z2OTP_LINKPOINTER1 is shown in Figure 3-357 and described in Table 3-405.\nReturn to the Summary Table.\nZone 2 Link Pointer1 in Z2 OTP for flash BANK1\nFigure 3-357. B1_Z2OTP_LINKPOINTER1 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z2OTP_LINKPOINTER1\nR-FFFFFFFFh\nTable 3-405. B1_Z2OTP_LINKPOINTER1 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z2OTP_LINKPOINTE\nR1\nR\nFFFFFFFFh Zone2 Link Pointer 1 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n608\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.26.2 B1_Z2OTP_LINKPOINTER2 Register (Offset = 4h) [Reset = FFFFFFFFh] \nB1_Z2OTP_LINKPOINTER2 is shown in Figure 3-358 and described in Table 3-406.\nReturn to the Summary Table.\nZone 2 Link Pointer2 in Z2 OTP for flash BANK1\nFigure 3-358. B1_Z2OTP_LINKPOINTER2 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z2OTP_LINKPOINTER2\nR-FFFFFFFFh\nTable 3-406. B1_Z2OTP_LINKPOINTER2 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z2OTP_LINKPOINTE\nR2\nR\nFFFFFFFFh Zone2 Link Pointer 2 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n609\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.26.3 B1_Z2OTP_LINKPOINTER3 Register (Offset = 8h) [Reset = FFFFFFFFh] \nB1_Z2OTP_LINKPOINTER3 is shown in Figure 3-359 and described in Table 3-407.\nReturn to the Summary Table.\nZone 2 Link Pointer3 in Z2 OTP for flash BANK1\nFigure 3-359. B1_Z2OTP_LINKPOINTER3 Register\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nB1_Z2OTP_LINKPOINTER3\nR-FFFFFFFFh\nTable 3-407. B1_Z2OTP_LINKPOINTER3 Register Field Descriptions\nBit\nField\nType\nReset\nDescription\n31-0\nB1_Z2OTP_LINKPOINTE\nR3\nR\nFFFFFFFFh Zone2 Link Pointer 3 location in USER OTP of Flash BANK1.\nReset type: SYSRSn\nSystem Control and Interrupts\nwww.ti.com\n610\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.27 Register to Driverlib Function Mapping\n3.15.27.1 ASYSCTL Registers to Driverlib Functions\nTable 3-408. ASYSCTL Registers to Driverlib Functions\nFile\nDriverlib Function\nANAREFPP\n-\nTSNSCTL\nasysctl.h\nASysCtl_enableTemperatureSensor\nasysctl.h\nASysCtl_disableTemperatureSensor\nANAREFCTL\nadc.c\nADC_setVREF\nadc.c\nADC_setOffsetTrim\nasysctl.h\nASysCtl_setAnalogReferenceInternal\nasysctl.h\nASysCtl_setAnalogReferenceExternal\nasysctl.h\nASysCtl_setAnalogReference2P5\nasysctl.h\nASysCtl_setAnalogReference1P65\nVMONCTL\n-\nDCDCCTL\nasysctl.h\nASysCtl_enableDCDC\nasysctl.h\nASysCtl_disableDCDC\nDCDCSTS\nasysctl.h\nASysCtl_getInductorFaultStatus\nasysctl.h\nASysCtl_getSwitchSequenceStatus\nCMPHPMXSEL\nasysctl.h\nASysCtl_selectCMPHPMux\nCMPLPMXSEL\nasysctl.h\nASysCtl_selectCMPLPMux\nCMPHNMXSEL\nasysctl.h\nASysCtl_selectCMPHNMux\nasysctl.h\nASysCtl_selectCMPHNMuxValue\nCMPLNMXSEL\nasysctl.h\nASysCtl_selectCMPLNMux\nasysctl.h\nASysCtl_selectCMPLNMuxValue\nLOCK\nasysctl.h\nASysCtl_lockTemperatureSensor\nasysctl.h\nASysCtl_lockANAREF\nasysctl.h\nASysCtl_lockVMON\nasysctl.h\nASysCtl_lockDCDC\nasysctl.h\nASysCtl_lockPGAADCINMux\nasysctl.h\nASysCtl_lockCMPHPMux\nasysctl.h\nASysCtl_lockCMPLPMux\nasysctl.h\nASysCtl_lockCMPHNMux\nasysctl.h\nASysCtl_lockCMPLNMux\nasysctl.h\nASysCtl_lockVREG\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n611\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.27.2 CPUTIMER Registers to Driverlib Functions\nTable 3-409. CPUTIMER Registers to Driverlib Functions\nFile\nDriverlib Function\nTIM\ncputimer.h\nCPUTimer_getTimerCount\nPRD\ncputimer.h\nCPUTimer_setPeriod\nTCR\ncputimer.c\nCPUTimer_setEmulationMode\ncputimer.h\nCPUTimer_clearOverflowFlag\ncputimer.h\nCPUTimer_disableInterrupt\ncputimer.h\nCPUTimer_enableInterrupt\ncputimer.h\nCPUTimer_reloadTimerCounter\ncputimer.h\nCPUTimer_stopTimer\ncputimer.h\nCPUTimer_resumeTimer\ncputimer.h\nCPUTimer_startTimer\ncputimer.h\nCPUTimer_getTimerOverflowStatus\nTPR\ncputimer.h\nCPUTimer_setPreScaler\nTPRH\ncputimer.h\nCPUTimer_setPreScaler\n3.15.27.3 DCSM Registers to Driverlib Functions\nTable 3-410. DCSM Registers to Driverlib Functions\nFile\nDriverlib Function\nB0_Z1OTP_LINKPOINTER1\n-\nB0_Z1OTP_LINKPOINTER2\n-\nB0_Z1OTP_LINKPOINTER3\n-\nZ1OTP_BOOTPIN_CONFIG\n-\nZ1OTP_GPREG2\n-\nZ1OTP_PSWDLOCK\n-\nZ1OTP_CRCLOCK\n-\nZ1OTP_BOOTDEF_LOW\n-\nZ1OTP_BOOTDEF_HIGH\n-\nB0_Z2OTP_LINKPOINTER1\n-\nB0_Z2OTP_LINKPOINTER2\n-\nSystem Control and Interrupts\nwww.ti.com\n612\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-410. DCSM Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nB0_Z2OTP_LINKPOINTER3\n-\nZ2OTP_PSWDLOCK\n-\nZ2OTP_CRCLOCK\n-\nB0_Z1_LINKPOINTER\ndcsm.c\nDCSM_unlockZone1CSM\ndcsm.h\nDCSM_getZone1LinkPointerError\nZ1_OTPSECLOCK\n-\nZ1_BOOTDEF_HIGH\n-\nB0_Z1_LINKPOINTERERR\ndcsm.h\nDCSM_getZone1LinkPointerError\nZ1_BOOTPIN_CONFIG\n-\nZ1_GPREG2\n-\nZ1_BOOTDEF_LOW\n-\nZ1_CSMKEY0\ndcsm.c\nDCSM_unlockZone1CSM\nZ1_CSMKEY1\ndcsm.c\nDCSM_unlockZone1CSM\nZ1_CSMKEY2\ndcsm.c\nDCSM_unlockZone1CSM\nZ1_CSMKEY3\ndcsm.c\nDCSM_unlockZone1CSM\nZ1_CR\ndcsm.h\nDCSM_secureZone1\ndcsm.h\nDCSM_getZone1CSMSecurityStatus\ndcsm.h\nDCSM_getZone1ControlStatus\nB0_Z1_GRABSECTR\n-\nZ1_GRABRAMR\n-\nB0_Z1_EXEONLYSECTR\ndcsm.c\nDCSM_getZone1FlashEXEStatus\nZ1_EXEONLYRAMR\ndcsm.c\nDCSM_getZone1RAMEXEStatus\nB0_Z2_LINKPOINTER\ndcsm.c\nDCSM_unlockZone2CSM\ndcsm.h\nDCSM_getZone2LinkPointerError\nZ2_OTPSECLOCK\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n613\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-410. DCSM Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\n-\nB0_Z2_LINKPOINTERERR\ndcsm.h\nDCSM_getZone2LinkPointerError\nZ2_CSMKEY0\ndcsm.c\nDCSM_unlockZone2CSM\nZ2_CSMKEY1\ndcsm.c\nDCSM_unlockZone2CSM\nZ2_CSMKEY2\ndcsm.c\nDCSM_unlockZone2CSM\nZ2_CSMKEY3\ndcsm.c\nDCSM_unlockZone2CSM\nZ2_CR\ndcsm.h\nDCSM_secureZone2\ndcsm.h\nDCSM_getZone2CSMSecurityStatus\ndcsm.h\nDCSM_getZone2ControlStatus\nB0_Z2_GRABSECTR\n-\nZ2_GRABRAMR\n-\nB0_Z2_EXEONLYSECTR\ndcsm.c\nDCSM_getZone2FlashEXEStatus\nZ2_EXEONLYRAMR\ndcsm.c\nDCSM_getZone2RAMEXEStatus\nFLSEM\ndcsm.c\nDCSM_claimZoneSemaphore\ndcsm.c\nDCSM_releaseZoneSemaphore\nB0_SECTSTAT\ndcsm.h\nDCSM_getFlashSectorZone\nRAMSTAT\ndcsm.h\nDCSM_getRAMZone\nB1_SECTSTAT\ndcsm.h\nDCSM_getFlashSectorZone\nSECERRSTAT\ndcsm.h\nDCSM_getFlashErrorStatus\nSECERRCLR\ndcsm.h\nDCSM_clearFlashErrorStatus\nSECERRFRC\ndcsm.h\nDCSM_forceFlashErrorStatus\nB1_Z1OTP_LINKPOINTER1\n-\nB1_Z1OTP_LINKPOINTER2\n-\nB1_Z1OTP_LINKPOINTER3\n-\nB1_Z2OTP_LINKPOINTER1\nSystem Control and Interrupts\nwww.ti.com\n614\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-410. DCSM Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\n-\nB1_Z2OTP_LINKPOINTER2\n-\nB1_Z2OTP_LINKPOINTER3\n-\nB1_Z1_LINKPOINTER\ndcsm.h\nDCSM_getZone1LinkPointerError\nB1_Z1_LINKPOINTERERR\ndcsm.h\nDCSM_getZone1LinkPointerError\nB1_Z1_GRABSECTR\n-\nB1_Z1_EXEONLYSECTR\ndcsm.c\nDCSM_getZone1FlashEXEStatus\nB1_Z2_LINKPOINTER\ndcsm.h\nDCSM_getZone2LinkPointerError\nB1_Z2_LINKPOINTERERR\ndcsm.h\nDCSM_getZone2LinkPointerError\nB1_Z2_GRABSECTR\n-\nB1_Z2_EXEONLYSECTR\ndcsm.c\nDCSM_getZone2FlashEXEStatus\n3.15.27.4 FLASH Registers to Driverlib Functions\nTable 3-411. FLASH Registers to Driverlib Functions\nFile\nDriverlib Function\nFRDCNTL\nflash.h\nFlash_setWaitstates\nFBAC\nflash.h\nFlash_setBankActiveGracePeriod\nFBFALLBACK\nflash.h\nFlash_setBankPowerMode\nFBPRDY\nflash.h\nFlash_isBankReady\nflash.h\nFlash_isPumpReady\nFPAC1\nflash.h\nFlash_setPumpPowerMode\nflash.h\nFlash_setPumpWakeupTime\nFPAC2\nflash.h\nFlash_setPumpActiveGracePeriod\nFMSTAT\n-\nFRD_INTF_CTRL\nflash.h\nFlash_enablePrefetch\nflash.h\nFlash_disablePrefetch\nflash.h\nFlash_enableCache\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n615\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-411. FLASH Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nflash.h\nFlash_disableCache\nECC_ENABLE\nflash.h\nFlash_enableECC\nflash.h\nFlash_disableECC\nSINGLE_ERR_ADDR_LOW\nflash.h\nFlash_getSingleBitErrorAddressLow\nSINGLE_ERR_ADDR_HIGH\nflash.h\nFlash_getSingleBitErrorAddressHigh\nUNC_ERR_ADDR_LOW\nflash.h\nFlash_getUncorrectableErrorAddressLow\nUNC_ERR_ADDR_HIGH\nflash.h\nFlash_getUncorrectableErrorAddressHigh\nERR_STATUS\nflash.h\nFlash_getLowErrorStatus\nflash.h\nFlash_getHighErrorStatus\nflash.h\nFlash_clearLowErrorStatus\nflash.h\nFlash_clearHighErrorStatus\nERR_POS\nflash.h\nFlash_getLowErrorPosition\nflash.h\nFlash_getHighErrorPosition\nflash.h\nFlash_clearLowErrorPosition\nflash.h\nFlash_clearHighErrorPosition\nflash.h\nFlash_getLowErrorType\nflash.h\nFlash_getHighErrorType\nERR_STATUS_CLR\nflash.h\nFlash_clearLowErrorStatus\nflash.h\nFlash_clearHighErrorStatus\nERR_CNT\nflash.h\nFlash_getErrorCount\nERR_THRESHOLD\nflash.h\nFlash_setErrorThreshold\nERR_INTFLG\nflash.h\nFlash_getInterruptFlag\nERR_INTCLR\nflash.h\nFlash_clearSingleErrorInterruptFlag\nflash.h\nFlash_clearUncorrectableInterruptFlag\nFDATAH_TEST\nflash.h\nFlash_setDataHighECCTest\nFDATAL_TEST\nflash.h\nFlash_setDataLowECCTest\nFADDR_TEST\nflash.h\nFlash_setECCTestAddress\nFECC_TEST\nflash.h\nFlash_setECCTestECCBits\nFECC_CTRL\nSystem Control and Interrupts\nwww.ti.com\n616\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-411. FLASH Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nflash.h\nFlash_enableECCTestMode\nflash.h\nFlash_disableECCTestMode\nflash.h\nFlash_selectLowECCBlock\nflash.h\nFlash_selectHighECCBlock\nflash.h\nFlash_performECCCalculation\nFOUTH_TEST\nflash.h\nFlash_getTestDataOutHigh\nFOUTL_TEST\nflash.h\nFlash_getTestDataOutLow\nFECC_STATUS\nflash.h\nFlash_getECCTestStatus\nflash.h\nFlash_getECCTestErrorPosition\nflash.h\nFlash_getECCTestSingleBitErrorType\n3.15.27.5 MEMCFG Registers to Driverlib Functions\nTable 3-412. MEMCFG Registers to Driverlib Functions\nFile\nDriverlib Function\nDXLOCK\nmemcfg.c\nMemCfg_lockConfig\nmemcfg.c\nMemCfg_unlockConfig\nDXCOMMIT\nmemcfg.c\nMemCfg_commitConfig\nDXTEST\nmemcfg.c\nMemCfg_setTestMode\nDXINIT\nmemcfg.c\nMemCfg_initSections\nmemcfg.c\nMemCfg_getInitStatus\nDXINITDONE\nmemcfg.c\nMemCfg_getInitStatus\nLSXLOCK\nmemcfg.c\nMemCfg_lockConfig\nmemcfg.c\nMemCfg_unlockConfig\nLSXCOMMIT\nmemcfg.c\nMemCfg_commitConfig\nLSXMSEL\nmemcfg.c\nMemCfg_setLSRAMControllerSel\nLSXCLAPGM\nmemcfg.h\nMemCfg_setCLAMemType\nLSXACCPROT0\nmemcfg.c\nMemCfg_setProtection\nLSXACCPROT1\n-\nLSXTEST\nmemcfg.c\nMemCfg_setTestMode\nLSXINIT\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n617\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-412. MEMCFG Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nmemcfg.c\nMemCfg_initSections\nmemcfg.c\nMemCfg_getInitStatus\nLSXINITDONE\nmemcfg.c\nMemCfg_getInitStatus\nGSXLOCK\nmemcfg.c\nMemCfg_lockConfig\nmemcfg.c\nMemCfg_unlockConfig\nGSXCOMMIT\nmemcfg.c\nMemCfg_commitConfig\nGSXACCPROT0\nmemcfg.c\nMemCfg_setProtection\nGSXTEST\nmemcfg.c\nMemCfg_setTestMode\nGSXINIT\nmemcfg.c\nMemCfg_initSections\nmemcfg.c\nMemCfg_getInitStatus\nGSXINITDONE\nmemcfg.c\nMemCfg_getInitStatus\nMSGXLOCK\nmemcfg.c\nMemCfg_lockConfig\nmemcfg.c\nMemCfg_unlockConfig\nMSGXCOMMIT\nmemcfg.c\nMemCfg_commitConfig\nMSGXTEST\nmemcfg.c\nMemCfg_setTestMode\nMSGXINIT\nmemcfg.c\nMemCfg_initSections\nmemcfg.c\nMemCfg_getInitStatus\nMSGXINITDONE\nmemcfg.c\nMemCfg_getInitStatus\nNMAVFLG\nmemcfg.h\nMemCfg_getViolationInterruptStatus\nNMAVSET\nmemcfg.h\nMemCfg_forceViolationInterrupt\nNMAVCLR\nmemcfg.h\nMemCfg_clearViolationInterruptStatus\nNMAVINTEN\nmemcfg.h\nMemCfg_enableViolationInterrupt\nmemcfg.h\nMemCfg_disableViolationInterrupt\nNMCPURDAVADDR\nmemcfg.c\nMemCfg_getViolationAddress\nNMCPUWRAVADDR\nmemcfg.c\nMemCfg_getViolationAddress\nNMCPUFAVADDR\n-\nSystem Control and Interrupts\nwww.ti.com\n618\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-412. MEMCFG Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nNMCLA1RDAVADDR\n-\nNMCLA1WRAVADDR\n-\nNMCLA1FAVADDR\n-\nMAVFLG\nmemcfg.h\nMemCfg_getViolationInterruptStatus\nMAVSET\nmemcfg.h\nMemCfg_forceViolationInterrupt\nMAVCLR\nmemcfg.h\nMemCfg_clearViolationInterruptStatus\nMAVINTEN\nmemcfg.h\nMemCfg_enableViolationInterrupt\nmemcfg.h\nMemCfg_disableViolationInterrupt\nMCPUFAVADDR\nmemcfg.c\nMemCfg_getViolationAddress\nMCPUWRAVADDR\n-\nMDMAWRAVADDR\n-\nUCERRFLG\nmemcfg.h\nMemCfg_getUncorrErrorStatus\nUCERRSET\nmemcfg.h\nMemCfg_forceUncorrErrorStatus\nUCERRCLR\nmemcfg.h\nMemCfg_clearUncorrErrorStatus\nUCCPUREADDR\nmemcfg.c\nMemCfg_getUncorrErrorAddress\nUCDMAREADDR\nmemcfg.c\nMemCfg_getUncorrErrorAddress\nUCCLA1READDR\n-\nCERRFLG\nmemcfg.h\nMemCfg_getCorrErrorStatus\nCERRSET\nmemcfg.h\nMemCfg_forceCorrErrorStatus\nCERRCLR\nmemcfg.h\nMemCfg_clearCorrErrorStatus\nCCPUREADDR\nmemcfg.c\nMemCfg_getCorrErrorAddress\nCERRCNT\nmemcfg.h\nMemCfg_getCorrErrorCount\nCERRTHRES\nmemcfg.h\nMemCfg_setCorrErrorThreshold\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n619\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-412. MEMCFG Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nCEINTFLG\nmemcfg.h\nMemCfg_getCorrErrorInterruptStatus\nCEINTCLR\nmemcfg.h\nMemCfg_clearCorrErrorInterruptStatus\nCEINTSET\nmemcfg.h\nMemCfg_forceCorrErrorInterrupt\nCEINTEN\nmemcfg.h\nMemCfg_enableCorrErrorInterrupt\nmemcfg.h\nMemCfg_disableCorrErrorInterrupt\n3.15.27.6 NMI Registers to Driverlib Functions\nTable 3-413. NMI Registers to Driverlib Functions\nFile\nDriverlib Function\nCFG\nsysctl.h\nSysCtl_enableNMIGlobalInterrupt\nFLG\nsysctl.h\nSysCtl_getNMIStatus\nsysctl.h\nSysCtl_getNMIFlagStatus\nsysctl.h\nSysCtl_isNMIFlagSet\nsysctl.h\nSysCtl_clearNMIStatus\nsysctl.h\nSysCtl_clearAllNMIFlags\nsysctl.h\nSysCtl_forceNMIFlags\nFLGCLR\nsysctl.h\nSysCtl_clearNMIStatus\nsysctl.h\nSysCtl_clearAllNMIFlags\nFLGFRC\nsysctl.h\nSysCtl_forceNMIFlags\nWDCNT\nsysctl.h\nSysCtl_getNMIWatchdogCounter\nWDPRD\nsysctl.h\nSysCtl_setNMIWatchdogPeriod\nsysctl.h\nSysCtl_getNMIWatchdogPeriod\nSHDFLG\nsysctl.h\nSysCtl_getNMIShadowFlagStatus\nsysctl.h\nSysCtl_isNMIShadowFlagSet\n3.15.27.7 PIE Registers to Driverlib Functions\nTable 3-414. PIE Registers to Driverlib Functions\nFile\nDriverlib Function\nCTRL\ninterrupt.c\nInterrupt_initModule\ninterrupt.c\nInterrupt_defaultHandler\ninterrupt.h\nInterrupt_enablePIE\ninterrupt.h\nInterrupt_disablePIE\nACK\nSystem Control and Interrupts\nwww.ti.com\n620\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-414. PIE Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\ninterrupt.c\nInterrupt_disable\ninterrupt.h\nInterrupt_clearACKGroup\nIER1\ninterrupt.c\nInterrupt_initModule\ninterrupt.c\nInterrupt_enable\ninterrupt.c\nInterrupt_disable\nIFR1\ninterrupt.c\nInterrupt_initModule\nIER2\ninterrupt.c\nInterrupt_initModule\nIFR2\ninterrupt.c\nInterrupt_initModule\nIER3\ninterrupt.c\nInterrupt_initModule\nIFR3\ninterrupt.c\nInterrupt_initModule\nIER4\ninterrupt.c\nInterrupt_initModule\nIFR4\ninterrupt.c\nInterrupt_initModule\nIER5\ninterrupt.c\nInterrupt_initModule\nIFR5\ninterrupt.c\nInterrupt_initModule\nIER6\ninterrupt.c\nInterrupt_initModule\nIFR6\ninterrupt.c\nInterrupt_initModule\nIER7\ninterrupt.c\nInterrupt_initModule\nIFR7\ninterrupt.c\nInterrupt_initModule\nIER8\ninterrupt.c\nInterrupt_initModule\nIFR8\ninterrupt.c\nInterrupt_initModule\nIER9\ninterrupt.c\nInterrupt_initModule\nIFR9\ninterrupt.c\nInterrupt_initModule\nIER10\ninterrupt.c\nInterrupt_initModule\nIFR10\ninterrupt.c\nInterrupt_initModule\nIER11\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n621\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-414. PIE Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\ninterrupt.c\nInterrupt_initModule\nIFR11\ninterrupt.c\nInterrupt_initModule\nIER12\ninterrupt.c\nInterrupt_initModule\nIFR12\ninterrupt.c\nInterrupt_initModule\n3.15.27.8 SYSCTL Registers to Driverlib Functions\nTable 3-415. SYSCTL Registers to Driverlib Functions\nFile\nDriverlib Function\nPARTIDL\nsysctl.c\nSysCtl_getDeviceParametric\nPARTIDH\nsysctl.c\nSysCtl_getDeviceParametric\nREVID\nsysctl.h\nSysCtl_getDeviceRevision\nDC21\n-\nFUSEERR\nsysctl.h\nSysCtl_getEfuseError\nSOFTPRES0\nsysctl.h\nSysCtl_resetPeripheral\nSOFTPRES2\n-\nSee SOFTPRES0\nSOFTPRES3\n-\nSee SOFTPRES0\nSOFTPRES4\n-\nSee SOFTPRES0\nSOFTPRES6\n-\nSee SOFTPRES0\nSOFTPRES7\n-\nSee SOFTPRES0\nSOFTPRES8\n-\nSee SOFTPRES0\nSOFTPRES9\n-\nSee SOFTPRES0\nSOFTPRES10\n-\nSee SOFTPRES0\nSOFTPRES13\n-\nSee SOFTPRES0\nSOFTPRES14\n-\nSee SOFTPRES0\nSOFTPRES15\n-\nSee SOFTPRES0\nSystem Control and Interrupts\nwww.ti.com\n622\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nSOFTPRES16\n-\nSee SOFTPRES0\nSOFTPRES17\n-\nSOFTPRES19\n-\nSOFTPRES20\n-\nSOFTPRES40\n-\nTAP_STATUS\n-\nCLKCFGLOCK1\n-\nCLKSRCCTL1\nsysctl.c\nSysCtl_getClock\nsysctl.c\nSysCtl_selectXTAL\nsysctl.c\nSysCtl_selectXTALSingleEnded\nsysctl.c\nSysCtl_selectOscSource\nsysctl.h\nSysCtl_turnOnOsc\nsysctl.h\nSysCtl_turnOffOsc\nsysctl.h\nSysCtl_enableWatchdogInHalt\nsysctl.h\nSysCtl_disableWatchdogInHalt\nCLKSRCCTL2\ncan.h\nCAN_selectClockSource\nCLKSRCCTL3\nsysctl.h\nSysCtl_selectClockOutSource\nSYSPLLCTL1\nsysctl.c\nSysCtl_getClock\nsysctl.c\nSysCtl_setClock\nsysctl.h\nSysCtl_enterHaltMode\nSYSPLLMULT\nsysctl.c\nSysCtl_getClock\nsysctl.c\nSysCtl_setClock\nSYSPLLSTS\nsysctl.c\nSysCtl_setClock\nSYSCLKDIVSEL\nsysctl.c\nSysCtl_getClock\nsysctl.c\nSysCtl_setClock\nsysctl.h\nSysCtl_setPLLSysClk\nXCLKOUTDIVSEL\nsysctl.h\nSysCtl_setXClk\nLOSPCP\nsysctl.c\nSysCtl_getLowSpeedClock\nsysctl.h\nSysCtl_setLowSpeedClock\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n623\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nMCDCR\nsysctl.h\nSysCtl_enableMCD\nsysctl.h\nSysCtl_disableMCD\nsysctl.h\nSysCtl_isMCDClockFailureDetected\nsysctl.h\nSysCtl_resetMCD\nsysctl.h\nSysCtl_connectMCDClockSource\nsysctl.h\nSysCtl_disconnectMCDClockSource\nX1CNT\nsysctl.c\nSysCtl_pollX1Counter\nsysctl.h\nSysCtl_getExternalOscCounterValue\nsysctl.h\nSysCtl_clearExternalOscCounterValue\nXTALCR\nsysctl.c\nSysCtl_selectXTAL\nsysctl.c\nSysCtl_selectXTALSingleEnded\nsysctl.h\nSysCtl_setExternalOscMode\nsysctl.h\nSysCtl_turnOnOsc\nsysctl.h\nSysCtl_turnOffOsc\nCPUSYSLOCK1\n-\nPIEVERRADDR\nsysctl.h\nSysCtl_getPIEVErrAddr\nPCLKCR0\nsysctl.h\nSysCtl_enablePeripheral\nsysctl.h\nSysCtl_disablePeripheral\nPCLKCR2\n-\nSee PCLKCR0\nPCLKCR3\n-\nSee PCLKCR0\nPCLKCR4\n-\nSee PCLKCR0\nPCLKCR6\n-\nSee PCLKCR0\nPCLKCR7\n-\nSee PCLKCR0\nPCLKCR8\n-\nSee PCLKCR0\nPCLKCR9\n-\nSee PCLKCR0\nPCLKCR10\n-\nSee PCLKCR0\nPCLKCR13\n-\nSee PCLKCR0\nPCLKCR14\n-\nSee PCLKCR0\nPCLKCR15\nSystem Control and Interrupts\nwww.ti.com\n624\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\n-\nSee PCLKCR0\nPCLKCR16\n-\nSee PCLKCR0\nPCLKCR17\n-\nPCLKCR18\n-\nPCLKCR19\n-\nPCLKCR20\n-\nPCLKCR21\n-\nLPMCR\nsysctl.h\nSysCtl_enterIdleMode\nsysctl.h\nSysCtl_enterHaltMode\nGPIOLPMSEL0\nsysctl.h\nSysCtl_enableLPMWakeupPin\nsysctl.h\nSysCtl_disableLPMWakeupPin\nGPIOLPMSEL1\nsysctl.h\nSysCtl_enableLPMWakeupPin\nsysctl.h\nSysCtl_disableLPMWakeupPin\nTMR2CLKCTL\ncputimer.h\nCPUTimer_selectClockSource\nsysctl.h\nSysCtl_setCputimer2Clk\nRESCCLR\nsysctl.h\nSysCtl_clearResetCause\nsysctl.h\nSysCtl_clearWatchdogResetStatus\nRESC\nsysctl.h\nSysCtl_getResetCause\nsysctl.h\nSysCtl_clearResetCause\nsysctl.h\nSysCtl_getWatchdogResetStatus\nsysctl.h\nSysCtl_clearWatchdogResetStatus\nSCSR\nsysctl.h\nSysCtl_setWatchdogMode\nsysctl.h\nSysCtl_isWatchdogInterruptActive\nsysctl.h\nSysCtl_clearWatchdogOverride\nWDCNTR\nsysctl.h\nSysCtl_getWatchdogCounterValue\nWDKEY\nsysctl.h\nSysCtl_serviceWatchdog\nsysctl.h\nSysCtl_enableWatchdogReset\nsysctl.h\nSysCtl_resetWatchdog\nWDCR\nsysctl.h\nSysCtl_resetDevice\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n625\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nsysctl.h\nSysCtl_disableWatchdog\nsysctl.h\nSysCtl_enableWatchdog\nsysctl.h\nSysCtl_isWatchdogEnabled\nsysctl.h\nSysCtl_setWatchdogPredivider\nsysctl.h\nSysCtl_setWatchdogPrescaler\nWDWCR\nsysctl.h\nSysCtl_setWatchdogWindowValue\nCLA1TASKSRCSELLOCK\n-\nDMACHSRCSELLOCK\n-\nCLA1TASKSRCSEL1\ncla.c\nCLA_setTriggerSource\nCLA1TASKSRCSEL2\ncla.c\nCLA_setTriggerSource\nDMACHSRCSEL1\ndma.c\nDMA_configMode\nDMACHSRCSEL2\ndma.c\nDMA_configMode\nADCA_AC\n-\nADCB_AC\n-\nADCC_AC\n-\nCMPSS1_AC\n-\nCMPSS2_AC\n-\nCMPSS3_AC\n-\nCMPSS4_AC\n-\nCMPSS5_AC\n-\nCMPSS6_AC\n-\nCMPSS7_AC\n-\nDACA_AC\n-\nDACB_AC\n-\nPGA1_AC\n-\nSystem Control and Interrupts\nwww.ti.com\n626\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\nPGA2_AC\n-\nPGA3_AC\n-\nPGA4_AC\n-\nPGA5_AC\n-\nPGA6_AC\n-\nPGA7_AC\n-\nEPWM1_AC\n-\nEPWM2_AC\n-\nEPWM3_AC\n-\nEPWM4_AC\n-\nEPWM5_AC\n-\nEPWM6_AC\n-\nEPWM7_AC\n-\nEPWM8_AC\n-\nEQEP1_AC\n-\nEQEP2_AC\n-\nECAP1_AC\n-\nECAP2_AC\n-\nECAP3_AC\n-\nECAP4_AC\n-\nECAP5_AC\n-\nECAP6_AC\n-\nECAP7_AC\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n627\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nTable 3-415. SYSCTL Registers to Driverlib Functions (continued)\nFile\nDriverlib Function\n-\nSDFM1_AC\n-\nCLB1_AC\n-\nCLB2_AC\n-\nCLB3_AC\n-\nCLB4_AC\n-\nCLA1PROMCRC_AC\n-\nSPIA_AC\n-\nSPIB_AC\n-\nPMBUS_A_AC\n-\nLIN_A_AC\n-\nDCANA_AC\n-\nDCANB_AC\n-\nFSIATX_AC\n-\nFSIARX_AC\n-\nHRPWM_A_AC\n-\nPERIPH_AC_LOCK\nsysctl.h\nSysCtl_lockAccessControlRegs\nSYNCSELECT\nsysctl.h\nSysCtl_setSyncInputConfig\nsysctl.h\nSysCtl_setSyncOutputConfig\nADCSOCOUTSELECT\nsysctl.h\nSysCtl_enableExtADCSOCSource\nsysctl.h\nSysCtl_disableExtADCSOCSource\nSYNCSOCLOCK\nsysctl.h\nSysCtl_lockExtADCSOCSelect\nsysctl.h\nSysCtl_lockSyncSelect\nSystem Control and Interrupts\nwww.ti.com\n628\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n3.15.27.9 XINT Registers to Driverlib Functions\nTable 3-416. XINT Registers to Driverlib Functions\nFile\nDriverlib Function\n1CR\ngpio.c\nGPIO_setInterruptPin\ngpio.h\nGPIO_setInterruptType\ngpio.h\nGPIO_getInterruptType\ngpio.h\nGPIO_enableInterrupt\ngpio.h\nGPIO_disableInterrupt\ngpio.h\nGPIO_getInterruptCounter\n2CR\n-\nSee 1CR\n3CR\n-\nSee 1CR\n4CR\n-\nSee 1CR\n5CR\n-\nSee 1CR\n1CTR\ngpio.h\nGPIO_getInterruptCounter\n2CTR\n-\n3CTR\n-\nwww.ti.com\nSystem Control and Interrupts\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n629\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nThis chapter explains the boot procedure, the available boot modes, and the various details of the ROM code \nincluding memory maps, initializations, reset handling, and status information.\nFurther information about the boot-loading process can be found in the TMS320F28004x Boot Features and \nConfigurations Application Report.\n4.1 Introduction...............................................................................................................................................................631\n4.2 Device Boot Sequence.............................................................................................................................................631\n4.3 Device Boot Modes.................................................................................................................................................. 632\n4.4 Device Boot Flow Diagrams.................................................................................................................................... 635\n4.5 Device Reset and Exception Handling................................................................................................................... 639\n4.6 Boot ROM Description............................................................................................................................................. 640\n4.7 The C2000 Hex Utility...............................................................................................................................................667\nChapter 4 \nROM Code and Peripheral Booting\nROM Code and Peripheral Booting\nwww.ti.com\n630\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.1 Introduction\nThe purpose of this chapter is to explain the boot ROM code functionality including the boot procedure when \nexecuted, the functions and features of the boot ROM code, and to detail the ROM memory-map contents. \nOn every reset, the device executes a boot sequence in the ROM depending on the reset type and boot \nconfiguration. This sequence initializes the device to run application code. The boot ROM also contains \nperipheral bootloaders that can be used to load an application into RAM.\nTable 4-1. ROM Memory\nROM\nSize\nUnsecure boot ROM\n128KB\nSecure ROM\n64KB\nCLA Data ROM\n8KB\n \n4.2 Device Boot Sequence\nThe boot sequence (Table 4-2) describes the general boot ROM procedure each time the CPU core is reset. \nDuring booting, the boot ROM code updates a boot status location in RAM that details the actions taken during \nthis process.\nRefer to Section 4.6.13 for more details on the boot status information.\nTable 4-2. Boot ROM Sequence\nStep\nAction\n1\nAfter reset, the FUSE error register is checked for any errors and are handled accordingly.\n2\nClock and Flash configuration.\n3\nDevice configuration registers are programmed from OTP.\n4\nOn power-on reset (POR), all CPU RAMs are initialized. RAM initialization includes the following RAMs:\n\u2022\nM0, M1\n\u2022\nLS0 to LS7\n\u2022\nGS0 to GS3\n\u2022\nCLA1TOCPUMSGRAM, CPUTOCLA1MSGRAM\n5\nAny pending NMI is handled by the code.\n6\nThe DCSM sequences are executed. (Refer to Section 4.6.11 for details on how boot ROM interprets the OTP data \nafter initialization)\n7\nDevice calibration is performed, trimming the specified peripherals with set OTP values.\n8\nThe boot mode GPIO pins are polled to determine whether to boot from SRAM, Flash, or peripherals.\n9\nBased on the boot mode and options, the appropriate boot sequence is executed.\nRefer to Section 4.4 for a flow diagram of the device boot sequence and the emulation and standalone boot modes.\n \nwww.ti.com\nROM Code and Peripheral Booting\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n631\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.3 Device Boot Modes\nThis section explains the boot modes supported on this device. The boot ROM uses the boot control GPIO pins \nto determine the boot mode configuration. The device can be configured to boot to RAM, boot to Flash, execute \na bootloader, or hold in a wait mode.\nTable 4-3 shows the default boot mode options. Users have the option to customize the boot modes supported \nas well as the boot mode select pins.\nTable 4-3. Device Default Boot Modes\nBoot Mode\nGPIO24\n(Default boot mode select pin 1)\nGPIO32\n(Default boot mode select pin 0)\nParallel IO\n0\n0\nSCI / Wait boot\n0\n1\nCAN\n1\n0\nFlash\n1\n1\n \nTable 4-4. All Available Boot Modes\nBoot Mode Number\nBoot Mode\n0\nParallel IO\n1\nSCI / Wait boot\n2\nCAN\n3\nFlash\n4\nWait\n5\nRAM\n6\nSPI Master\n7\nI2C Master\nNote\nAll the peripheral boot modes supported use the first instance of the peripheral module (SCIA, SPIA, \nI2CA, CANA, and so forth). Whenever these boot modes are referred to in this chapter, such as SCI \nboot, the mode is actually referring to the first module instance, meaning SCI boot on the SCIA port. \nThe same applies to the other peripheral boots.\n \nROM Code and Peripheral Booting\nwww.ti.com\n632\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.3.1 Configuring Alternate Boot Mode Pins\nThis section explains how the boot mode select pins can be customized by programming the \nBOOTPIN_CONFIG location in the user-configurable DCSM OTP. The location in the DCSM OTP is Z1-\nOTP-BOOTPIN-CONFIG. When debugging, EMU-BOOTPIN-CONFIG is the emulation equivalent of Z1-OTP-\nBOOTPIN-CONFIG and can be programmed to experiment with different boot modes without writing to OTP. \nThe device can be programmed to use 0, 1, 2, or 3 boot mode select pins as needed.\nTable 4-5. BOOTPIN_CONFIG Bit Fields\nBit\nName\nDescription\n31-24\nKey\nWrite 0x5A to these 8-bits to indicate to the boot ROM code that the bits in this register \nare valid\n23-16\nBoot Mode Select Pin 2 (BMSP2)\nRefer to BMSP0 description except for BMSP2\n15-8\nBoot Mode Select Pin 1 (BMSP1)\nRefer to BMSP0 description except for BMSP1\n7-0\nBoot Mode Select Pin 0 (BMSP0)\nSet to the GPIO pin to be used during boot (up to 255).\n0x00 = GPIO0\n0x01 = GPIO1\n\u2026\n0xFF is invalid and selects the factory default chosen BMSP0, if all other BMSPs are \nalso set to 0xFF.\nIf any other BMSPs are not set to 0xFF, then setting a BMSP to 0xFF disables that \nparticular BMSP.\nNote\nThe following GPIOs cannot be used as a BMSP. If selected for a particular BMSP, the boot ROM \nautomatically selects the factory default GPIO (the factory default for BMSP2 is 0xFF, which disables \nthe BMSP).\n\u2022\nGPIO 20 to 23\n\u2022\nGPIO 36\n\u2022\nGPIO 38\n\u2022\nGPIO 60 to 223\nTable 4-6. Standalone Boot Mode Select Pin Decoding\nBOOTPIN_CONFIG Key\nBMSP0\nBMSP1\nBMSP2\nRealized Boot Mode\n!= 0x5A\nDon\u2019t Care\nDon\u2019t Care\nDon\u2019t Care\nBoot as defined by the factory default BMSPs\n(GPIO24, GPIO32)\n= 0x5A\n0xFF\n0xFF\n0xFF\nBoot as defined in the boot table for boot mode 0\n(All BMSPs disabled)\nValid GPIO\n0xFF\n0xFF\nBoot as defined by the value of BMSP0\n(BMSP1 and BMSP2 disabled)\n0xFF\nValid GPIO\n0xFF\nBoot as defined by the value of BMSP1\n(BMSP0 and BMSP2 disabled)\n0xFF\n0xFF\nValid GPIO\nBoot as defined by the value of BMSP2\n(BMSP0 and BMSP1 disabled)\nValid GPIO\nValid GPIO\n0xFF\nBoot as defined by the values of BMSP0 and BMSP1\n(BMSP2 disabled)\nValid GPIO\n0xFF\nValid GPIO\nBoot as defined by the values of BMSP0 and BMSP2\n(BMSP1 disabled)\n0xFF\nValid GPIO\nValid GPIO\nBoot as defined by the values of BMSP1 and BMSP2\n(BMSP0 disabled)\nValid GPIO\nValid GPIO\nValid GPIO\nBoot as defined by the values of BMSP0, BMSP1, and BMSP2\nwww.ti.com\nROM Code and Peripheral Booting\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n633\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.3.2 Configuring Alternate Boot Mode Options\nThis section explains how to configure the boot definition table, BOOTDEF, for the device and the associated \nboot options. The 64-bit location is located in the user-configurable DCSM OTP in the Z1-OTP-BOOTDEF-\nLOW and Z1-OTP-BOOTDEF-HIGH locations. When debugging, EMU-BOOTDEF-LOW and EMU-BOOTDEF-\nHIGH are the emulation equivalents of Z1-OTP-BOOTDEF-LOW and Z1-OTP-BOOTDEF-HIGH and can be \nprogrammed to experiment with different boot mode options without writing to OTP. The range of customization \nto the boot definition table depends on how many boot mode select pins are being used. Refer to Section 4.3.3 \nfor examples on how to use the BOOTPIN_CONFIG and BOOTDEF values.\nTable 4-7. BOOTDEF Bit Fields\nBOOTDEF Name\nByte Position\nName\nDescription\nBOOT_DEF0\n7-0\nBOOT_DEF0 Mode/Options\nSet the boot mode and boot mode options. This \ncan include changing the GPIOs for a particular boot \nperipheral or specifying a different Flash entry point. Any \nunsupported boot mode causes the device to reset.\nRefer to Section 4.6.9 for valid BOOTDEF values.\nBOOT_DEF1\n15-8\nBOOT_DEF1 Mode/Options\nRefer to BOOT_DEF0 description\nBOOT_DEF2\n23-16\nBOOT_DEF2 Mode/Options\nBOOT_DEF3\n31-24\nBOOT_DEF3 Mode/Options\nBOOT_DEF4\n39-32\nBOOT_DEF4 Mode/Options\nBOOT_DEF5\n47-40\nBOOT_DEF5 Mode/Options\nBOOT_DEF6\n55-48\nBOOT_DEF6 Mode/Options\nBOOT_DEF7\n63-56\nBOOT_DEF7 Mode/Options\n \n4.3.3 Boot Mode Example Use Cases\nThis section demonstrates some use cases for configuring the boot mode select pins.\n4.3.3.1 Zero Boot Mode Select Pins\nThis use case demonstrates a scenario for an application that does not use any boot mode select pins and \nalways has the device boot to Flash.\n1.\nProgram the BOOTPIN_CONFIG location in OTP as follows:\n\u2022\nSet BOOTPIN_CONFIG.BMSP0 to 0xFF\n\u2022\nSet BOOTPIN_CONFIG.BMSP1 to 0xFF\n\u2022\nSet BOOTPIN_CONFIG.BMSP2 to 0xFF\n\u2022\nSet BOOTPIN_CONFIG.KEY to 0x5A for boot ROM to treat these register bits as valid.\n2.\nProgram the BOOTDEF location options for the device. This essentially sets up a device-specific boot mode \ntable.\n\u2022\nSet BOOTDEF.BOOTDEF0 to 0x03 for booting to Flash with a boot mode value of 0\n\u2022\nOptionally: Set BOOTDEF.BOOT_DEF0_ALT_OPTIONS to a different value to switch to one of the \navailable Flash entry point alternatives.\nTable 4-8. Zero Boot Pin Boot Table Result\nBoot Mode Number\nBoot Mode\n0\nFlash Boot (0x03)\nRefer to Section 4.6.3 for the available alternative entry point addresses.\n \nROM Code and Peripheral Booting\nwww.ti.com\n634\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.3.3.2 One Boot Mode Select Pin\nThis use case demonstrates a scenario for an application using one boot mode select pin to select between \nbooting to Flash or using CAN boot.\n1.\nProgram the BOOTPIN_CONFIG location in OTP as follows:\n\u2022\nSet BOOTPIN_CONFIG.BMSP0 to a user specified GPIO, such as 0x0 for GPIO0\n\u2022\nSet BOOTPIN_CONFIG.BMSP1 to 0xFF\n\u2022\nSet BOOTPIN_CONFIG.BMSP2 to 0xFF\n\u2022\nSet BOOTPIN_CONFIG.KEY to 0x5A for boot ROM to treat these register bits as valid.\n2.\nProgram the BOOTDEF location options for the device. This essentially sets up a device-specific boot mode \ntable.\n\u2022\nSet BOOTDEF.BOOTDEF0 to 0x02 for CAN booting with a boot mode value of 0\n\u2022\nSet BOOTDEF.BOOTDEF1 to 0x03 for booting to Flash with a boot mode value of 1\n\u2022\nOptionally: Set BOOTDEF.BOOT_DEF1_ALT_OPTIONS to a different value to switch to one of the \navailable Flash entry point alternatives.\nTable 4-9. One Boot Pin Boot Table Result\nBoot Mode Number\nBoot Mode\n0\nCAN Boot (0x02)\n1\nFlash Boot (0x03)\nRefer to Section 4.6.3 for the available alternative entry point addresses.\n \n4.4 Device Boot Flow Diagrams\nFigure 4-1 shows the device boot flow detailing the actions executed by boot ROM after a reset.\nwww.ti.com\nROM Code and Peripheral Booting\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n635\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\nFigure 4-1. Device Boot Flow\nROM Code and Peripheral Booting\nwww.ti.com\n636\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.4.1 Emulation Boot Flow Diagram\nFigure 4-2 shows the device boot flow when running the device in emulation mode.\nEmulation Boot Mode Start\nRead EMU boot locations:\nEMU_BOOTPIN_CONFIG\nEMU_BOOTDEF_LOW\nEMU_BOOTDEF_HIGH\nCheck\nEMU_BOOTPIN_\nCONFIG_KEY\nEmulate\nStandalone\nBoot\nWait\nBoot\nGet EMU Configurable user boot\nmode options\nRead Boot Mode Select Pins\nfrom BOOTPINCONFIG and set\nGPIO state\nDecode BOOTDEF options for\nboot mode\nIs the boot mode\nset to flash?\nStart the peripheral loader\nprocess\nBranch to\nApplication\nCode\nWait Boot\nDecode flash BOOTDEF options\nBranch to\nFlash Entry\nPoint\n(=0xA5)\nUnsupported\nKey\n(=0x5A)\nSupported\nBoot\nmode\nUnsupported\nBoot\nmode\nYes\nFigure 4-2. Emulation Boot Flow\nwww.ti.com\nROM Code and Peripheral Booting\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nTMS320F28004x Real-Time Microcontrollers\n637\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n4.4.2 Standalone Boot Flow Diagram\nFigure 4-3 shows the device boot flow when running the device in standalone boot mode.\nStandalone Boot Mode Start\nRead OTP loaded registers:\nZ1-BOOTPINCONFIG\nZ1-BOOTDEF\nCheck\nOTP_BOOTPIN_C\nONFIG_KEY\nGet OTP Configurable user boot\nmode options\nRead Boot Mode Select Pins\nfrom BOOTPINCONFIG and set\nGPIO state\nDecode BOOTDEF options for\nboot mode\nIs the boot mode\nset to flash?\nStart the peripheral loader\nprocess\nBranch to\nApplication\nCode\nFlash Boot\nDecode flash BOOTDEF options\nBranch to\nFlash Entry\nPoint\nAny\nOther\nValue\n(=0x5A)\nSupported\nBoot\nmode\nUnsupported\nBoot\nmode\nYes\nRead factory default two boot\nmode GPIO pins\nDecode boot mode from pins\nExecute one of the following:\nParallel Boot\nSCI Boot\nCAN Boot\nFlash Boot\nBranch to\nApplication\nCode\nFigure 4-3. Standalone Boot Flow\nROM Code and Peripheral Booting\nwww.ti.com\n638\nTMS320F28004x Real-Time Microcontrollers\nSPRUI33H \u2013 NOVEMBER 2015 \u2013 REVISED JUNE 2024\nSubmit Document Feedback\nCopyright \u00a9 2024 Texas Instruments Incorporated\n\n\n",
    "entities": {
      "error_conditions": [
        "Uncorrectable error occurred during CPU read",
        "Uncorrectable error occurred during DMA read",
        "Uncorrectable error occurred during CLA1 read",
        "Correctable error occurred during CPU read",
        "Correctable error occurred during DMA read",
        "Correctable error occurred during CLA1 read",
        "Single bit error",
        "Uncorrectable error",
        "ECC/Parity error",
        "Program verify error",
        "Erase verify error",
        "Invalid data error",
        "Command status error",
        "Core voltage status error",
        "Erase suspend error",
        "Program suspend error",
        "Single bit ECC error",
        "Uncorrectable bit error",
        "Double bit error"
      ],
      "status_indicators": [
        "CPURDERR = 1",
        "DMARDERR = 1",
        "CLA1RDERR = 1",
        "UNC_ERR_H = 1",
        "UNC_ERR_L = 1",
        "FAIL_1_H = 1",
        "FAIL_0_H = 1",
        "FAIL_1_L = 1",
        "FAIL_0_L = 1",
        "SINGLE_ERR = 1",
        "UNC_ERR = 1",
        "ERR_TYPE = 1",
        "BUSY = 1",
        "ERS = 1",
        "PGM = 1",
        "INVDAT = 1",
        "CSTAT = 1",
        "VOLTSTAT = 1",
        "ESUSP = 1",
        "PSUSP = 1",
        "PGV = 1",
        "EV = 1",
        "PUMPRDY = 1",
        "BANK0RDY = 1",
        "BANK1RDY = 1",
        "ENABLE = 0xA",
        "CEINTFLAG = 1",
        "SINGLE_ERR_INTFLG = 1",
        "UNC_ERR_INTFLG = 1"
      ],
      "components": [
        "CPU",
        "DMA controller",
        "CLA1",
        "Flash memory",
        "ECC logic",
        "Flash pump",
        "Flash banks",
        "Sense amplifiers",
        "Sense reference",
        "Charge pump",
        "Flash module",
        "Core voltage generator",
        "Data cache",
        "Prefetch mechanism",
        "Flash read interface"
      ],
      "root_causes": [
        "CPU read/fetch access resulted in uncorrectable ECC/Parity error",
        "DMA read access resulted in uncorrectable Parity error",
        "CLA1 read/fetch access resulted in uncorrectable Parity error",
        "CPU read/fetch access resulted in correctable ECC error",
        "DMA read access resulted in correctable error",
        "CLA1 read access resulted in correctable error",
        "Maximum allowed number of program pulses exceeded",
        "Maximum allowed number of erase pulses exceeded",
        "Attempted to program '1' where '0' was already present",
        "Core voltage generator dipped below lower limit",
        "Single bit error in data bits",
        "Single bit error in ECC check bits",
        "Total correctable errors exceeded threshold value"
      ],
      "solutions": [
        "Write 1 to CPURDERR bit in UCERRCLR register",
        "Write 1 to DMARDERR bit in UCERRCLR register",
        "Write 1 to CLA1RDERR bit in UCERRCLR register",
        "Write 1 to UNC_ERR_H_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to UNC_ERR_L_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to FAIL_1_H_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to FAIL_0_H_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to FAIL_1_L_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to FAIL_0_L_CLR bit in ERR_STATUS_CLR register",
        "Write 1 to CEINTCLR bit in CEINTCLR register",
        "Write 1 to SINGLE_ERR_INTCLR bit in ERR_INTCLR register",
        "Write 1 to UNC_ERR_INTCLR bit in ERR_INTCLR register",
        "Wait for both pump and bank to be ready before attempting access",
        "Check PUMPRDY and BANKxRDY status before flash access",
        "Configure RWAIT value based on SYSCLK frequency",
        "Set ECC_ENABLE to 0xA to enable ECC",
        "Configure error threshold using ERR_THRESHOLD register",
        "Enable correctable error interrupt using CEINTEN register",
        "Clear error status using appropriate clear registers",
        "Run Clear Status command",
        "Issue erase resume command",
        "Issue program resume command",
        "Run Clear_More command"
      ]
    },
    "relationships": {}
  },
  {
    "title": "7.19 Emulation and Debug",
    "source_text": "7.17 TIMx\nover operating free-air temperature range (unless otherwise noted)\nPARAMETERS\nTEST CONDITIONS\nMIN\nTYP\nMAX\nUNIT\ntres\nTimer resolution time\nfTIMxCLK = 24MHz\n41.67\nns\n1\ntTIMxCLK\ntres\nTimer resolution time\nTIMx with 16bit counter\n16\nbit\n7.18 Windowed Watchdog Characteristics\nover operating free-air temperature range (unless otherwise noted)\nPARAMETER\nTEST CONDITIONS\nMIN\nTYP\nMAX\nUNIT\nWWDTFREQ\nWWDT operating frequency\n32.768\nkHz\nWWDTTstart\nWWDT counter start time\nWrite to WWDTCTL0 until WWDT \ncounter starts (WWDTFREQ = \n32.768kHz)\n30.5\n\u00b5s\nWWDTTrestart\nWWDT counter restart time\nWrite to WWDTCNTRST until WWDT \ncounter restarts (WWDTFREQ = \n32.768kHz)\n30.5\n\u00b5s\n7.19 Emulation and Debug\n7.19.1 SWD Timing\nover operating free-air temperature range (unless otherwise noted)\nPARAMETER\nTEST CONDITIONS\nMIN\nTYP\nMAX\nUNIT\nfSWD\nSWD frequency\n10\nMHz\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n25\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n8 Detailed Description\nThe following sections describe all of the components that make up the devices in this data sheet. The \nperipherals integrated into these devices are configured by software through Memory Mapped Registers \n(MMRs). For more details, see the corresponding chapter of the MSPM0 C-Series 24MHz Microcontrollers \nTechnical Reference Manual.\n8.1 CPU\nThe CPU subsystem (MCPUSS) implements an Arm Cortex-M0+ CPU, a system timer, and interrupt \nmanagement features. The Arm Cortex-M0+ is a cost-optimized 32-bit CPU that delivers high performance \nand low power to embedded applications. Key features of the CPU Sub System include:\n\u2022\nArm Cortex-M0+ CPU supports clock frequencies from 32kHz to 24MHz\n\u2013\nARMv6-M Thumb instruction set (little endian) with 32-cycle 32x32 slow multiply instruction\n\u2022\nNested vectored interrupt controller (NVIC) with 4 programmable priority levels and tail chaining\n8.2 Operating Modes\nMSPM0C MCUs provide five main operating modes (power modes) to allow for optimization of the device power \nconsumption based on application requirements. In order of decreasing power, the modes are: RUN, SLEEP, \nSTOP, STANDBY, and SHUTDOWN. The CPU is active executing code in RUN mode. Peripheral interrupt \nevents can wake the device from SLEEP, STOP, or STANDBY mode to the RUN mode. SHUTDOWN mode \ncompletely disables the internal core regulator to minimize power consumption, and wake is only possible via \nNRST or SWD. RUN, SLEEP, STOP, and STANDBY modes also include several configurable policy options (for \nexample, RUN.x) for balancing performance with power consumption.\nTo further balance performance and power consumption, MSPM0C devices implement two power domains: PD1 \n(for the CPU, memories, and high performance peripherals), and PD0 (for low speed, low power peripherals).\n\u2022\nPD1 is always powered in RUN and SLEEP modes, but is disabled in all other modes.\n\u2022\nPD0 is always powered in RUN, SLEEP, STOP, and STANDBY modes.\n\u2022\nPD1 and PD0 are both disabled in SHUTDOWN mode.\n8.2.1 Functionality by Operating Mode (MSPM0C110x)\nTable 8-1 lists the supported functionality in each operating mode.\nFunctional key:\n\u2022\nEN: The function is enabled in the specified mode.\n\u2022\nDIS: The function is disabled (either clock or power gated) in the specified mode, but the function's \nconfiguration is retained.\n\u2022\nOPT: The function is optional in the specified mode, and remains enabled if configured to be enabled.\n\u2022\nNS: The function is not automatically disabled in the specified mode, but use of the function is not supported.\n\u2022\nOFF: The function is fully powered off in the specified mode, and no configuration information is retained.\nTable 8-1. Supported Functionality by Operating Mode\nOperating Mode\nRUN\nSLEEP\nSTOP\nSTANDBY\nSHUTDOWN\nRUN0\nRUN1\nRUN2\nSLEEP0\nSLEEP1\nSLEEP2\nSTOP0\nSTOP2\nSTANDBY0\nSTANDBY1\nOscillators\nSYSOSC\nEN\nEN\nDIS\nEN\nEN\nDIS\nOPT(1)\nDIS\nDIS\nDIS\nOFF\nLFOSC\nEN\nOFF\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n26\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nTable 8-1. Supported Functionality by Operating Mode (continued)\nOperating Mode\nRUN\nSLEEP\nSTOP\nSTANDBY\nSHUTDOWN\nRUN0\nRUN1\nRUN2\nSLEEP0\nSLEEP1\nSLEEP2\nSTOP0\nSTOP2\nSTANDBY0\nSTANDBY1\nClocks\nCPUCLK\n24M\n32k\n32k\nDIS\nOFF\nMCLK to PD1\n24M\n32k\n32k\n24M\n32k\n32k\nDIS\nOFF\nULPCLK to PD0\n24M\n32k\n32k\n24M\n32k\n32k\n4M(1)\n32k\nDIS\nOFF\nULPCLK to \nTIMG14, TIMG8\n24M\n32k\n32k\n24M\n32k\n32k\n4M(1)\n32k\nOFF\nMFCLK\nOPT\nDIS\nOPT\nDIS\nOPT\nDIS\nOFF\nLFCLK\n32k\nDIS\nOFF\nLFCLK to \nTIMG14, TIMG8\n32k\nOFF\nMCLK Monitor\nOPT\nDIS\nOFF\nPMU\nPOR Monitor\nEN\nBOR Monitor\nEN\nOFF\nCore Regulator\nFull drive\nLow drive\nOFF\nCore Functions\nCPU\nEN\nDIS\nOFF\nDMA\nOPT\nNS (triggers supported)\nOFF\nFlash\nEN\nOPT\nDIS\nOFF\nSRAM\nEN\nOPT\nDIS\nOFF\nPD1 Peripherals\nSPI0\nOPT\nDIS\nOFF\nCRC\nOPT\nDIS\nOFF\nPD0 Peripherals\nTIMA0\nOPT\nOFF\nTIMG8\nOPT\nOFF\nTIMG14\nOPT\nOFF\nUART0\nOPT\nOPT(2)\nOFF\nI2C0\nOPT\nOPT(2)\nOFF\nGPIOA\nOPT\nOPT(2)\nOFF\nWWDT0\nOPT\nDIS\nOFF\nAnalog\nADC0\nOPT\nNS (triggers supported)\nOFF\nVREF\nOPT\nNS\nOFF\nIOMUX and IO Wakeup\nEN\nDIS\nWake Sources\nN/A\nANY IRQ\nPD0 IRQ\nNRST, \nSWD\n(1)\nIf STOP0 is entered from RUN1 (SYSOSC enabled but MCLK sourced from LFCLK), SYSOSC remains enabled as it was in RUN1, \nand ULPCLK remains at 32kHz as it was in RUN1. If STOP0 is entered from RUN2 (SYSOSC was disabled and MCLK was sourced \nfrom LFCLK), SYSOSC remains disabled as it was in RUN2, and ULPCLK remains at 32kHz as it was in RUN2.\n(2)\nWhen using the STANDBY1 policy for STANDBY, only TIMG8, TIMG14 and TIMA0 are clocked. Other PD0 peripherals can generate \nan asynchronous fast clock request upon external activity but are not actively clocked.\n8.3 Power Management Unit (PMU)\nThe power management unit (PMU) generates the internally regulated core supplies for the device and provides \nsupervision of the external supply (VDD). The PMU also contains the bandgap voltage reference used by the \nPMU itself as well as analog peripherals. Key features of the PMU include:\n\u2022\nPower-on reset (POR) supply monitor\n\u2022\nBrown-out reset (BOR) supply monitor with early warning capability using three programmable thresholds\n\u2022\nCore regulator with support for RUN, SLEEP, STOP, and STANDBY operating modes to dynamically balance \nperformance with power consumption\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n27\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n\u2022\nParity-protected trim to immediately generate a power-on reset (POR) in the event that a power management \ntrim is corrupted\nFor more details, see the PMU chapter of the MSPM0 C-Series 24MHz Microcontrollers Technical Reference \nManual.\n8.4 Clock Module (CKM)\nThe clock module provides the following oscillators:\n\u2022\nLFOSC: Internal low-frequency oscillator (32kHz)\n\u2022\nSYSOSC: Internal high-frequency oscillator (24MHz)\n\u2022\nLFCKIN : low-frequency digital clock input (32KHz)\n\u2022\nHFCKIN: high-frequency digital clock input (4 to 24MHz)\nThe following clocks are distributed by the clock module for use by the processor, bus, and peripherals:\n\u2022\nMCLK: Main system clock for PD1 peripherals, derived from SYSOSC or LFCLK, active in RUN and SLEEP \nmodes\n\u2022\nCPUCLK: Clock for the processor (derived from MCLK), active in RUN mode\n\u2022\nULPCLK: Ultra-low power clock for PD0 peripherals, active in RUN, SLEEP, STOP, and STANDBY modes\n\u2022\nMFCLK: 4MHz fixed mid-frequency clock for peripherals, available in RUN, SLEEP, and STOP modes\n\u2022\nLFCLK: 32kHz fixed low-frequency clock for peripherals or MCLK, active in RUN, SLEEP, STOP, and \nSTANDBY modes\n\u2022\nADCCLK: ADC clock, available in RUN, SLEEP and STOP modes\n\u2022\nCLK_OUT: Used to output a clock externally, available in RUN, SLEEP, STOP, and STANDBY modes\nFor more details, see the CKM chapter of the MSPM0 C-Series 24MHz Microcontrollers Technical Reference \nManual.\n8.5 DMA\nThe direct memory access (DMA) controller allows movement of data from one memory address to another \nwithout CPU intervention. For example, the DMA can be used to move data from ADC conversion memory \nto SRAM. The DMA reduces system power consumption by allowing the CPU to remain in low power mode, \nwithout having to awaken to move data to or from a peripheral.\nThe DMA in these devices support the following key features:\n\u2022\n1 DMA transfer channel\n\u2022\nDirect peripheral to DMA trigger is supported only from ADC.\n\u2022\nByte (8-bit), short word (16-bit), word (32-bit) and long word (64-bit) or mixed byte and word transfer \ncapability\n\u2022\nTransfer counter block size supports up to 64k transfers of any data type\n\u2022\nConfigurable DMA transfer trigger selection\nTable 8-2 lists the available triggers for the DMA which are configured using the DMATCTL.DMATSEL control \nbits in the DMA memory mapped registers.\nTable 8-2. DMA Trigger Mapping\nTRIGGER 0:6\nSOURCE\n0\nSoftware\n1\nGeneric Subscriber 0 (FSUB_0)\n2\nGeneric Subscriber 1 (FSUB_1)\n3\nADC0 Publisher 2\n8.6 Events\nThe event manager transfers digital events from one entity (for example, a peripheral) to another (for example, \na second peripheral, the DMA or the CPU). The event manager implements event transfer through a defined \nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n28\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nset of event publishers (generators) and subscribers (receivers) that are interconnected through an event fabric \ncontaining a combination of static and programmable routes.\nEvents that are transferred by the event manager include:\n\u2022\nPeripheral event transferred to the CPU as an interrupt request (IRQ) (Static Event)\n\u2013\nExample: GPIO interrupt is sent to the CPU\n\u2022\nPeripheral event transferred to the DMA as a DMA trigger (DMA Event)\n\u2013\nExample: ADC trigger to DMA to request a DMA transfer\n\u2022\nPeripheral event transferred to another peripheral to directly trigger an action in hardware (Generic Event)\n\u2013\nExample: TIMx timer peripheral publishes a periodic event to the ADC subscriber port, and the ADC uses \nthe event to trigger start-of-sampling\nFor more details, see the Event chapter of the MSPM0 C-Series 24MHz Microcontrollers Technical Reference \nManual.\nTable 8-3. Generic Event Channels\nA generic route is a point-to-point (1:1) route in which the peripheral publishing the event is configured to use the available \ngeneric route channel to publish the event to another entity. An entity can be another peripheral, a generic DMA trigger event, \nor a generic CPU event.\nCHANID\nGeneric Route Channel Selection\nChannel Type\n0\nNo generic event channel selected\nN/A\n1\nGeneric event channel 1 selected\n1 : 1\n8.7 Memory\n8.7.1 Memory Organization\nTable 8-4 summarizes the memory map of the devices. For more information about the memory region detail, \nsee the Platform Memory Map section in the MSPM0 C-Series 24MHz Microcontrollers Technical Reference \nManual.\nTable 8-4. Memory Organization\nMemory Region\nSubregion\nMSPM0C1103, MSPS003F3\nMSPM0C1104, MSPS003F4\nCode (Flash)\nFlash\n8KB(1)\n0x0000.0000 to 0x0000.1FFF\n16KB(1)\n0x0000.0000 to 0x0000.3FFF\nSRAM (SRAM)\nSRAM\n1KB\n0x2000.0000 to 0x2000.03FF\n1KB\n0x2000.0000 to 0x2000.03FF\nPeripheral\nPeripherals\n0x4000.0000 to 0x40FF.FFFF\n0x4000.0000 to 0x40FF.FFFF\nFlash\n0x0040.0000 to 0x0040.1FFF\n0x0040.0000 to 0x0040.3FFF\nConfiguration NVM\n512 bytes\n0x41C0.0000 to 0x41C0.0200\n512 bytes\n0x41C0.0000 to 0x41C0.0200\nFACTORY\n0x41C4.0000 to 0x41C4.0080\n0x41C4.0000 to 0x41C4.0080\nSubsystem\n0x6000.0000 to 0x7FFF.FFFF\n0x6000.0000 to 0x7FFF.FFFF\nSystem PPB\n0xE000.0000 to 0xE00F.FFFF\n0xE000.0000 to 0xE00F.FFFF\n(1)\nUp to 100000 program and erase cycles.\n8.7.2 Peripheral File Map\nTable 8-5 lists the available peripherals and the register base address for each.\nTable 8-5. Peripherals Summary\nPERIPHERAL NAME\nBASE ADDRESS\nSIZE\nVREF\n0x40030000\n0x2000\nWWDT0\n0x40080000\n0x2000\nTIMG14\n0x40084000\n0x2000\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n29\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nTable 8-5. Peripherals Summary (continued)\nPERIPHERAL NAME\nBASE ADDRESS\nSIZE\nTIMG8\n0x40090000\n0x2000\nGPIO0\n0x400A0000\n0x2000\nSYSCTL\n0x400AF000\n0x3000\nDEBUGSS\n0x400C7000\n0x2000\nEVENT\n0x400C9000\n0x3000\nNVMNW\n0x400CD000\n0x2000\nI2C0\n0x400F0000\n0x2000\nUART0\n0x40108000\n0x2000\nMCPUSS\n0x40400000\n0x2000\nWUC\n0x40424000\n0x1000\nIOMUX\n0x40428000\n0x2000\nDMA\n0x4042A000\n0x2000\nCRC\n0x40440000\n0x2000\nSPI0\n0x40468000\n0x2000\nADC0\n0x40004000\n0x2000\nTIMA0\n0x40860000\n0x2000\nADC0(1)\n0x4055A000\n0x2000\n(1)\nAliased region of ADC0 memory-mapped registers\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n30\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n",
    "entities": {
      "error_conditions": [],
      "status_indicators": [
        "WWDTCTL0",
        "WWDTCNTRST",
        "DMATCTL.DMATSEL control bits",
        "LPMCR.LPM",
        "NMI_FLG bit"
      ],
      "components": [
        "TIMx",
        "WWDT",
        "SWD",
        "CPU",
        "MCPUSS",
        "Arm Cortex-M0+",
        "NVIC",
        "PMU",
        "CKM",
        "DMA controller",
        "ADC",
        "Flash",
        "SRAM",
        "SPI0",
        "CRC",
        "TIMA0",
        "TIMG8",
        "TIMG14",
        "UART0",
        "I2C0",
        "GPIOA",
        "WWDT0",
        "VREF",
        "IOMUX",
        "Event manager",
        "Core regulator",
        "SYSOSC",
        "LFOSC",
        "PD1",
        "PD0"
      ],
      "root_causes": [
        "Power management trim corruption",
        "Invalid clock configuration",
        "Incorrect operating mode transition"
      ],
      "solutions": [
        "Check memory allocation",
        "Inspect register values",
        "Configure DMA trigger selection using DMATCTL.DMATSEL",
        "Use power-on reset (POR) for trim corruption",
        "Configure operating modes for power optimization",
        "Use event manager for peripheral-to-peripheral communication"
      ]
    },
    "relationships": {
      "indicator_to_error": {},
      "error_to_cause": {},
      "cause_to_solution": {
        "Power management trim corruption": "Use power-on reset (POR) for trim corruption",
        "Invalid clock configuration": "Configure operating modes for power optimization",
        "Incorrect operating mode transition": "Configure operating modes for power optimization"
      }
    }
  },
  {
    "title": "8.23 Serial Wire Debug Interface",
    "source_text": "8.22 Input/Output Diagrams\nThe IOMUX manages the selection of which peripheral function is to be used on a digital IO and provides \nthe controls for the output driver and input path. For more information, see the IOMUX section of the MSPM0 \nC-Series 24MHz Microcontrollers Technical Reference Manual.\nThe mixed-signal IO pin slice diagram for a full featured IO pin is shown in Figure 8-2. Not all pins have analog \nfunctions, drive strength control, and pullup or pulldown resistors available.\nRPULLUP\nVDDIO\nPC\nRPULLDOWN\nVSS\nZ1\nHYSTEN\nINENA\n0\n1\n15\nUnassigned\nPeripheral 01\nPeripheral 15\n0\n1\n15\nUnassigned\nPeripheral 01\nPeripheral 15\nPF\nVSS\nVDDIO\nDRV\nIO pin\nD\nQ\nEN\nInput Logic\nOutput Logic\nPIPU\nPIPD\nTo analog peripheral function(s)\nD\nQ\nEN\nD\nQ\nEN\nD\nQ\nEN\nD\nQ\nEN\nD\nQ\nEN\nPullup enable\nPulldown enable\n1\n0\nINV\n1\n0\nINV\nPMOS\nNMOS\nDIN\nDOUT\n0\n1\n15\nUnassigned\nPeripheral 01\nPeripheral 15\nHi-Z\nD\nQ\nEN\nHi-Z Output Mux\nOutput Mux\nInput Mux\nDriver \nLogic\nDrive strength\nNMOS Control\nPMOS Control\nRSTN\nRSTN\nPF != 0\n\ufffd\ufffd5V tolerant open drain IO (ODIO) \ndoes not have PMOS control and \npull-up resistor\nFigure 8-2. Superset Input/Output Diagram\n8.23 Serial Wire Debug Interface\nA serial wire debug (SWD) two-wire interface is provided via an Arm compatible serial wire debug port (SW-\nDP) to enable access to multiple debug functions within the device. For a complete description of the debug \nfunctionality offered on MSPM0 devices, see the debug chapter of the technical reference manual.\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n37\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nTable 8-10. Serial Wire Debug Pin Requirements and Functions\nDEVICE SIGNAL\nDIRECTION\nSWD FUNCTION\nSWCLK\nInput\nSerial wire clock from debug probe\nSWDIO\nInput/Output\nBi-directional (shared) serial wire data\n8.24 Device Factory Constants\nAll devices include a memory-mapped FACTORY region which provides read-only data describing the \ncapabilities of a device as well as any factory-provided trim information for use by application software. See \nthe Factory Constants section of the MSPM0 C-Series 24MHz Microcontrollers Technical Reference Manual.\nTable 8-11. DEVICEID \nDEVICEID address is 0x41C4.0004, PARTNUM is bit 12 to 27, MANUFACTURER is bit 1 to 11.\nDevice\nDEVICEID.PARTNUM\nDEVICEID.MANUFACTURER\nMSPM0C1103\n0xBBA1\n0x17\nMSPM0C1104\n0xBBA1\n0x17\nTable 8-12. USERID\nUSERID address is 0x41C4.0008, PART is bit 0 to 15, VARIANT is bit 16 to 23\nDevice\nPART\nVARIANT\nDevice\nPART\nVARIANT\nMSPS003F4SPW20R\n0x57B3\n0x70\nMSPS003F3SPW20R\n0xD2B6\n0x2\nMSPM0C1104SDGS20R\n0x57B3\n0x71\nMSPM0C1103SDGS20R\n0xD2B6\n0x4\nMSPM0C1104SRUKR\n0x57B3\n0x73\nMSPM0C1103SRUKR\n0xD2B6\n0x7\nMSPM0C1104SDYYR\n0x57B3\n0x75\nMSPM0C1103SDYYR\n0xD2B6\n0xA\nMSPM0C1104SDDFR\n0x57B3\n0x77\nMSPM0C1103SDDFR\n0xD2B6\n0xC\nMSPM0C1104SDSGR\n0x57B3\n0x79\nMSPM0C1103SDSGR\n0xD2B6\n0xE\n8.25 Identification\nRevision and Device Identification \nThe hardware revision and device identification values are stored in the memory-mapped FACTORY region (see \nthe Device Factory Constants section) which provides read-only data describing the capabilities of a device \nas well as any factory-provided trim information for use by application software. For more information, see the \nFactory Constants chapter of the MSPM0 C-Series 24MHz Microcontrollers Technical Reference Manual.\nThe device revision and identification information are also included as part of the top-side marking on the device \npackage. The device-specific errata describes these markings.\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n38\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n9 Applications, Implementation, and Layout\nNote\nInformation in the following applications sections is not part of the TI component specification, \nand TI does not warrant its accuracy or completeness. TI\u2019s customers are responsible for \ndetermining suitability of components for their purposes, as well as validating and testing their design \nimplementation to confirm system functionality.\n9.1 Typical Application\n9.1.1 Schematic\nTI recommends connecting a combination of a 10-\u00b5F and a 0.1-\u00b5F low-ESR ceramic decoupling capacitor to the \nVDD and VSS pins. Higher-value capacitors can be used but can affect the supply rail ramp-up time. Decoupling \ncapacitors must be placed as close as possible to the pins (within a few millimeters).\nPA1 and NRST are double bonded for some variants. If it's used as a NRST, it must connect an external 47-k\u03a9 \npullup resistor with a 10-nF pulldown capacitor.\nFor 5V-tolerant open drain (ODIO), a pullup resistor is required to output high for I2C and UART functions if the \nODIO are used.\nVDD\nVSS\n0.1 \ufffdF\n10 \ufffdF\nNRST\n1.62\u20133.6V\nOpen-Drain\nIOs\n47 k\ufffd\nSWDIO\nSWCLK\nProgramming \ntool connection  \n10 nF\n5V\n2.2 k\ufffd\nFigure 9-1. Typical Application Schematic\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n39\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n10 Device and Documentation Support\nTI offers an extensive line of development tools. Tools and software to evaluate the performance of the device, \ngenerate code, and develop solutions are listed below.\n10.1 Device Nomenclature\nTo designate the stages in the product development cycle, TI assigns prefixes to the part numbers of all MSP \nMCU devices and support tools. . Each MSP MCU commercial family member has one of two prefixes: MSP \nor X. These prefixes represent evolutionary stages of product development from engineering prototypes (X) \nthrough fully qualified production devices (MSP).\nX \u2013 Experimental device that is not necessarily representative of the final device's electrical specifications\nMSP \u2013 Fully qualified production device\nX devices are shipped against the following disclaimer:\n\"Developmental product is intended for internal evaluation purposes.\" MSP devices have been characterized \nfully, and the quality and reliability of the device have been demonstrated fully. TI's standard warranty applies. \nPredictions show that prototype devices (X) have a greater failure rate than the standard production devices. TI \nrecommends that these devices not be used in any production system because their expected end-use failure \nrate still is undefined. Only qualified production devices are to be used.\nTI device nomenclature also includes a suffix with the device family name. This suffix indicates the temperature \nrange, package type, and distribution format. Figure 10-1 provides a legend for reading the complete device \nname.\nProcessor Family\nMCU Platform\nProduct Family\nDevice Subfamily\nFlash Memory\nTemperature range\nPackage Type\nDistribution Format\nMSP  M0  C  110  4  S  RUK  R\nFigure 10-1. Device Nomenclature\nTable 10-1. Device Nomenclature\nProcessor Family\nMSP = Mixed-signal processor\nX= Experimental silicon\nMCU Platform\nM0 = Arm-based 32-bit M0+\nProduct Family\nC = 24MHz frequency\nDevice Subfamily\n110 = ADC\nFlash Memory\n3 = 8KB\n4 = 16KB\nTemperature Range\nS = \u201340\u00b0C to 125\u00b0C\nPackage Type\nSee Table 5-1 and www.ti.com/packaging\nDistribution Format\nT = Small reel\nR = Large reel\nNo marking = Tube or tray\nFor orderable part numbers of MSP devices in different package types, see the Package Option Addendum of \nthis document, ti.com, or contact your TI sales representative.\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n40\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n10.2 Tools and Software\nDesign Kits and Evaluation Modules\nMSPM0 LaunchPad (LP) \nBoards: LP-MSPM0C1104 \nEmpowers you to immediately start developing on the industry\u2019s best \nintegrated analog and most cost-optimized general purpose MSPM0 MCU \nfamily. Exposes all device pins and functionality; includes some built-in \ncircuitry, out-of-box software demos, and on-board XDS110 debug probe for \nprogramming, debugging, and EnergyTrace\u2122 technology.\nThe LP ecosystem includes dozens of BoosterPack\u2122 stackable plug-in \nmodules to extend functionality.\nEmbedded Software \nMSPM0 Software Development \nKit (SDK) \nContains software drivers, middleware libraries, documentation, tools, and \ncode examples that create a familiar and easy user experience for all MSPM0 \ndevices.\nSoftware Development Tools \nTI Cloud Tools \nStart your evaluation and development on a web browser without any \ninstallation. Cloud tools also have a downloadable, offline version.\nTI Resource Explorer \nOnline portal to TI SDKs. Accessible in CCS IDE or in TI Cloud Tools.\nSysConfig \nIntuitive GUI to configure device and peripherals, resolve system conflicts, \ngenerate configuration code, and automate pin mux settings. Accessible in \nCCS IDE or in TI Cloud Tools. (offline version)\nMSP Academy \nGreat starting point for all developers to learn about the MSPM0 MCU Platform \nwith training modules that span a wide range of topics. Part of TIRex.\nGUI Composer \nGUIs that simplify evaluation of certain MSPM0 features, such as configuring \nand monitoring a fully integrated analog signal chain without any code needed.\nIDE and compiler tool chains \nCode Composer Studio\u2122 \n(CCS) \nIncludes TI Arm-Clang compiler. Supports all TI Arm Cortex MCUs and \nboasts competitive code size performance advantages, fast compile time, code \ncoverage support, safety certification support, and completely free to use.\nIAR Embedded Workbench\u00ae \nIDE \nKeil\u00ae MDK IDE \nGNU Arm Embedded Tool \nChain \n10.3 Support Resources\nTI E2E\u2122 support forums are an engineer's go-to source for fast, verified answers and design help \u2014 straight \nfrom the experts. Search existing answers or ask your own question to get the quick design help you need.\nLinked content is provided \"AS IS\" by the respective contributors. They do not constitute TI specifications and do \nnot necessarily reflect TI's views; see TI's Terms of Use.\n10.4 Trademarks\nLaunchPad\u2122, Code Composer Studio\u2122, TI E2E\u2122, EnergyTrace\u2122, and BoosterPack\u2122 are trademarks of Texas \nInstruments.\nArm\u00ae and Cortex\u00ae are registered trademarks of Arm Limited.\nAll trademarks are the property of their respective owners.\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n41\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n10.5 Electrostatic Discharge Caution\nThis integrated circuit can be damaged by ESD. Texas Instruments recommends that all integrated circuits be handled \nwith appropriate precautions. Failure to observe proper handling and installation procedures can cause damage.\nESD damage can range from subtle performance degradation to complete device failure. Precision integrated circuits may \nbe more susceptible to damage because very small parametric changes could cause the device not to meet its published \nspecifications.\n10.6 Glossary\nTI Glossary \nThis glossary lists and explains terms, acronyms, and definitions.\n11 Revision History\nNOTE: Page numbers for previous revisions may differ from page numbers in the current version.\nChanges from Revision B (August 2024) to Revision C (February 2025)\nPage\n\u2022\nAdded DSBGA package to Device Comparison ................................................................................................5\n\u2022\nAdded DSBGA to Table 6-1 ...............................................................................................................................8\n\u2022\nAdded DSBGA to Section 6.3 ............................................................................................................................9\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n42\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\n12 Mechanical, Packaging, and Orderable Information\nThe following pages include mechanical, packaging, and orderable information. This information is the most \ncurrent data available for the designated devices. This data is subject to change without notice and revision of \nthis document. For browser-based versions of this data sheet, refer to the left-hand navigation.\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n43\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nPACKAGE OUTLINE\nC\n18X 0.5\n2X 4.5\n20X 0.275\n0.165\n5.1\n4.7 TYP\n0.15\n0.05\n0.25\nGAGE PLANE\n0 -8\n4X (0 -15 )\n4X (7 -15 )\n1.1 MAX\nB\n3.1\n2.9\nA\n5.2\n5.0\nNOTE 3\n0.7\n0.4\n(0.15) TYP\nVSSOP - 1.1 mm max height\nDGS0020A\nSMALL OUTLINE PACKAGE\n4226367/A   10/2020\n1\n10\n11\n20\n0.1\nC A B\nPIN 1 INDEX\nAREA\nSEE DETAIL  A\n0.1 C\nNOTES: \n \n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\n    per ASME Y14.5M. \n2. This drawing is subject to change without notice. \n3. This dimension does not include mold flash, protrusions, or gate burrs. Mold flash, protrusions, or gate burrs shall not\n    exceed 0.15 mm per side. \n4. No JEDEC registration as of September 2020.\n5. Features may differ or may not be present.\nSEATING\nPLANE\nPowerPAD is a trademark of Texas Instruments.\nTYPICAL\nA  20\nDETAIL A\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n44\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nEXAMPLE BOARD LAYOUT\n0.05 MAX\nALL AROUND\n0.05 MIN\nALL AROUND\n20X (1.45)\n20X (0.3)\n18X (0.5)\n(4.4)\n(R0.05) TYP\nVSSOP - 1.1 mm max height\nDGS0020A\nSMALL OUTLINE PACKAGE\n4226367/A   10/2020\nNOTES: (continued)\n \n  6. Publication IPC-7351 may have alternate designs. \n  7. Solder mask tolerances between and around signal pads can vary based on board fabrication site.\n  8. This package is designed to be soldered to a thermal pad on the board. For more information, see Texas Instruments literature\n      numbers SLMA002 (www.ti.com/lit/slma002) and SLMA004 (www.ti.com/lit/slma004).\n  9. Size of metal pad may vary due to creepage requirement.\n10. Vias are optional depending on application, refer to device data sheet. It is recommended that vias under paste be filled, plugged\n      or tented. \nLAND PATTERN EXAMPLE\nSCALE: 16X\nSYMM\nSYMM\n1\n10\n11\n20\n15.000\nMETAL\nSOLDER MASK\nOPENING\nMETAL UNDER\nSOLDER MASK\nSOLDER MASK\nOPENING\nEXPOSED METAL\nEXPOSED METAL\nNON-SOLDER MASK\nSOLDER MASK DETAILS\nDEFINED\n(PREFERRED)\nSOLDER MASK\nDEFINED\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n45\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nEXAMPLE STENCIL DESIGN\n(18X 0.5)\n20X (1.45)\n20X (0.3)\n(4.4)\n(R0.05) TYP\nVSSOP - 1.1 mm max height\nDGS0020A\nSMALL OUTLINE PACKAGE\n4226367/A   10/2020\nNOTES: (continued)\n \n11. Laser cutting apertures with trapezoidal walls and rounded corners may offer better paste release. IPC-7525 may have alternate\n      design recommendations.   \n12. Board assembly site may have different recommendations for stencil design.\n \nSOLDER PASTE EXAMPLE\nBASED ON 0.125 mm THICK STENCIL\nSCALE: 16X\nSYMM\nSYMM\n1\n10\n11\n20\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n46\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nNOTES:\n1.\nAll linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\nper ASME Y14.5M.\n2.\nThis drawing is subject to change without notice.\n3.\nThis dimension does not include mold flash, protrusions, or gate burrs. Mold flash, protrusions, or gate burrs shall not exceed\n0.15 per side.\n4.\nThis dimension does not include interlead flash. Interlead flash shall not exceed 0.50 per side.\n5.\nReference JEDEC Registration MO-345, Variation AA\nPACKAGE OUTLINE\n4224642/B   07/2021\nSOT-23-THIN - 1.1 mm max height\nPLASTIC SMALL OUTLINE\nDYY0016A\nA\n0.1 C\nB\nPIN 1 INDEX\nAREA\n4.3\n4.1\nNOTE 3\n2.1\n1.9\n3.36\n3.16\n14X 0.5\n2X\n3.5\n16X 0.31\n0.11\n0.1\nC A\nB\n1.1 MAX\nC\nSEATING PLANE\n0.2\n0.08 TYP\nSEE DETAIL A\n0.1\n0.0\n0.25\nGAUGE PLANE\n0\u00b0- 8\u00b0\n0.63\n0.33\nDETAIL A\nTYP\n1\n8\n9\n16\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n47\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nNOTES: (continued)\n  6.\nPublication IPC-7351 may have alternate designs.\n  7.\nSolder mask tolerances between and around signal pads can vary based on board fabrication site.\nEXAMPLE BOARD LAYOUT\n4224642/B   07/2021\nSOT-23-THIN - 1.1 mm max height\nDYY0016A\nPLASTIC SMALL OUTLINE\nSYMM\nSYMM\nLAND PATTERN EXAMPLE\nEXPOSED METAL SHOWN\nSCALE: 20X\n16X (0.3)\n16X (1.05)\n(3)\n14X (0.5)\n(R0.05) TYP\n1\n8\n9\n16\nMETAL\nSOLDER MASK\n OPENING\nSOLDER MASK\nOPENING\nMETAL UNDER\nSOLDER MASK\nNON- SOLDER MASK\nDEFINED\n(PREFERRED)\nSOLDER MASK\nDEFINED\nSOLDER MASK DETAILS\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n48\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nNOTES: (continued)\n  8. \nLaser cutting apertures with trapezoidal walls and rounded corners may offer better paste release. IPC-7525 may have alternate \ndesign recommendations.\n  9.\nBoard assembly site may have different recommendations for stencil design.\nEXAMPLE STENCIL DESIGN\n4224642/B   07/2021\nSOT-23-THIN - 1.1 mm max height\nDYY0016A\nPLASTIC SMALL OUTLINE\nSOLDER PASTE EXAMPLE\nBASED ON 0.125 mm THICK STENCIL\nSCALE: 20X\nSYMM\nSYMM\n16X (0.3)\n16X (1.05)\n(3)\n14X (0.5)\n(R0.05) TYP\n1\n8\n9\n16\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n49\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nPACKAGE OUTLINE\nC\nSEE OPTIONAL\nTERMINAL\n8X 0.3\n0.2\n1.6\n0.1\n2X\n1.5\n0.9\n0.1\n6X 0.5\n8X 0.4\n0.2\n0.05\n0.00\n0.8 MAX\nA\n2.1\n1.9\nB\n2.1\n1.9\n0.3\n0.2\n0.4\n0.2\n(0.2) TYP\nWSON - 0.8 mm max height\nDSG0008A\nPLASTIC SMALL OUTLINE - NO LEAD\n4218900/A 08/2016\nPIN 1 INDEX AREA\nSEATING PLANE\n0.08 C\n1\n4\n5\n8\n(OPTIONAL)\nPIN 1 ID\n0.1\nC A B\n0.05\nC\nTHERMAL PAD\nEXPOSED\n9\nNOTES:\n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\nper ASME Y14.5M.\n2. This drawing is subject to change without notice.\n3. The package thermal pad must be soldered to the printed circuit board for thermal and mechanical performance.\nSCALE  5.500\nOPTIONAL TERMINAL\nTYPICAL\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n50\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE BOARD LAYOUT\n0.07 MIN\nALL AROUND\n0.07 MAX\nALL AROUND\n8X (0.25)\n(1.6)\n(1.9)\n6X (0.5)\n(0.9)\n(\n0.2) VIA\nTYP\n(0.55)\n8X (0.5)\n(R0.05) TYP\nWSON - 0.8 mm max height\nDSG0008A\nPLASTIC SMALL OUTLINE - NO LEAD\n4218900/A 08/2016\nSYMM\n1\n4\n5\n8\nSCALE:20X\nLAND PATTERN EXAMPLE\nSYMM\n9\nNOTES: (continued)\n4. This package is designed to be soldered to a thermal pad on the board. For more information, see Texas Instruments literature\nnumber SLUA271 (www.ti.com/lit/slua271).\n5. Vias are optional depending on application, refer to device data sheet. If any vias are implemented, refer to their locations shown\non this view. It is recommended that vias under paste be filled, plugged or tented.\nSOLDER MASK\nOPENING\nSOLDER MASK\nMETAL UNDER\nSOLDER MASK\nDEFINED\nMETAL\nSOLDER MASK\nOPENING\nNON SOLDER MASK\nSOLDER MASK DETAILS\nDEFINED\n(PREFERRED)\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n51\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE STENCIL DESIGN\n(R0.05) TYP\n8X (0.25)\n8X (0.5)\n(0.9)\n(0.7)\n(1.9)\n(0.45)\n6X (0.5)\nWSON - 0.8 mm max height\nDSG0008A\nPLASTIC SMALL OUTLINE - NO LEAD\n4218900/A 08/2016\nNOTES: (continued)\n6. Laser cutting apertures with trapezoidal walls and rounded corners may offer better paste release. IPC-7525 may have alternate\ndesign recommendations.\nSOLDER PASTE EXAMPLE\nBASED ON 0.125 mm THICK STENCIL\nEXPOSED PAD 9:\n87% PRINTED SOLDER COVERAGE BY AREA UNDER PACKAGE\nSCALE:25X\nSYMM\n1\n4\n5\n8\nMETAL\nSYMM\n9\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n52\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nPACKAGE OUTLINE\nC\n2.95 TYP\n2.65\n1.1 MAX\n6X 0.65\n8X 0.4\n0.2\n2X\n1.95\n0.20 TYP\n0.08\n0 - 8\n0.1\n0.0\n0.25\nGAGE PLANE\n0.6\n0.3\nA\nNOTE 3\n2.95\n2.85\nB\n1.65\n1.55\n4222047/B   11/2015\nSOT-23 - 1.1 mm max height\nDDF0008A\nPLASTIC SMALL OUTLINE\nNOTES:\n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\nper ASME Y14.5M.\n2. This drawing is subject to change without notice.\n3. This dimension does not include mold \ufb02ash, protrusions, or gate burrs. Mold \ufb02ash, protrusions, or gate burrs shall not\nexceed 0.15 mm per side.\n1\n8\n0.1\nC A\nB\n5\n4\nPIN 1 ID\nAREA\nSEATING PLANE\n0.1 C\nSEE DETAIL A\nTYPICAL\nDETAIL A\nSCALE  4.000\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n53\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE BOARD LAYOUT\n(2.6)\n8X (1.05)\n8X (0.45)\n6X (0.65)\n(R\n)\nTYP\n0.05\n4222047/B   11/2015\nSYMM\nSOT-23 - 1.1 mm max height\nDDF0008A\nPLASTIC SMALL OUTLINE\nSYMM\nLAND PATTERN EXAMPLE\nSCALE:15X\n1\n4\n5\n8\nNOTES: (continued)\n4. Publication IPC-7351 may have alternate designs.\n5. Solder mask tolerances between and around signal pads can vary based on board fabrication site.\nMETAL\nSOLDER MASK\nOPENING\nNON SOLDER MASK\nDEFINED\nSOLDER MASK DETAILS\nSOLDER MASK\nOPENING\nMETAL UNDER\nSOLDER MASK\nSOLDER MASK\nDEFINED\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n54\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE STENCIL DESIGN\n(2.6)\n6X (0.65)\n8X (0.45)\n8X (1.05)\n(R\n) TYP\n0.05\n4222047/B   11/2015\nSOT-23 - 1.1 mm max height\nDDF0008A\nPLASTIC SMALL OUTLINE\nNOTES: (continued)\n6. Laser cutting apertures with trapezoidal walls and rounded corners may o\ufb00er better paste release. IPC-7525 may have alternate\ndesign recommendations.\n7. Board assembly site may have di\ufb00erent recommendations for stencil design.\nSYMM\nSYMM\n1\n4\n5\n8\nSOLDER PASTE EXAMPLE\nBASED ON 0.125 mm THICK STENCIL\nSCALE:15X\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n55\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nPACKAGE OUTLINE\nC\nSEE TERMINAL\nDETAIL\n20X 0.25\n0.15\n1.7\n0.05\n20X 0.5\n0.3\n0.8 MAX\n(DIM A) TYP\nOPT 02 SHOWN\n0.05\n0.00\n16X 0.4\n4X\n1.6\nA\n3.1\n2.9\nB\n3.1\n2.9\n0.25\n0.15\n0.5\n0.3\nWQFN - 0.8 mm max height\nRUK0020B\nPLASTIC QUAD FLATPACK - NO LEAD\n4222676/A 02/2016\nOPTION 01\n(0.1)\nDIMENSION A\nOPTION 02\n(0.2)\nPIN 1 INDEX AREA\n0.08 C\nSEATING PLANE\n1\n5\n11\n15\n6\n10\n20\n16\n(OPTIONAL)\nPIN 1 ID\n0.1\nC A\nB\n0.05\nEXPOSED\nTHERMAL PAD\n21\nSYMM\nSYMM\nNOTES:\n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\nper ASME Y14.5M.\n2. This drawing is subject to change without notice.\n3. The package thermal pad must be soldered to the printed circuit board for thermal and mechanical performance.\nSCALE  4.000\nDETAIL\nOPTIONAL TERMINAL\nTYPICAL\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n56\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE BOARD LAYOUT\n0.05 MIN\nALL AROUND\n0.05 MAX\nALL AROUND\n20X (0.2)\n20X (0.6)\n(\n) TYP\nVIA\n0.2\n16X (0.4)\n(2.8)\n(2.8)\n(0.6)\nTYP\n(\n1.7)\n(R\n)\nTYP\n0.05\nWQFN - 0.8 mm max height\nRUK0020B\nPLASTIC QUAD FLATPACK - NO LEAD\n4222676/A 02/2016\nSYMM\n1\n5\n6\n10\n11\n15\n16\n20\nSYMM\nLAND PATTERN EXAMPLE\nSCALE:20X\nNOTES: (continued)\n4. This package is designed to be soldered to a thermal pad on the board. For more information, see Texas Instruments literature\nnumber SLUA271 (www.ti.com/lit/slua271).\n5. Vias are optional depending on application, refer to device data sheet. If any vias are implemented, refer to their locations shown\non this view. It is recommended that vias under paste be filled, plugged or tented.\n21\nSOLDER MASK\nOPENING\nMETAL UNDER\nSOLDER MASK\nSOLDER MASK\nDEFINED\nMETAL\nSOLDER MASK\nOPENING\nNON SOLDER MASK\nSOLDER MASK DETAILS\nDEFINED\n(PREFERRED)\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n57\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE STENCIL DESIGN\n20X (0.6)\n20X (0.2)\n16X (0.4)\n(2.8)\n(2.8)\n4X (\n0.75)\n(0.47)\nTYP\n(0.47) TYP\n(R\n) TYP\n0.05\nWQFN - 0.8 mm max height\nRUK0020B\nPLASTIC QUAD FLATPACK - NO LEAD\n4222676/A 02/2016\nNOTES: (continued)\n6. Laser cutting apertures with trapezoidal walls and rounded corners may offer better paste release. IPC-7525 may have alternate\ndesign recommendations.\n21\nSYMM\nMETAL\nTYP\nBASED ON 0.1 mm THICK STENCIL\nSOLDER PASTE EXAMPLE\nEXPOSED PAD 21:\n78% PRINTED SOLDER COVERAGE BY AREA UNDER PACKAGE\nSCALE:20X\nSYMM\n1\n5\n6\n10\n11\n15\n16\n20\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n58\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nPACKAGE OUTLINE\nC\n18X 0.65\n2X\n5.85\n20X 0.30\n0.19\n6.6 TYP\n6.2\n1.2 MAX\n0.15\n0.05\n0.25\nGAGE PLANE\n-8\n0\nB\nNOTE 4\n4.5\n4.3\nA\nNOTE 3\n6.6\n6.4\n0.75\n0.50\n(0.15) TYP\nTSSOP - 1.2 mm max height\nPW0020A\nSMALL OUTLINE PACKAGE\n4220206/A 02/2017\n1\n10\n11\n20\n0.1\nC A B\nPIN 1 INDEX AREA\nSEE DETAIL A\n0.1 C\nNOTES:\n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing\nper ASME Y14.5M.\n2. This drawing is subject to change without notice.\n3. This dimension does not include mold \ufb02ash, protrusions, or gate burrs. Mold \ufb02ash, protrusions, or gate burrs shall not\nexceed 0.15 mm per side.\n4. This dimension does not include interlead \ufb02ash. Interlead \ufb02ash shall not exceed 0.25 mm per side.\n5. Reference JEDEC registration MO-153.\nSEATING\nPLANE\nTYPICAL\nA 20\nSCALE  2.500\nDETAIL A\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n59\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE BOARD LAYOUT\n0.05 MAX\nALL AROUND\n0.05 MIN\nALL AROUND\n20X (1.5)\n20X (0.45)\n18X (0.65)\n(5.8)\n(R0.05) TYP\nTSSOP - 1.2 mm max height\nPW0020A\nSMALL OUTLINE PACKAGE\n4220206/A 02/2017\nNOTES: (continued)\n6. Publication IPC-7351 may have alternate designs.\n7. Solder mask tolerances between and around signal pads can vary based on board fabrication site.\nLAND PATTERN EXAMPLE\nEXPOSED METAL SHOWN\nSCALE: 10X\nSYMM\nSYMM\n1\n10\n11\n20\n15.000\nMETAL\nSOLDER MASK\nOPENING\nMETAL UNDER\nSOLDER MASK\nSOLDER MASK\nOPENING\nEXPOSED METAL\nEXPOSED METAL\nNON-SOLDER MASK\nSOLDER MASK DETAILS\nDEFINED\n(PREFERRED)\nSOLDER MASK\nDEFINED\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n60\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE STENCIL DESIGN\n20X (1.5)\n20X (0.45)\n18X (0.65)\n(5.8)\n(R0.05) TYP\nTSSOP - 1.2 mm max height\nPW0020A\nSMALL OUTLINE PACKAGE\n4220206/A 02/2017\nNOTES: (continued)\n8. Laser cutting apertures with trapezoidal walls and rounded corners may o\ufb00er better paste release. IPC-7525 may have alternate\ndesign recommendations.\n9. Board assembly site may have di\ufb00erent recommendations for stencil design.\nSOLDER PASTE EXAMPLE\nBASED ON 0.125 mm THICK STENCIL\nSCALE: 10X\nSYMM\nSYMM\n1\n10\n11\n20\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n61\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nPACKAGE OUTLINE\nC\n0.35 MAX\n0.12\n0.07\n1.05\nTYP\n0.35  TYP\n0.35\nTYP\n8X \n0.20\n0.16\nB\nE\nA\nD\n4231152/A   08/2024\nD: Max = 1.620 mm, Min = 1.580 mm\nDSBGA - 0.35 mm max height\nYCJ0008-C01\nDIE SIZE BALL GRID ARRAY\n \nE: Max = 0.881 mm, Min = 0.841 mm\nNOTES: \n \n1. All linear dimensions are in millimeters. Any dimensions in parenthesis are for reference only. Dimensioning and tolerancing \n    per ASME Y14.5M.\n2. This drawing is subject to change without notice.\n \nBALL A1\nCORNER\nSEATING PLANE\n0.05 C\nA\n2\n0.015\nC A B\nSYMM\nSYMM\nB\nC\n1\nD\nSCALE  13.000\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n62\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE BOARD LAYOUT\n0.0375 MIN\n0.0375 MAX\n8X (\n0.18)\n(0.35) TYP\n(0.35) TYP\n(\n0.18)\nSOLDER MASK\nOPENING\n(\n0.18)\nMETAL\n4231152/A   08/2024\nDSBGA - 0.35 mm max height\nYCJ0008-C01\nDIE SIZE BALL GRID ARRAY\nNOTES: (continued)\n \n3. Final dimensions may vary due to manufacturing tolerance considerations and also routing constraints.\n    See Texas Instruments Literature No. SNVA009 (www.ti.com/lit/snva009).\n \nSOLDER MASK DETAILS\nNOT TO SCALE\nSYMM\nSYMM\nC\n1\n2\nA\nB\nEXPOSED METAL SHOWN\nLAND PATTERN EXAMPLE\nSCALE: 50X\nD\nNON-SOLDER MASK\nDEFINED\nEXPOSED\nMETAL\nSOLDER MASK\nOPENING\nSOLDER MASK\nDEFINED\n(PREFERRED)\nMETAL UNDER\nSOLDER MASK\nEXPOSED\nMETAL\nwww.ti.com\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nCopyright \u00a9 2025 Texas Instruments Incorporated\nSubmit Document Feedback\n63\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nwww.ti.com\nEXAMPLE STENCIL DESIGN\n(0.35) TYP\n(0.35) TYP\n8X (\n0.21)\n(R0.05) TYP\n4231152/A   08/2024\nDSBGA - 0.35 mm max height\nYCJ0008-C01\nDIE SIZE BALL GRID ARRAY\nNOTES: (continued)\n \n4. Laser cutting apertures with trapezoidal walls and rounded corners may offer better paste release.\nSOLDER PASTE EXAMPLE\nBASED ON 0.075 mm THICK STENCIL\nSCALE: 50X\nMETAL\nTYP\nSYMM\nSYMM\nC\n1\n2\nA\nB\nD\nMSPM0C1104, MSPM0C1103\nSLASF90C \u2013 OCTOBER 2023 \u2013 REVISED FEBRUARY 2025\nwww.ti.com\n64\nSubmit Document Feedback\nCopyright \u00a9 2025 Texas Instruments Incorporated\nProduct Folder Links: MSPM0C1104 MSPM0C1103\n\n\nPACKAGE OPTION ADDENDUM\nwww.ti.com\n23-May-2025\nPACKAGING INFORMATION\nOrderable part number\nStatus\n(1)\nMaterial type\n(2)\nPackage | Pins\nPackage qty | Carrier\nRoHS\n(3)\nLead finish/\nBall material\n(4)\nMSL rating/\nPeak reflow\n(5)\nOp temp (\u00b0C)\nPart marking\n(6)\nMSPM0C1103SDDFR\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDDFR.A\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDDFR.B\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDGS20R\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1103S\nMSPM0C1103SDGS20R.A\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1103S\nMSPM0C1103SDGS20R.B\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1103S\nMSPM0C1103SDSGR\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDSGR.A\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDSGR.B\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC03S\nMSPM0C1103SDYYR\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nM0C1103S\nMSPM0C1103SDYYR.A\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nM0C1103S\nMSPM0C1103SDYYR.B\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nM0C1103S\nMSPM0C1103SRUKR\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1103S\nMSPM0C1103SRUKR.A\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1103S\nMSPM0C1103SRUKR.B\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1103S\nMSPM0C1104SDDFR\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDDFR.A\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDDFR.B\nActive\nProduction\nSOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDGS20R\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nMSPM0C1104SDGS20R.A\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nMSPM0C1104SDGS20R.B\nActive\nProduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nMSPM0C1104SDSGR\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDSGR.A\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDSGR.B\nActive\nProduction\nWSON (DSG) | 8\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC04S\nMSPM0C1104SDYYR\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nAddendum-Page 1\n\n\nPACKAGE OPTION ADDENDUM\nwww.ti.com\n23-May-2025\nOrderable part number\nStatus\n(1)\nMaterial type\n(2)\nPackage | Pins\nPackage qty | Carrier\nRoHS\n(3)\nLead finish/\nBall material\n(4)\nMSL rating/\nPeak reflow\n(5)\nOp temp (\u00b0C)\nPart marking\n(6)\nMSPM0C1104SDYYR.A\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nMSPM0C1104SDYYR.B\nActive\nProduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nM0C1104S\nMSPM0C1104SRUKR\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1104S\nMSPM0C1104SRUKR.A\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1104S\nMSPM0C1104SRUKR.B\nActive\nProduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-1-260C-UNLIM\n-40 to 125\nC1104S\nMSPS003F3SPW20R\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F3\nMSPS003F3SPW20R.A\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F3\nMSPS003F3SPW20R.B\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F3\nMSPS003F4SPW20R\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F4\nMSPS003F4SPW20R.A\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F4\nMSPS003F4SPW20R.B\nActive\nProduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\nYes\nNIPDAU\nLevel-2-260C-1 YEAR\n-40 to 125\nMS003F4\nXMSM0C1104S8YCJR\nActive\nPreproduction\nDSBGA (YCJ) | 8\n12000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104S8YCJR.B\nActive\nPreproduction\nDSBGA (YCJ) | 8\n12000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SDDFR.B\nActive\nPreproduction SOT-23-THIN (DDF) | 8\n3000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SDGS20R.B\nActive\nPreproduction\nVSSOP (DGS) | 20\n5000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SDSGR.B\nActive\nPreproduction\nWSON (DSG) | 8\n3000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SDYYR.B\nActive\nPreproduction\nSOT-23-THIN\n(DYY) | 16\n3000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SPW20R.B\nActive\nPreproduction\nTSSOP (PW) | 20\n3000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\nXMSM0C1104SRUKR.B\nActive\nPreproduction\nWQFN (RUK) | 20\n3000 | LARGE T&R\n-\nCall TI\nCall TI\n-40 to 125\n \n(1) Status:  For more details on status, see our product life cycle.\n \n(2) Material type:  When designated, preproduction parts are prototypes/experimental devices, and are not yet approved or released for full production. Testing and final process, including without limitation quality assurance,\nreliability performance testing, and/or process qualification, may not yet be complete, and this item is subject to further changes or possible discontinuation. If available for ordering, purchases will be subject to an additional\nwaiver at checkout, and are intended for early internal evaluation purposes only. These items are sold without warranties of any kind.\n \n(3) RoHS values:  Yes, No, RoHS Exempt. See the TI RoHS Statement for additional information and value definition.\n \n(4) Lead finish/Ball material:  Parts may have multiple material finish options. Finish options are separated by a vertical ruled line. Lead finish/Ball material values may wrap to two lines if the finish value exceeds the maximum\ncolumn width.\nAddendum-Page 2\n\n\nPACKAGE OPTION ADDENDUM\nwww.ti.com\n23-May-2025\n \n(5) MSL rating/Peak reflow:  The moisture sensitivity level ratings and peak solder (reflow) temperatures. In the event that a part has multiple moisture sensitivity ratings, only the lowest level per JEDEC standards is shown.\nRefer to the shipping label for the actual reflow temperature that will be used to mount the part to the printed circuit board.\n \n(6) Part marking:  There may be an additional marking, which relates to the logo, the lot trace code information, or the environmental category of the part.\n \nMultiple part markings will be inside parentheses. Only one part marking contained in parentheses and separated by a \"~\" will appear on a part. If a line is indented then it is a continuation of the previous line and the two\ncombined represent the entire part marking for that device.\n \nImportant Information and Disclaimer:The information provided on this page represents TI's knowledge and belief as of the date that it is provided. TI bases its knowledge and belief on information provided by third parties, and\nmakes no representation or warranty as to the accuracy of such information. Efforts are underway to better integrate information from third parties. TI has taken and continues to take reasonable steps to provide representative\nand accurate information but may not have conducted destructive testing or chemical analysis on incoming materials and chemicals. TI and TI suppliers consider certain information to be proprietary, and thus CAS numbers\nand other limited information may not be available for release.\n \nIn no event shall TI's liability arising out of such information exceed the total purchase price of the TI part(s) at issue in this document sold by TI to Customer on an annual basis.\n \n OTHER QUALIFIED VERSIONS OF MSPM0C1103, MSPM0C1104 :\n\u2022 Automotive : MSPM0C1103-Q1, MSPM0C1104-Q1\n NOTE: Qualified Version Definitions:\n\u2022 Automotive - Q100 devices qualified for high-reliability automotive applications targeting zero defects\nAddendum-Page 3\n\n\nPACKAGE MATERIALS INFORMATION\n \n \nwww.ti.com\n2-Jul-2025\nTAPE AND REEL INFORMATION\nReel Width (W1)\nREEL DIMENSIONS\nA0\nB0\nK0\nW\nDimension designed to accommodate the component length\nDimension designed to accommodate the component thickness\nOverall width of the carrier tape\nPitch between successive cavity centers\nDimension designed to accommodate the component width\nTAPE DIMENSIONS\nK0\n P1\nB0 W\nA0\nCavity\nQUADRANT ASSIGNMENTS FOR PIN 1 ORIENTATION IN TAPE\nPocket Quadrants\nSprocket Holes\nQ1\nQ1\nQ2\nQ2\nQ3\nQ3\nQ4\nQ4\nUser Direction of Feed\nP1\nReel\nDiameter\n \n*All dimensions are nominal\nDevice\nPackage\nType\nPackage\nDrawing\nPins\nSPQ\nReel\nDiameter\n(mm)\nReel\nWidth\nW1 (mm)\nA0\n(mm)\nB0\n(mm)\nK0\n(mm)\nP1\n(mm)\nW\n(mm)\nPin1\nQuadrant\nMSPM0C1103SDDFR\nSOT-23-\nTHIN\nDDF\n8\n3000\n180.0\n8.4\n3.2\n3.2\n1.4\n4.0\n8.0\nQ3\nMSPM0C1103SDGS20R\nVSSOP\nDGS\n20\n5000\n330.0\n16.4\n5.4\n5.4\n1.45\n8.0\n16.0\nQ1\nMSPM0C1103SDSGR\nWSON\nDSG\n8\n3000\n180.0\n8.4\n2.3\n2.3\n1.15\n4.0\n8.0\nQ2\nMSPM0C1103SDYYR\nSOT-23-\nTHIN\nDYY\n16\n3000\n330.0\n12.4\n4.8\n3.6\n1.6\n8.0\n12.0\nQ3\nMSPM0C1103SRUKR\nWQFN\nRUK\n20\n3000\n330.0\n12.4\n3.3\n3.3\n1.1\n8.0\n12.0\nQ2\nMSPM0C1104SDDFR\nSOT-23-\nTHIN\nDDF\n8\n3000\n180.0\n8.4\n3.2\n3.2\n1.4\n4.0\n8.0\nQ3\nMSPM0C1104SDGS20R\nVSSOP\nDGS\n20\n5000\n330.0\n16.4\n5.4\n5.4\n1.45\n8.0\n16.0\nQ1\nMSPM0C1104SDSGR\nWSON\nDSG\n8\n3000\n180.0\n8.4\n2.3\n2.3\n1.15\n4.0\n8.0\nQ2\nMSPM0C1104SDYYR\nSOT-23-\nTHIN\nDYY\n16\n3000\n330.0\n12.4\n4.8\n3.6\n1.6\n8.0\n12.0\nQ3\nMSPM0C1104SRUKR\nWQFN\nRUK\n20\n3000\n330.0\n12.4\n3.3\n3.3\n1.1\n8.0\n12.0\nQ2\nMSPS003F3SPW20R\nTSSOP\nPW\n20\n3000\n330.0\n16.4\n6.95\n7.0\n1.4\n8.0\n16.0\nQ1\nMSPS003F3SPW20R\nTSSOP\nPW\n20\n3000\n330.0\n16.4\n6.95\n7.0\n1.4\n8.0\n16.0\nQ1\nMSPS003F4SPW20R\nTSSOP\nPW\n20\n3000\n330.0\n16.4\n6.95\n7.0\n1.4\n8.0\n16.0\nQ1\nPack Materials-Page 1\n\n\nPACKAGE MATERIALS INFORMATION\n \n \nwww.ti.com\n2-Jul-2025\nDevice\nPackage\nType\nPackage\nDrawing\nPins\nSPQ\nReel\nDiameter\n(mm)\nReel\nWidth\nW1 (mm)\nA0\n(mm)\nB0\n(mm)\nK0\n(mm)\nP1\n(mm)\nW\n(mm)\nPin1\nQuadrant\nMSPS003F4SPW20R\nTSSOP\nPW\n20\n3000\n330.0\n16.4\n6.95\n7.0\n1.4\n8.0\n16.0\nQ1\nPack Materials-Page 2\n\n\nPACKAGE MATERIALS INFORMATION\n \n \nwww.ti.com\n2-Jul-2025\nTAPE AND REEL BOX DIMENSIONS\nWidth (mm)\nW\nL\nH\n \n*All dimensions are nominal\nDevice\nPackage Type\nPackage Drawing\nPins\nSPQ\nLength (mm)\nWidth (mm)\nHeight (mm)\nMSPM0C1103SDDFR\nSOT-23-THIN\nDDF\n8\n3000\n210.0\n185.0\n35.0\nMSPM0C1103SDGS20R\nVSSOP\nDGS\n20\n5000\n353.0\n353.0\n32.0\nMSPM0C1103SDSGR\nWSON\nDSG\n8\n3000\n210.0\n185.0\n35.0\nMSPM0C1103SDYYR\nSOT-23-THIN\nDYY\n16\n3000\n336.6\n336.6\n31.8\nMSPM0C1103SRUKR\nWQFN\nRUK\n20\n3000\n367.0\n367.0\n35.0\nMSPM0C1104SDDFR\nSOT-23-THIN\nDDF\n8\n3000\n210.0\n185.0\n35.0\nMSPM0C1104SDGS20R\nVSSOP\nDGS\n20\n5000\n353.0\n353.0\n32.0\nMSPM0C1104SDSGR\nWSON\nDSG\n8\n3000\n210.0\n185.0\n35.0\nMSPM0C1104SDYYR\nSOT-23-THIN\nDYY\n16\n3000\n336.6\n336.6\n31.8\nMSPM0C1104SRUKR\nWQFN\nRUK\n20\n3000\n367.0\n367.0\n35.0\nMSPS003F3SPW20R\nTSSOP\nPW\n20\n3000\n353.0\n353.0\n32.0\nMSPS003F3SPW20R\nTSSOP\nPW\n20\n3000\n353.0\n353.0\n32.0\nMSPS003F4SPW20R\nTSSOP\nPW\n20\n3000\n353.0\n353.0\n32.0\nMSPS003F4SPW20R\nTSSOP\nPW\n20\n3000\n353.0\n353.0\n32.0\nPack Materials-Page 3\n\n\nIMPORTANT NOTICE AND DISCLAIMER\nTI PROVIDES TECHNICAL AND RELIABILITY DATA (INCLUDING DATA SHEETS), DESIGN RESOURCES (INCLUDING REFERENCE \nDESIGNS), APPLICATION OR OTHER DESIGN ADVICE, WEB TOOLS, SAFETY INFORMATION, AND OTHER RESOURCES \u201cAS IS\u201d \nAND WITH ALL FAULTS, AND DISCLAIMS ALL WARRANTIES, EXPRESS AND IMPLIED, INCLUDING WITHOUT LIMITATION ANY \nIMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT OF THIRD \nPARTY INTELLECTUAL PROPERTY RIGHTS.\nThese resources are intended for skilled developers designing with TI products. You are solely responsible for (1) selecting the appropriate \nTI products for your application, (2) designing, validating and testing your application, and (3) ensuring your application meets applicable \nstandards, and any other safety, security, regulatory or other requirements.\nThese resources are subject to change without notice. TI grants you permission to use these resources only for development of an \napplication that uses the TI products described in the resource. Other reproduction and display of these resources is prohibited. No license \nis granted to any other TI intellectual property right or to any third party intellectual property right. TI disclaims responsibility for, and you \nwill fully indemnify TI and its representatives against, any claims, damages, costs, losses, and liabilities arising out of your use of these \nresources.\nTI\u2019s products are provided subject to TI\u2019s Terms of Sale or other applicable terms available either on ti.com or provided in conjunction with \nsuch TI products. TI\u2019s provision of these resources does not expand or otherwise alter TI\u2019s applicable warranties or warranty disclaimers for \nTI products.\nTI objects to and rejects any additional or different terms you may have proposed. IMPORTANT NOTICE\nMailing Address: Texas Instruments, Post Office Box 655303, Dallas, Texas 75265\nCopyright \u00a9 2025, Texas Instruments Incorporated\n\n\n",
    "entities": {
      "error_conditions": [
        "ESD damage",
        "Parametric changes",
        "Device failure",
        "Performance degradation"
      ],
      "status_indicators": [
        "DEVICEID.PARTNUM",
        "DEVICEID.MANUFACTURER",
        "USERID.PART",
        "USERID.VARIANT",
        "Hardware revision values",
        "Device identification values"
      ],
      "components": [
        "IOMUX",
        "Digital IO",
        "Output driver",
        "Input path",
        "Mixed-signal IO pin",
        "Pullup resistor",
        "Pulldown resistor",
        "Drive strength control",
        "Serial wire debug interface",
        "SW-DP",
        "FACTORY region",
        "Memory-mapped FACTORY region",
        "SWCLK",
        "SWDIO",
        "NRST",
        "Open-drain IOs",
        "VDD pins",
        "VSS pins",
        "Decoupling capacitors",
        "Programming tool connection"
      ],
      "root_causes": [
        "ESD exposure",
        "Improper handling procedures",
        "Installation procedure failures",
        "Supply rail ramp-up time effects"
      ],
      "solutions": [
        "Handle with appropriate ESD precautions",
        "Connect 10-\u00b5F and 0.1-\u00b5F low-ESR ceramic decoupling capacitors",
        "Place decoupling capacitors within a few millimeters of pins",
        "Connect external 47-k\u03a9 pullup resistor with 10-nF pulldown capacitor for NRST",
        "Use pullup resistor for open-drain IOs to output high",
        "Check memory-mapped FACTORY region for device capabilities",
        "Inspect device revision and identification values",
        "Verify top-side marking on device package"
      ]
    },
    "relationships": {
      "indicator_to_error": {
        "DEVICEID.PARTNUM": "Device failure",
        "DEVICEID.MANUFACTURER": "Device failure",
        "USERID.PART": "Device failure",
        "USERID.VARIANT": "Device failure",
        "Hardware revision values": "Performance degradation",
        "Device identification values": "Performance degradation"
      },
      "error_to_cause": {
        "ESD damage": "ESD exposure",
        "Parametric changes": "ESD exposure",
        "Device failure": "ESD exposure",
        "Performance degradation": "Improper handling procedures"
      },
      "cause_to_solution": {
        "ESD exposure": "Handle with appropriate ESD precautions",
        "Improper handling procedures": "Handle with appropriate ESD precautions",
        "Installation procedure failures": "Connect 10-\u00b5F and 0.1-\u00b5F low-ESR ceramic decoupling capacitors",
        "Supply rail ramp-up time effects": "Place decoupling capacitors within a few millimeters of pins"
      }
    }
  }
]